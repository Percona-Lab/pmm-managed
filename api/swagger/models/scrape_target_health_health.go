// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ScrapeTargetHealthHealth Target health : unknown, down, or up.
// swagger:model ScrapeTargetHealthHealth

type ScrapeTargetHealthHealth string

const (
	// ScrapeTargetHealthHealthUNKNOWN captures enum value "UNKNOWN"
	ScrapeTargetHealthHealthUNKNOWN ScrapeTargetHealthHealth = "UNKNOWN"
	// ScrapeTargetHealthHealthDOWN captures enum value "DOWN"
	ScrapeTargetHealthHealthDOWN ScrapeTargetHealthHealth = "DOWN"
	// ScrapeTargetHealthHealthUP captures enum value "UP"
	ScrapeTargetHealthHealthUP ScrapeTargetHealthHealth = "UP"
)

// for schema
var scrapeTargetHealthHealthEnum []interface{}

func init() {
	var res []ScrapeTargetHealthHealth
	if err := json.Unmarshal([]byte(`["UNKNOWN","DOWN","UP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scrapeTargetHealthHealthEnum = append(scrapeTargetHealthHealthEnum, v)
	}
}

func (m ScrapeTargetHealthHealth) validateScrapeTargetHealthHealthEnum(path, location string, value ScrapeTargetHealthHealth) error {
	if err := validate.Enum(path, location, value, scrapeTargetHealthHealthEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this scrape target health health
func (m ScrapeTargetHealthHealth) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateScrapeTargetHealthHealthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
