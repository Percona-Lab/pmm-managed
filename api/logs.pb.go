// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logs.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LogsAllRequest struct {
}

func (m *LogsAllRequest) Reset()                    { *m = LogsAllRequest{} }
func (m *LogsAllRequest) String() string            { return proto.CompactTextString(m) }
func (*LogsAllRequest) ProtoMessage()               {}
func (*LogsAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type LogsAllResponse struct {
	Logs map[string]*Log `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LogsAllResponse) Reset()                    { *m = LogsAllResponse{} }
func (m *LogsAllResponse) String() string            { return proto.CompactTextString(m) }
func (*LogsAllResponse) ProtoMessage()               {}
func (*LogsAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *LogsAllResponse) GetLogs() map[string]*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Log struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Log) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Log) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*LogsAllRequest)(nil), "api.LogsAllRequest")
	proto.RegisterType((*LogsAllResponse)(nil), "api.LogsAllResponse")
	proto.RegisterType((*Log)(nil), "api.Log")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Logs service

type LogsClient interface {
	All(ctx context.Context, in *LogsAllRequest, opts ...grpc.CallOption) (*LogsAllResponse, error)
}

type logsClient struct {
	cc *grpc.ClientConn
}

func NewLogsClient(cc *grpc.ClientConn) LogsClient {
	return &logsClient{cc}
}

func (c *logsClient) All(ctx context.Context, in *LogsAllRequest, opts ...grpc.CallOption) (*LogsAllResponse, error) {
	out := new(LogsAllResponse)
	err := grpc.Invoke(ctx, "/api.Logs/All", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logs service

type LogsServer interface {
	All(context.Context, *LogsAllRequest) (*LogsAllResponse, error)
}

func RegisterLogsServer(s *grpc.Server, srv LogsServer) {
	s.RegisterService(&_Logs_serviceDesc, srv)
}

func _Logs_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogsServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Logs/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogsServer).All(ctx, req.(*LogsAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Logs",
	HandlerType: (*LogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _Logs_All_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logs.proto",
}

func init() { proto.RegisterFile("logs.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0x03, 0x31,
	0x18, 0x84, 0x49, 0xb3, 0x4a, 0xfb, 0x57, 0x74, 0x89, 0x1e, 0x96, 0x45, 0xca, 0xb2, 0xa7, 0xbd,
	0xb8, 0x2b, 0xeb, 0x45, 0xbc, 0xad, 0xe0, 0x45, 0x7a, 0xca, 0x1b, 0xfc, 0x62, 0x08, 0x8b, 0x31,
	0x7f, 0x6c, 0xd2, 0x42, 0xaf, 0x9e, 0xbc, 0xfb, 0x68, 0xbe, 0x82, 0x0f, 0x22, 0x89, 0xb5, 0xa0,
	0x78, 0x9b, 0x7c, 0xcc, 0x4c, 0x26, 0x01, 0x30, 0xa4, 0x7d, 0xeb, 0x56, 0x14, 0x48, 0x70, 0x74,
	0x63, 0x79, 0xae, 0x89, 0xb4, 0x51, 0x1d, 0xba, 0xb1, 0x43, 0x6b, 0x29, 0x60, 0x18, 0xc9, 0xee,
	0x2c, 0x75, 0x0e, 0xc7, 0x4b, 0xd2, 0x7e, 0x30, 0x46, 0xaa, 0x97, 0xb5, 0xf2, 0xa1, 0x7e, 0x63,
	0x70, 0xb2, 0x47, 0xde, 0x91, 0xf5, 0x4a, 0xf4, 0x90, 0xc5, 0xda, 0x82, 0x55, 0xbc, 0x99, 0xf7,
	0x8b, 0x16, 0xdd, 0xd8, 0xfe, 0xf1, 0xa4, 0xf3, 0x9d, 0x0d, 0xab, 0xad, 0x4c, 0xde, 0x72, 0x80,
	0xd9, 0x1e, 0x89, 0x1c, 0xf8, 0x93, 0xda, 0x16, 0xac, 0x62, 0xcd, 0x4c, 0x46, 0x29, 0x16, 0x70,
	0xb0, 0x41, 0xb3, 0x56, 0xc5, 0xa4, 0x62, 0xcd, 0xbc, 0x9f, 0xfe, 0x74, 0xca, 0x6f, 0x7c, 0x33,
	0xb9, 0x66, 0xf5, 0x05, 0xf0, 0x25, 0x69, 0x21, 0x20, 0xb3, 0xf8, 0xac, 0x76, 0xe9, 0xa4, 0x23,
	0x7b, 0xc4, 0x80, 0x29, 0x7d, 0x24, 0x93, 0xee, 0xef, 0x21, 0x8b, 0x37, 0x8a, 0x5b, 0xe0, 0x83,
	0x31, 0xe2, 0xf4, 0xf7, 0xcc, 0xf4, 0xba, 0xf2, 0xec, 0xbf, 0xed, 0x75, 0xfe, 0xfa, 0xf1, 0xf9,
	0x3e, 0x01, 0x31, 0xed, 0x36, 0x97, 0x5d, 0x5c, 0xff, 0x70, 0x98, 0xbe, 0xe7, 0xea, 0x2b, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0xbd, 0xec, 0x31, 0x4f, 0x01, 0x00, 0x00,
}
