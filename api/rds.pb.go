// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rds.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RDSInstance struct {
	Id                 string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RegionId           string `protobuf:"bytes,2,opt,name=region_id,json=regionId" json:"region_id,omitempty"`
	EndpointAddress    string `protobuf:"bytes,3,opt,name=endpoint_address,json=endpointAddress" json:"endpoint_address,omitempty"`
	EndpointPort       uint32 `protobuf:"varint,4,opt,name=endpoint_port,json=endpointPort" json:"endpoint_port,omitempty"`
	MasterUsername     string `protobuf:"bytes,5,opt,name=master_username,json=masterUsername" json:"master_username,omitempty"`
	Engine             string `protobuf:"bytes,6,opt,name=engine" json:"engine,omitempty"`
	EngineVersion      string `protobuf:"bytes,7,opt,name=engine_version,json=engineVersion" json:"engine_version,omitempty"`
	MonitoringInterval uint32 `protobuf:"varint,8,opt,name=monitoring_interval,json=monitoringInterval" json:"monitoring_interval,omitempty"`
}

func (m *RDSInstance) Reset()                    { *m = RDSInstance{} }
func (m *RDSInstance) String() string            { return proto.CompactTextString(m) }
func (*RDSInstance) ProtoMessage()               {}
func (*RDSInstance) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *RDSInstance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RDSInstance) GetRegionId() string {
	if m != nil {
		return m.RegionId
	}
	return ""
}

func (m *RDSInstance) GetEndpointAddress() string {
	if m != nil {
		return m.EndpointAddress
	}
	return ""
}

func (m *RDSInstance) GetEndpointPort() uint32 {
	if m != nil {
		return m.EndpointPort
	}
	return 0
}

func (m *RDSInstance) GetMasterUsername() string {
	if m != nil {
		return m.MasterUsername
	}
	return ""
}

func (m *RDSInstance) GetEngine() string {
	if m != nil {
		return m.Engine
	}
	return ""
}

func (m *RDSInstance) GetEngineVersion() string {
	if m != nil {
		return m.EngineVersion
	}
	return ""
}

func (m *RDSInstance) GetMonitoringInterval() uint32 {
	if m != nil {
		return m.MonitoringInterval
	}
	return 0
}

type RDSDiscoverRequest struct {
	AwsAccessKeyId     string `protobuf:"bytes,1,opt,name=aws_access_key_id,json=awsAccessKeyId" json:"aws_access_key_id,omitempty"`
	AwsSecretAccessKey string `protobuf:"bytes,2,opt,name=aws_secret_access_key,json=awsSecretAccessKey" json:"aws_secret_access_key,omitempty"`
}

func (m *RDSDiscoverRequest) Reset()                    { *m = RDSDiscoverRequest{} }
func (m *RDSDiscoverRequest) String() string            { return proto.CompactTextString(m) }
func (*RDSDiscoverRequest) ProtoMessage()               {}
func (*RDSDiscoverRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *RDSDiscoverRequest) GetAwsAccessKeyId() string {
	if m != nil {
		return m.AwsAccessKeyId
	}
	return ""
}

func (m *RDSDiscoverRequest) GetAwsSecretAccessKey() string {
	if m != nil {
		return m.AwsSecretAccessKey
	}
	return ""
}

type RDSDiscoverResponse struct {
	Instances []*RDSInstance `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty"`
}

func (m *RDSDiscoverResponse) Reset()                    { *m = RDSDiscoverResponse{} }
func (m *RDSDiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*RDSDiscoverResponse) ProtoMessage()               {}
func (*RDSDiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *RDSDiscoverResponse) GetInstances() []*RDSInstance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func init() {
	proto.RegisterType((*RDSInstance)(nil), "api.RDSInstance")
	proto.RegisterType((*RDSDiscoverRequest)(nil), "api.RDSDiscoverRequest")
	proto.RegisterType((*RDSDiscoverResponse)(nil), "api.RDSDiscoverResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RDS service

type RDSClient interface {
	Discover(ctx context.Context, in *RDSDiscoverRequest, opts ...grpc.CallOption) (*RDSDiscoverResponse, error)
}

type rDSClient struct {
	cc *grpc.ClientConn
}

func NewRDSClient(cc *grpc.ClientConn) RDSClient {
	return &rDSClient{cc}
}

func (c *rDSClient) Discover(ctx context.Context, in *RDSDiscoverRequest, opts ...grpc.CallOption) (*RDSDiscoverResponse, error) {
	out := new(RDSDiscoverResponse)
	err := grpc.Invoke(ctx, "/api.RDS/Discover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RDS service

type RDSServer interface {
	Discover(context.Context, *RDSDiscoverRequest) (*RDSDiscoverResponse, error)
}

func RegisterRDSServer(s *grpc.Server, srv RDSServer) {
	s.RegisterService(&_RDS_serviceDesc, srv)
}

func _RDS_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RDSDiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RDSServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RDS/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RDSServer).Discover(ctx, req.(*RDSDiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RDS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RDS",
	HandlerType: (*RDSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _RDS_Discover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rds.proto",
}

func init() { proto.RegisterFile("rds.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x15, 0x07, 0x42, 0x32, 0x25, 0x69, 0x98, 0x0a, 0x58, 0x15, 0x0e, 0x51, 0x10, 0x22,
	0xbd, 0xc4, 0x50, 0x9e, 0xa0, 0x52, 0x38, 0x44, 0x5c, 0x90, 0x23, 0xe0, 0xc6, 0x6a, 0xf1, 0x8e,
	0xac, 0x15, 0xcd, 0xac, 0xd9, 0xd9, 0x26, 0xea, 0x95, 0x57, 0xe0, 0x11, 0x78, 0x24, 0x5e, 0x81,
	0x07, 0x41, 0xac, 0xed, 0xb4, 0xc0, 0xcd, 0xfe, 0xfe, 0x6f, 0x67, 0xec, 0x99, 0x85, 0x51, 0xb0,
	0xb2, 0xac, 0x83, 0x8f, 0x1e, 0xfb, 0xa6, 0x76, 0xa7, 0x4f, 0x2b, 0xef, 0xab, 0x4b, 0xca, 0x4d,
	0xed, 0x72, 0xc3, 0xec, 0xa3, 0x89, 0xce, 0x73, 0xab, 0xcc, 0x7f, 0x64, 0x70, 0x54, 0xac, 0x36,
	0x6b, 0x96, 0x68, 0xb8, 0x24, 0x9c, 0x40, 0xe6, 0xac, 0xea, 0xcd, 0x7a, 0x8b, 0x51, 0x91, 0x39,
	0x8b, 0x4f, 0x60, 0x14, 0xa8, 0x72, 0x9e, 0xb5, 0xb3, 0x2a, 0x4b, 0x78, 0xd8, 0x80, 0xb5, 0xc5,
	0x33, 0x98, 0x12, 0xdb, 0xda, 0x3b, 0x8e, 0xda, 0x58, 0x1b, 0x48, 0x44, 0xf5, 0x93, 0x73, 0xdc,
	0xf1, 0x8b, 0x06, 0xe3, 0x33, 0x18, 0x1f, 0xd4, 0xda, 0x87, 0xa8, 0xee, 0xcc, 0x7a, 0x8b, 0x71,
	0x71, 0xbf, 0x83, 0xef, 0x7c, 0x88, 0xf8, 0x02, 0x8e, 0xb7, 0x46, 0x22, 0x05, 0x7d, 0x25, 0x14,
	0xd8, 0x6c, 0x49, 0xdd, 0x4d, 0xe5, 0x26, 0x0d, 0x7e, 0xdf, 0x52, 0x7c, 0x04, 0x03, 0xe2, 0xca,
	0x31, 0xa9, 0x41, 0xca, 0xdb, 0x37, 0x7c, 0x0e, 0x93, 0xe6, 0x49, 0xef, 0x28, 0x88, 0xf3, 0xac,
	0xee, 0xa5, 0x7c, 0xdc, 0xd0, 0x0f, 0x0d, 0xc4, 0x1c, 0x4e, 0xb6, 0x9e, 0x5d, 0xf4, 0xc1, 0x71,
	0xa5, 0x1d, 0x47, 0x0a, 0x3b, 0x73, 0xa9, 0x86, 0xe9, 0x93, 0xf0, 0x26, 0x5a, 0xb7, 0xc9, 0x3c,
	0x00, 0x16, 0xab, 0xcd, 0xca, 0x49, 0xe9, 0x77, 0x14, 0x0a, 0xfa, 0x7a, 0x45, 0x12, 0xf1, 0x0c,
	0x1e, 0x98, 0xbd, 0x68, 0x53, 0x96, 0x24, 0xa2, 0xbf, 0xd0, 0xb5, 0x3e, 0x8c, 0x6e, 0x62, 0xf6,
	0x72, 0x91, 0xf8, 0x5b, 0xba, 0x5e, 0x5b, 0x7c, 0x05, 0x0f, 0xff, 0xa8, 0x42, 0x65, 0xa0, 0x78,
	0xeb, 0x44, 0x3b, 0x52, 0x34, 0x7b, 0xd9, 0xa4, 0xec, 0x70, 0x68, 0xfe, 0x06, 0x4e, 0xfe, 0xea,
	0x29, 0xb5, 0x67, 0x21, 0x5c, 0xc2, 0xc8, 0xb5, 0xcb, 0x12, 0xd5, 0x9b, 0xf5, 0x17, 0x47, 0xe7,
	0xd3, 0xa5, 0xa9, 0xdd, 0xf2, 0xd6, 0x16, 0x8b, 0x1b, 0xe5, 0xfc, 0x13, 0xf4, 0x8b, 0xd5, 0x06,
	0x3f, 0xc2, 0xb0, 0x2b, 0x85, 0x8f, 0x3b, 0xff, 0x9f, 0x1f, 0x3a, 0x55, 0xff, 0x07, 0x4d, 0xd7,
	0xb9, 0xfa, 0xf6, 0xf3, 0xd7, 0xf7, 0x0c, 0x71, 0x9a, 0xef, 0x5e, 0xe6, 0xc1, 0x4a, 0x6e, 0x5b,
	0xe3, 0xf3, 0x20, 0xdd, 0xa3, 0xd7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x23, 0x9c, 0x6d, 0x57,
	0x77, 0x02, 0x00, 0x00,
}
