// Code generated by protoc-gen-go. DO NOT EDIT.
// source: demo.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DemoErrorRequest struct {
	Code  uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *DemoErrorRequest) Reset()                    { *m = DemoErrorRequest{} }
func (m *DemoErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*DemoErrorRequest) ProtoMessage()               {}
func (*DemoErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DemoErrorRequest) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DemoErrorRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DemoErrorRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DemoErrorResponse struct {
}

func (m *DemoErrorResponse) Reset()                    { *m = DemoErrorResponse{} }
func (m *DemoErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*DemoErrorResponse) ProtoMessage()               {}
func (*DemoErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func init() {
	proto.RegisterType((*DemoErrorRequest)(nil), "api.DemoErrorRequest")
	proto.RegisterType((*DemoErrorResponse)(nil), "api.DemoErrorResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Demo service

type DemoClient interface {
	Error(ctx context.Context, in *DemoErrorRequest, opts ...grpc.CallOption) (*DemoErrorResponse, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) Error(ctx context.Context, in *DemoErrorRequest, opts ...grpc.CallOption) (*DemoErrorResponse, error) {
	out := new(DemoErrorResponse)
	err := grpc.Invoke(ctx, "/api.Demo/Error", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Demo service

type DemoServer interface {
	Error(context.Context, *DemoErrorRequest) (*DemoErrorResponse, error)
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Demo/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Error(ctx, req.(*DemoErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Error",
			Handler:    _Demo_Error_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}

func init() { proto.RegisterFile("demo.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x49, 0xcd, 0xcd,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x94, 0x92, 0x49, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9,
	0xcc, 0xcf, 0x2b, 0x86, 0x28, 0x51, 0xf2, 0xe3, 0x12, 0x70, 0x49, 0xcd, 0xcd, 0x77, 0x2d, 0x2a,
	0xca, 0x2f, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x49, 0xce, 0x4f,
	0x49, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x02, 0xb3, 0x85, 0x04, 0xb8, 0x98, 0xb3, 0x53,
	0x2b, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4,
	0x9c, 0xd2, 0x54, 0x09, 0x66, 0xb0, 0x18, 0x84, 0xa3, 0x24, 0xcc, 0x25, 0x88, 0x64, 0x5e, 0x71,
	0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x51, 0x20, 0x17, 0x0b, 0x48, 0x50, 0xc8, 0x93, 0x8b, 0x15, 0x2c,
	0x21, 0x24, 0xaa, 0x97, 0x58, 0x90, 0xa9, 0x87, 0x6e, 0xb1, 0x94, 0x18, 0xba, 0x30, 0x44, 0xbf,
	0x92, 0x60, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0xb8, 0x85, 0x38, 0xf5, 0xcb, 0x0c, 0xf4, 0x53, 0x41,
	0x52, 0x49, 0x6c, 0x60, 0xe7, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xfd, 0x9c, 0xc5,
	0xef, 0x00, 0x00, 0x00,
}
