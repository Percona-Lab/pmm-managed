// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scrape_configs.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LabelPair struct {
	// Label name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Label value
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *LabelPair) Reset()                    { *m = LabelPair{} }
func (m *LabelPair) String() string            { return proto.CompactTextString(m) }
func (*LabelPair) ProtoMessage()               {}
func (*LabelPair) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *LabelPair) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelPair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type StaticConfig struct {
	// Hostnames or IPs followed by an optional port number: "1.2.3.4:9090"
	Targets []string `protobuf:"bytes,1,rep,name=targets" json:"targets,omitempty"`
	// Labels assigned to all metrics scraped from the targets
	Labels []*LabelPair `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty"`
}

func (m *StaticConfig) Reset()                    { *m = StaticConfig{} }
func (m *StaticConfig) String() string            { return proto.CompactTextString(m) }
func (*StaticConfig) ProtoMessage()               {}
func (*StaticConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *StaticConfig) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *StaticConfig) GetLabels() []*LabelPair {
	if m != nil {
		return m.Labels
	}
	return nil
}

type BasicAuth struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *BasicAuth) Reset()                    { *m = BasicAuth{} }
func (m *BasicAuth) String() string            { return proto.CompactTextString(m) }
func (*BasicAuth) ProtoMessage()               {}
func (*BasicAuth) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *BasicAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *BasicAuth) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type TLSConfig struct {
	InsecureSkipVerify bool `protobuf:"varint,5,opt,name=insecure_skip_verify,json=insecureSkipVerify" json:"insecure_skip_verify,omitempty"`
}

func (m *TLSConfig) Reset()                    { *m = TLSConfig{} }
func (m *TLSConfig) String() string            { return proto.CompactTextString(m) }
func (*TLSConfig) ProtoMessage()               {}
func (*TLSConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *TLSConfig) GetInsecureSkipVerify() bool {
	if m != nil {
		return m.InsecureSkipVerify
	}
	return false
}

type ScrapeConfig struct {
	// The job name assigned to scraped metrics by default: "example-job" (required)
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	// How frequently to scrape targets from this job: "10s"
	ScrapeInterval string `protobuf:"bytes,2,opt,name=scrape_interval,json=scrapeInterval" json:"scrape_interval,omitempty"`
	// Per-scrape timeout when scraping this job: "5s"
	ScrapeTimeout string `protobuf:"bytes,3,opt,name=scrape_timeout,json=scrapeTimeout" json:"scrape_timeout,omitempty"`
	// The HTTP resource path on which to fetch metrics from targets: "/metrics"
	MetricsPath string `protobuf:"bytes,4,opt,name=metrics_path,json=metricsPath" json:"metrics_path,omitempty"`
	// Configures the protocol scheme used for requests: "http" or "https"
	Scheme string `protobuf:"bytes,5,opt,name=scheme" json:"scheme,omitempty"`
	// Sets the `Authorization` header on every scrape request with the configured username and password
	BasicAuth *BasicAuth `protobuf:"bytes,6,opt,name=basic_auth,json=basicAuth" json:"basic_auth,omitempty"`
	// Configures the scrape request's TLS settings
	TlsConfig *TLSConfig `protobuf:"bytes,7,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	// List of labeled statically configured targets for this job
	StaticConfigs []*StaticConfig `protobuf:"bytes,8,rep,name=static_configs,json=staticConfigs" json:"static_configs,omitempty"`
}

func (m *ScrapeConfig) Reset()                    { *m = ScrapeConfig{} }
func (m *ScrapeConfig) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfig) ProtoMessage()               {}
func (*ScrapeConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *ScrapeConfig) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ScrapeConfig) GetScrapeInterval() string {
	if m != nil {
		return m.ScrapeInterval
	}
	return ""
}

func (m *ScrapeConfig) GetScrapeTimeout() string {
	if m != nil {
		return m.ScrapeTimeout
	}
	return ""
}

func (m *ScrapeConfig) GetMetricsPath() string {
	if m != nil {
		return m.MetricsPath
	}
	return ""
}

func (m *ScrapeConfig) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *ScrapeConfig) GetBasicAuth() *BasicAuth {
	if m != nil {
		return m.BasicAuth
	}
	return nil
}

func (m *ScrapeConfig) GetTlsConfig() *TLSConfig {
	if m != nil {
		return m.TlsConfig
	}
	return nil
}

func (m *ScrapeConfig) GetStaticConfigs() []*StaticConfig {
	if m != nil {
		return m.StaticConfigs
	}
	return nil
}

type ScrapeConfigsListRequest struct {
}

func (m *ScrapeConfigsListRequest) Reset()                    { *m = ScrapeConfigsListRequest{} }
func (m *ScrapeConfigsListRequest) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsListRequest) ProtoMessage()               {}
func (*ScrapeConfigsListRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

type ScrapeConfigsListResponse struct {
	ScrapeConfigs []*ScrapeConfig `protobuf:"bytes,1,rep,name=scrape_configs,json=scrapeConfigs" json:"scrape_configs,omitempty"`
}

func (m *ScrapeConfigsListResponse) Reset()                    { *m = ScrapeConfigsListResponse{} }
func (m *ScrapeConfigsListResponse) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsListResponse) ProtoMessage()               {}
func (*ScrapeConfigsListResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *ScrapeConfigsListResponse) GetScrapeConfigs() []*ScrapeConfig {
	if m != nil {
		return m.ScrapeConfigs
	}
	return nil
}

type ScrapeConfigsGetRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
}

func (m *ScrapeConfigsGetRequest) Reset()                    { *m = ScrapeConfigsGetRequest{} }
func (m *ScrapeConfigsGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsGetRequest) ProtoMessage()               {}
func (*ScrapeConfigsGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *ScrapeConfigsGetRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type ScrapeConfigsGetResponse struct {
	ScrapeConfig *ScrapeConfig `protobuf:"bytes,1,opt,name=scrape_config,json=scrapeConfig" json:"scrape_config,omitempty"`
}

func (m *ScrapeConfigsGetResponse) Reset()                    { *m = ScrapeConfigsGetResponse{} }
func (m *ScrapeConfigsGetResponse) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsGetResponse) ProtoMessage()               {}
func (*ScrapeConfigsGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *ScrapeConfigsGetResponse) GetScrapeConfig() *ScrapeConfig {
	if m != nil {
		return m.ScrapeConfig
	}
	return nil
}

type ScrapeConfigsCreateRequest struct {
	ScrapeConfig *ScrapeConfig `protobuf:"bytes,1,opt,name=scrape_config,json=scrapeConfig" json:"scrape_config,omitempty"`
}

func (m *ScrapeConfigsCreateRequest) Reset()                    { *m = ScrapeConfigsCreateRequest{} }
func (m *ScrapeConfigsCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsCreateRequest) ProtoMessage()               {}
func (*ScrapeConfigsCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *ScrapeConfigsCreateRequest) GetScrapeConfig() *ScrapeConfig {
	if m != nil {
		return m.ScrapeConfig
	}
	return nil
}

type ScrapeConfigsCreateResponse struct {
}

func (m *ScrapeConfigsCreateResponse) Reset()                    { *m = ScrapeConfigsCreateResponse{} }
func (m *ScrapeConfigsCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsCreateResponse) ProtoMessage()               {}
func (*ScrapeConfigsCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

type ScrapeConfigsDeleteRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
}

func (m *ScrapeConfigsDeleteRequest) Reset()                    { *m = ScrapeConfigsDeleteRequest{} }
func (m *ScrapeConfigsDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsDeleteRequest) ProtoMessage()               {}
func (*ScrapeConfigsDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *ScrapeConfigsDeleteRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

type ScrapeConfigsDeleteResponse struct {
}

func (m *ScrapeConfigsDeleteResponse) Reset()                    { *m = ScrapeConfigsDeleteResponse{} }
func (m *ScrapeConfigsDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*ScrapeConfigsDeleteResponse) ProtoMessage()               {}
func (*ScrapeConfigsDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

type ScrapeConfigsAddStaticTargetsRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	// Hostnames or IPs followed by an optional port number: "1.2.3.4:9090"
	Targets []string `protobuf:"bytes,2,rep,name=targets" json:"targets,omitempty"`
}

func (m *ScrapeConfigsAddStaticTargetsRequest) Reset()         { *m = ScrapeConfigsAddStaticTargetsRequest{} }
func (m *ScrapeConfigsAddStaticTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*ScrapeConfigsAddStaticTargetsRequest) ProtoMessage()    {}
func (*ScrapeConfigsAddStaticTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{13}
}

func (m *ScrapeConfigsAddStaticTargetsRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ScrapeConfigsAddStaticTargetsRequest) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ScrapeConfigsAddStaticTargetsResponse struct {
}

func (m *ScrapeConfigsAddStaticTargetsResponse) Reset()         { *m = ScrapeConfigsAddStaticTargetsResponse{} }
func (m *ScrapeConfigsAddStaticTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*ScrapeConfigsAddStaticTargetsResponse) ProtoMessage()    {}
func (*ScrapeConfigsAddStaticTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{14}
}

type ScrapeConfigsRemoveStaticTargetsRequest struct {
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName" json:"job_name,omitempty"`
	// Hostnames or IPs followed by an optional port number: "1.2.3.4:9090"
	Targets []string `protobuf:"bytes,2,rep,name=targets" json:"targets,omitempty"`
}

func (m *ScrapeConfigsRemoveStaticTargetsRequest) Reset() {
	*m = ScrapeConfigsRemoveStaticTargetsRequest{}
}
func (m *ScrapeConfigsRemoveStaticTargetsRequest) String() string { return proto.CompactTextString(m) }
func (*ScrapeConfigsRemoveStaticTargetsRequest) ProtoMessage()    {}
func (*ScrapeConfigsRemoveStaticTargetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{15}
}

func (m *ScrapeConfigsRemoveStaticTargetsRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *ScrapeConfigsRemoveStaticTargetsRequest) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

type ScrapeConfigsRemoveStaticTargetsResponse struct {
}

func (m *ScrapeConfigsRemoveStaticTargetsResponse) Reset() {
	*m = ScrapeConfigsRemoveStaticTargetsResponse{}
}
func (m *ScrapeConfigsRemoveStaticTargetsResponse) String() string { return proto.CompactTextString(m) }
func (*ScrapeConfigsRemoveStaticTargetsResponse) ProtoMessage()    {}
func (*ScrapeConfigsRemoveStaticTargetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor4, []int{16}
}

func init() {
	proto.RegisterType((*LabelPair)(nil), "api.LabelPair")
	proto.RegisterType((*StaticConfig)(nil), "api.StaticConfig")
	proto.RegisterType((*BasicAuth)(nil), "api.BasicAuth")
	proto.RegisterType((*TLSConfig)(nil), "api.TLSConfig")
	proto.RegisterType((*ScrapeConfig)(nil), "api.ScrapeConfig")
	proto.RegisterType((*ScrapeConfigsListRequest)(nil), "api.ScrapeConfigsListRequest")
	proto.RegisterType((*ScrapeConfigsListResponse)(nil), "api.ScrapeConfigsListResponse")
	proto.RegisterType((*ScrapeConfigsGetRequest)(nil), "api.ScrapeConfigsGetRequest")
	proto.RegisterType((*ScrapeConfigsGetResponse)(nil), "api.ScrapeConfigsGetResponse")
	proto.RegisterType((*ScrapeConfigsCreateRequest)(nil), "api.ScrapeConfigsCreateRequest")
	proto.RegisterType((*ScrapeConfigsCreateResponse)(nil), "api.ScrapeConfigsCreateResponse")
	proto.RegisterType((*ScrapeConfigsDeleteRequest)(nil), "api.ScrapeConfigsDeleteRequest")
	proto.RegisterType((*ScrapeConfigsDeleteResponse)(nil), "api.ScrapeConfigsDeleteResponse")
	proto.RegisterType((*ScrapeConfigsAddStaticTargetsRequest)(nil), "api.ScrapeConfigsAddStaticTargetsRequest")
	proto.RegisterType((*ScrapeConfigsAddStaticTargetsResponse)(nil), "api.ScrapeConfigsAddStaticTargetsResponse")
	proto.RegisterType((*ScrapeConfigsRemoveStaticTargetsRequest)(nil), "api.ScrapeConfigsRemoveStaticTargetsRequest")
	proto.RegisterType((*ScrapeConfigsRemoveStaticTargetsResponse)(nil), "api.ScrapeConfigsRemoveStaticTargetsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ScrapeConfigs service

type ScrapeConfigsClient interface {
	// List returns all scrape configs.
	List(ctx context.Context, in *ScrapeConfigsListRequest, opts ...grpc.CallOption) (*ScrapeConfigsListResponse, error)
	// Get returns a scrape config by job name.
	// Errors: NotFound(5) if no such scrape config is present.
	Get(ctx context.Context, in *ScrapeConfigsGetRequest, opts ...grpc.CallOption) (*ScrapeConfigsGetResponse, error)
	// Create creates a new scrape config.
	// Errors: InvalidArgument(3) if some argument is not valid,
	// AlreadyExists(6) if scrape config with that job name is already present.
	Create(ctx context.Context, in *ScrapeConfigsCreateRequest, opts ...grpc.CallOption) (*ScrapeConfigsCreateResponse, error)
	// Delete removes existing scrape config by job name.
	// Errors: NotFound(5) if no such scrape config is present.
	Delete(ctx context.Context, in *ScrapeConfigsDeleteRequest, opts ...grpc.CallOption) (*ScrapeConfigsDeleteResponse, error)
	AddStaticTargets(ctx context.Context, in *ScrapeConfigsAddStaticTargetsRequest, opts ...grpc.CallOption) (*ScrapeConfigsAddStaticTargetsResponse, error)
	RemoveStaticTargets(ctx context.Context, in *ScrapeConfigsRemoveStaticTargetsRequest, opts ...grpc.CallOption) (*ScrapeConfigsRemoveStaticTargetsResponse, error)
}

type scrapeConfigsClient struct {
	cc *grpc.ClientConn
}

func NewScrapeConfigsClient(cc *grpc.ClientConn) ScrapeConfigsClient {
	return &scrapeConfigsClient{cc}
}

func (c *scrapeConfigsClient) List(ctx context.Context, in *ScrapeConfigsListRequest, opts ...grpc.CallOption) (*ScrapeConfigsListResponse, error) {
	out := new(ScrapeConfigsListResponse)
	err := grpc.Invoke(ctx, "/api.ScrapeConfigs/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeConfigsClient) Get(ctx context.Context, in *ScrapeConfigsGetRequest, opts ...grpc.CallOption) (*ScrapeConfigsGetResponse, error) {
	out := new(ScrapeConfigsGetResponse)
	err := grpc.Invoke(ctx, "/api.ScrapeConfigs/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeConfigsClient) Create(ctx context.Context, in *ScrapeConfigsCreateRequest, opts ...grpc.CallOption) (*ScrapeConfigsCreateResponse, error) {
	out := new(ScrapeConfigsCreateResponse)
	err := grpc.Invoke(ctx, "/api.ScrapeConfigs/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeConfigsClient) Delete(ctx context.Context, in *ScrapeConfigsDeleteRequest, opts ...grpc.CallOption) (*ScrapeConfigsDeleteResponse, error) {
	out := new(ScrapeConfigsDeleteResponse)
	err := grpc.Invoke(ctx, "/api.ScrapeConfigs/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeConfigsClient) AddStaticTargets(ctx context.Context, in *ScrapeConfigsAddStaticTargetsRequest, opts ...grpc.CallOption) (*ScrapeConfigsAddStaticTargetsResponse, error) {
	out := new(ScrapeConfigsAddStaticTargetsResponse)
	err := grpc.Invoke(ctx, "/api.ScrapeConfigs/AddStaticTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scrapeConfigsClient) RemoveStaticTargets(ctx context.Context, in *ScrapeConfigsRemoveStaticTargetsRequest, opts ...grpc.CallOption) (*ScrapeConfigsRemoveStaticTargetsResponse, error) {
	out := new(ScrapeConfigsRemoveStaticTargetsResponse)
	err := grpc.Invoke(ctx, "/api.ScrapeConfigs/RemoveStaticTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScrapeConfigs service

type ScrapeConfigsServer interface {
	// List returns all scrape configs.
	List(context.Context, *ScrapeConfigsListRequest) (*ScrapeConfigsListResponse, error)
	// Get returns a scrape config by job name.
	// Errors: NotFound(5) if no such scrape config is present.
	Get(context.Context, *ScrapeConfigsGetRequest) (*ScrapeConfigsGetResponse, error)
	// Create creates a new scrape config.
	// Errors: InvalidArgument(3) if some argument is not valid,
	// AlreadyExists(6) if scrape config with that job name is already present.
	Create(context.Context, *ScrapeConfigsCreateRequest) (*ScrapeConfigsCreateResponse, error)
	// Delete removes existing scrape config by job name.
	// Errors: NotFound(5) if no such scrape config is present.
	Delete(context.Context, *ScrapeConfigsDeleteRequest) (*ScrapeConfigsDeleteResponse, error)
	AddStaticTargets(context.Context, *ScrapeConfigsAddStaticTargetsRequest) (*ScrapeConfigsAddStaticTargetsResponse, error)
	RemoveStaticTargets(context.Context, *ScrapeConfigsRemoveStaticTargetsRequest) (*ScrapeConfigsRemoveStaticTargetsResponse, error)
}

func RegisterScrapeConfigsServer(s *grpc.Server, srv ScrapeConfigsServer) {
	s.RegisterService(&_ScrapeConfigs_serviceDesc, srv)
}

func _ScrapeConfigs_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeConfigsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeConfigsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScrapeConfigs/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeConfigsServer).List(ctx, req.(*ScrapeConfigsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeConfigs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeConfigsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeConfigsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScrapeConfigs/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeConfigsServer).Get(ctx, req.(*ScrapeConfigsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeConfigs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeConfigsCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeConfigsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScrapeConfigs/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeConfigsServer).Create(ctx, req.(*ScrapeConfigsCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeConfigs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeConfigsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeConfigsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScrapeConfigs/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeConfigsServer).Delete(ctx, req.(*ScrapeConfigsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeConfigs_AddStaticTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeConfigsAddStaticTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeConfigsServer).AddStaticTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScrapeConfigs/AddStaticTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeConfigsServer).AddStaticTargets(ctx, req.(*ScrapeConfigsAddStaticTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScrapeConfigs_RemoveStaticTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeConfigsRemoveStaticTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScrapeConfigsServer).RemoveStaticTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ScrapeConfigs/RemoveStaticTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScrapeConfigsServer).RemoveStaticTargets(ctx, req.(*ScrapeConfigsRemoveStaticTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScrapeConfigs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ScrapeConfigs",
	HandlerType: (*ScrapeConfigsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ScrapeConfigs_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ScrapeConfigs_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ScrapeConfigs_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ScrapeConfigs_Delete_Handler,
		},
		{
			MethodName: "AddStaticTargets",
			Handler:    _ScrapeConfigs_AddStaticTargets_Handler,
		},
		{
			MethodName: "RemoveStaticTargets",
			Handler:    _ScrapeConfigs_RemoveStaticTargets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrape_configs.proto",
}

func init() { proto.RegisterFile("scrape_configs.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x18, 0x95, 0x93, 0x36, 0x8d, 0xbf, 0x26, 0xbd, 0xf7, 0xce, 0x8d, 0x6e, 0x5d, 0xdf, 0x86, 0x06,
	0x8b, 0xd2, 0x10, 0x35, 0x4d, 0x29, 0xbf, 0x42, 0x62, 0x51, 0x8a, 0x54, 0x21, 0x55, 0xa8, 0x72,
	0x02, 0x1b, 0x24, 0xa2, 0x49, 0x3a, 0x4d, 0xa6, 0x75, 0x6c, 0xe3, 0x19, 0x07, 0x21, 0xc4, 0x86,
	0x27, 0x40, 0xe2, 0x0d, 0xd8, 0xf2, 0x2a, 0xec, 0x78, 0x05, 0x1e, 0x04, 0x79, 0x3c, 0x76, 0xed,
	0xc4, 0x69, 0x0a, 0x62, 0x97, 0xf9, 0xbe, 0x6f, 0xce, 0x39, 0x73, 0xe6, 0x8c, 0x15, 0xa8, 0xb0,
	0xbe, 0x87, 0x5d, 0xd2, 0xed, 0x3b, 0xf6, 0x29, 0x1d, 0xb0, 0x1d, 0xd7, 0x73, 0xb8, 0x83, 0xf2,
	0xd8, 0xa5, 0xfa, 0xfa, 0xc0, 0x71, 0x06, 0x16, 0x69, 0x61, 0x97, 0xb6, 0xb0, 0x6d, 0x3b, 0x1c,
	0x73, 0xea, 0xd8, 0x72, 0xc4, 0xb8, 0x07, 0xea, 0x11, 0xee, 0x11, 0xeb, 0x18, 0x53, 0x0f, 0x21,
	0x58, 0xb0, 0xf1, 0x88, 0x68, 0x4a, 0x4d, 0xa9, 0xab, 0xa6, 0xf8, 0x8d, 0x2a, 0xb0, 0x38, 0xc6,
	0x96, 0x4f, 0xb4, 0x9c, 0x28, 0x86, 0x0b, 0xe3, 0x18, 0x4a, 0xed, 0x00, 0xa8, 0x7f, 0x20, 0x08,
	0x91, 0x06, 0x4b, 0x1c, 0x7b, 0x03, 0xc2, 0x99, 0xa6, 0xd4, 0xf2, 0x75, 0xd5, 0x8c, 0x96, 0xe8,
	0x26, 0x14, 0xac, 0x80, 0x80, 0x69, 0xb9, 0x5a, 0xbe, 0xbe, 0xbc, 0xb7, 0xb2, 0x83, 0x5d, 0xba,
	0x13, 0x73, 0x9a, 0xb2, 0x6b, 0x1c, 0x80, 0xfa, 0x04, 0x33, 0xda, 0xdf, 0xf7, 0xf9, 0x10, 0xe9,
	0x50, 0xf4, 0x19, 0xf1, 0x12, 0x62, 0xe2, 0x75, 0xd0, 0x73, 0x31, 0x63, 0x6f, 0x1d, 0xef, 0x44,
	0x6a, 0x8a, 0xd7, 0xc6, 0x63, 0x50, 0x3b, 0x47, 0x6d, 0xa9, 0x69, 0x17, 0x2a, 0xd4, 0x66, 0xa4,
	0xef, 0x7b, 0xa4, 0xcb, 0xce, 0xa9, 0xdb, 0x1d, 0x13, 0x8f, 0x9e, 0xbe, 0xd3, 0x16, 0x6b, 0x4a,
	0xbd, 0x68, 0xa2, 0xa8, 0xd7, 0x3e, 0xa7, 0xee, 0x4b, 0xd1, 0x31, 0xbe, 0xe5, 0xa0, 0xd4, 0x16,
	0x46, 0x4a, 0x88, 0x35, 0x28, 0x9e, 0x39, 0xbd, 0x6e, 0x42, 0xc7, 0xd2, 0x99, 0xd3, 0x7b, 0x1e,
	0xc8, 0xd8, 0x82, 0xbf, 0xa4, 0xe7, 0xd4, 0xe6, 0xc4, 0x1b, 0x63, 0x4b, 0xaa, 0x59, 0x09, 0xcb,
	0xcf, 0x64, 0x15, 0x6d, 0x82, 0xac, 0x74, 0x39, 0x1d, 0x11, 0xc7, 0xe7, 0x5a, 0x5e, 0xcc, 0x95,
	0xc3, 0x6a, 0x27, 0x2c, 0xa2, 0xeb, 0x50, 0x1a, 0x11, 0xee, 0xd1, 0x3e, 0xeb, 0xba, 0x98, 0x0f,
	0xb5, 0x05, 0x31, 0xb4, 0x2c, 0x6b, 0xc7, 0x98, 0x0f, 0xd1, 0x7f, 0x50, 0x60, 0xfd, 0x21, 0x19,
	0x11, 0x71, 0x04, 0xd5, 0x94, 0x2b, 0xd4, 0x04, 0xe8, 0x05, 0xd6, 0x75, 0xb1, 0xcf, 0x87, 0x5a,
	0xa1, 0xa6, 0xc4, 0x36, 0xc7, 0x8e, 0x9a, 0x6a, 0x2f, 0x36, 0xb7, 0x09, 0xc0, 0x2d, 0x26, 0xa3,
	0xa2, 0x2d, 0x25, 0xc6, 0x63, 0xef, 0x4c, 0x95, 0x5b, 0x4c, 0x7a, 0xf0, 0x10, 0x56, 0x98, 0xb8,
	0xea, 0x28, 0x5c, 0x5a, 0x51, 0x5c, 0xe4, 0x3f, 0x62, 0x4b, 0x32, 0x05, 0x66, 0x99, 0x25, 0x56,
	0xcc, 0xd0, 0x41, 0x4b, 0xba, 0xc9, 0x8e, 0x28, 0xe3, 0x26, 0x79, 0xe3, 0x13, 0xc6, 0x8d, 0x17,
	0xb0, 0x96, 0xd1, 0x63, 0xae, 0x63, 0x33, 0x22, 0x28, 0x53, 0x79, 0x16, 0xa1, 0x8a, 0x29, 0x13,
	0xfb, 0x22, 0x17, 0x23, 0xca, 0xbb, 0xb0, 0x9a, 0x82, 0x3d, 0x24, 0x11, 0xe3, 0x25, 0x77, 0x69,
	0x98, 0x13, 0x42, 0xc5, 0x2e, 0xa9, 0xe5, 0x3e, 0x94, 0x53, 0x5a, 0xc4, 0xde, 0x4c, 0x29, 0xa5,
	0xa4, 0x14, 0xa3, 0x03, 0x7a, 0x0a, 0xf3, 0xc0, 0x23, 0x98, 0x93, 0x48, 0xcc, 0xef, 0xa2, 0x56,
	0xe1, 0xff, 0x4c, 0xd4, 0x50, 0xac, 0xf1, 0x60, 0x82, 0xf4, 0x29, 0xb1, 0xc8, 0x05, 0xe9, 0x25,
	0x0e, 0x4c, 0xe2, 0x46, 0x1b, 0x25, 0xee, 0x2b, 0xb8, 0x91, 0x6a, 0xef, 0x9f, 0x9c, 0x84, 0x17,
	0xdf, 0x09, 0x5f, 0xf9, 0x7c, 0x86, 0xe4, 0x17, 0x22, 0x97, 0xfa, 0x42, 0x18, 0x5b, 0xb0, 0x39,
	0x07, 0x5c, 0xaa, 0x78, 0x0d, 0x5b, 0xa9, 0x41, 0x93, 0x8c, 0x9c, 0x31, 0xf9, 0x73, 0x42, 0x1a,
	0x50, 0x9f, 0x8f, 0x1f, 0x6a, 0xd9, 0xfb, 0x54, 0x80, 0x72, 0x6a, 0x18, 0x61, 0x58, 0x08, 0x42,
	0x8c, 0xaa, 0x53, 0x77, 0x98, 0x0c, 0xbe, 0x7e, 0x6d, 0x56, 0x5b, 0x1e, 0x52, 0xff, 0xf8, 0xfd,
	0xc7, 0xe7, 0x5c, 0x05, 0xa1, 0xd6, 0x78, 0xb7, 0x15, 0xde, 0x7d, 0x53, 0xbe, 0x02, 0x44, 0x21,
	0x7f, 0x48, 0x38, 0x5a, 0x9f, 0x86, 0xb8, 0xc8, 0xb9, 0x5e, 0x9d, 0xd1, 0x95, 0xf8, 0x9b, 0x02,
	0x7f, 0x03, 0x55, 0xa7, 0xf1, 0x5b, 0xef, 0x23, 0xcf, 0x3e, 0xa0, 0x33, 0x28, 0x84, 0xd9, 0x42,
	0x1b, 0xd3, 0x78, 0xa9, 0x2c, 0xeb, 0xb5, 0xd9, 0x03, 0x92, 0xb3, 0x2a, 0x38, 0x57, 0x8d, 0x8c,
	0x33, 0x3d, 0x52, 0x1a, 0xc8, 0x83, 0x42, 0x98, 0xb7, 0x2c, 0xae, 0x54, 0x84, 0xb3, 0xb8, 0x26,
	0xa2, 0x2a, 0xcf, 0xd7, 0x98, 0x73, 0xbe, 0x2f, 0x0a, 0xfc, 0x3d, 0x19, 0x34, 0x74, 0x6b, 0x1a,
	0x7d, 0x46, 0xd2, 0xf5, 0xc6, 0x55, 0x46, 0xa3, 0x57, 0x29, 0x24, 0xdd, 0x36, 0xb6, 0x2f, 0x95,
	0xd4, 0x0a, 0x3f, 0x9e, 0x4d, 0x99, 0xc6, 0xc0, 0x98, 0xaf, 0x0a, 0xfc, 0x9b, 0x11, 0x42, 0xb4,
	0x3d, 0x4d, 0x3e, 0xfb, 0x2d, 0xe8, 0xcd, 0x2b, 0x4e, 0xa7, 0xd5, 0x36, 0x7e, 0x55, 0x6d, 0xaf,
	0x20, 0xfe, 0x51, 0xdc, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xf5, 0xbf, 0x02, 0x8c, 0x08,
	0x00, 0x00,
}
