// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// InventoryListNodesResponse inventory list nodes response
// swagger:model inventoryListNodesResponse
type InventoryListNodesResponse struct {

	// amazon rds remote
	AmazonRDSRemote []*InventoryAmazonRDSRemoteNode `json:"amazon_rds_remote"`

	// generic
	Generic []*InventoryGenericNode `json:"generic"`

	// remote
	Remote []*InventoryRemoteNode `json:"remote"`
}

// Validate validates this inventory list nodes response
func (m *InventoryListNodesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonRDSRemote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemote(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryListNodesResponse) validateAmazonRDSRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.AmazonRDSRemote) { // not required
		return nil
	}

	for i := 0; i < len(m.AmazonRDSRemote); i++ {
		if swag.IsZero(m.AmazonRDSRemote[i]) { // not required
			continue
		}

		if m.AmazonRDSRemote[i] != nil {
			if err := m.AmazonRDSRemote[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("amazon_rds_remote" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListNodesResponse) validateGeneric(formats strfmt.Registry) error {

	if swag.IsZero(m.Generic) { // not required
		return nil
	}

	for i := 0; i < len(m.Generic); i++ {
		if swag.IsZero(m.Generic[i]) { // not required
			continue
		}

		if m.Generic[i] != nil {
			if err := m.Generic[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("generic" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InventoryListNodesResponse) validateRemote(formats strfmt.Registry) error {

	if swag.IsZero(m.Remote) { // not required
		return nil
	}

	for i := 0; i < len(m.Remote); i++ {
		if swag.IsZero(m.Remote[i]) { // not required
			continue
		}

		if m.Remote[i] != nil {
			if err := m.Remote[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("remote" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryListNodesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryListNodesResponse) UnmarshalBinary(b []byte) error {
	var res InventoryListNodesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
