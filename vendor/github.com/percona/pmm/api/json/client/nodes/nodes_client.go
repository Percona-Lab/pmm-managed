// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddBareMetalNode adds bare metal node adds bare metal node
*/
func (a *Client) AddBareMetalNode(params *AddBareMetalNodeParams) (*AddBareMetalNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBareMetalNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddBareMetalNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddBareMetalNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddBareMetalNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddBareMetalNodeOK), nil

}

/*
AddContainerNode adds container node adds container node
*/
func (a *Client) AddContainerNode(params *AddContainerNodeParams) (*AddContainerNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddContainerNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddContainerNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddContainerNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddContainerNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddContainerNodeOK), nil

}

/*
AddRDSNode adds RDS node adds a w s RDS node
*/
func (a *Client) AddRDSNode(params *AddRDSNodeParams) (*AddRDSNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRDSNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddRDSNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddRDSNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddRDSNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRDSNodeOK), nil

}

/*
AddRemoteNode adds remote node adds remote node
*/
func (a *Client) AddRemoteNode(params *AddRemoteNodeParams) (*AddRemoteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRemoteNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddRemoteNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddRemoteNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddRemoteNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddRemoteNodeOK), nil

}

/*
AddVirtualMachineNode adds virtual machine node adds virtual machine node
*/
func (a *Client) AddVirtualMachineNode(params *AddVirtualMachineNodeParams) (*AddVirtualMachineNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVirtualMachineNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddVirtualMachineNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/AddVirtualMachineNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddVirtualMachineNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddVirtualMachineNodeOK), nil

}

/*
ChangeBareMetalNode changes bare metal node changes bare metal node
*/
func (a *Client) ChangeBareMetalNode(params *ChangeBareMetalNodeParams) (*ChangeBareMetalNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeBareMetalNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeBareMetalNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ChangeBareMetalNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeBareMetalNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeBareMetalNodeOK), nil

}

/*
ChangeContainerNode changes container node changes container node
*/
func (a *Client) ChangeContainerNode(params *ChangeContainerNodeParams) (*ChangeContainerNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeContainerNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeContainerNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ChangeContainerNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeContainerNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeContainerNodeOK), nil

}

/*
ChangeRDSNode changes RDS node changes a w s RDS node
*/
func (a *Client) ChangeRDSNode(params *ChangeRDSNodeParams) (*ChangeRDSNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeRDSNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeRDSNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ChangeRDSNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeRDSNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeRDSNodeOK), nil

}

/*
ChangeRemoteNode changes remote node changes remote node
*/
func (a *Client) ChangeRemoteNode(params *ChangeRemoteNodeParams) (*ChangeRemoteNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeRemoteNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeRemoteNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ChangeRemoteNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeRemoteNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeRemoteNodeOK), nil

}

/*
ChangeVirtualMachineNode changes virtual machine node changes virtual machine node
*/
func (a *Client) ChangeVirtualMachineNode(params *ChangeVirtualMachineNodeParams) (*ChangeVirtualMachineNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeVirtualMachineNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeVirtualMachineNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ChangeVirtualMachineNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeVirtualMachineNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeVirtualMachineNodeOK), nil

}

/*
GetNode gets node returns a single node by ID
*/
func (a *Client) GetNode(params *GetNodeParams) (*GetNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/GetNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeOK), nil

}

/*
ListNodes lists nodes returns a list of all nodes
*/
func (a *Client) ListNodes(params *ListNodesParams) (*ListNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListNodes",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/ListNodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNodesOK), nil

}

/*
RemoveNode removes node removes node without any agents and services
*/
func (a *Client) RemoveNode(params *RemoveNodeParams) (*RemoveNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveNode",
		Method:             "POST",
		PathPattern:        "/v0/inventory/Nodes/RemoveNode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveNodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveNodeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
