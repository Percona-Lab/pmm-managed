// Code generated by mockery v1.0.0. DO NOT EDIT.

package checks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockRegistryService is an autogenerated mock type for the registryService type
type mockRegistryService struct {
	mock.Mock
}

// StartMongoDBQueryBuildInfoAction provides a mock function with given fields: ctx, id, pmmAgentID, dsn
func (_m *mockRegistryService) StartMongoDBQueryBuildInfoAction(ctx context.Context, id string, pmmAgentID string, dsn string) error {
	ret := _m.Called(ctx, id, pmmAgentID, dsn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, pmmAgentID, dsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMongoDBQueryGetParameterAction provides a mock function with given fields: ctx, id, pmmAgentID, dsn
func (_m *mockRegistryService) StartMongoDBQueryGetParameterAction(ctx context.Context, id string, pmmAgentID string, dsn string) error {
	ret := _m.Called(ctx, id, pmmAgentID, dsn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, pmmAgentID, dsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMySQLQuerySelectAction provides a mock function with given fields: ctx, id, pmmAgentID, dsn, query
func (_m *mockRegistryService) StartMySQLQuerySelectAction(ctx context.Context, id string, pmmAgentID string, dsn string, query string) error {
	ret := _m.Called(ctx, id, pmmAgentID, dsn, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, id, pmmAgentID, dsn, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartMySQLQueryShowAction provides a mock function with given fields: ctx, id, pmmAgentID, dsn, query
func (_m *mockRegistryService) StartMySQLQueryShowAction(ctx context.Context, id string, pmmAgentID string, dsn string, query string) error {
	ret := _m.Called(ctx, id, pmmAgentID, dsn, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, id, pmmAgentID, dsn, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartPostgreSQLQuerySelectAction provides a mock function with given fields: ctx, id, pmmAgentID, dsn, query
func (_m *mockRegistryService) StartPostgreSQLQuerySelectAction(ctx context.Context, id string, pmmAgentID string, dsn string, query string) error {
	ret := _m.Called(ctx, id, pmmAgentID, dsn, query)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, id, pmmAgentID, dsn, query)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartPostgreSQLQueryShowAction provides a mock function with given fields: ctx, id, pmmAgentID, dsn
func (_m *mockRegistryService) StartPostgreSQLQueryShowAction(ctx context.Context, id string, pmmAgentID string, dsn string) error {
	ret := _m.Called(ctx, id, pmmAgentID, dsn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, id, pmmAgentID, dsn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
