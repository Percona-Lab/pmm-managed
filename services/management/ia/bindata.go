// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/iatemplates/mysql_down.yml (423B)
// data/iatemplates/mysql_restarted.yml (679B)
// data/iatemplates/mysql_too_many_connections.yml (787B)

package ia

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x3d\x4f\xc3\x40\x0c\xdd\xf3\x2b\xde\xc0\x90\x48\xa4\x82\x81\xe5\xa4\x0e\x20\xd8\x02\x08\x75\x60\xac\x9c\xc4\x48\x27\xe5\x3e\xb8\xbb\x06\x4e\x25\xff\x1d\xd5\x69\x43\xc5\xd4\xcd\xcf\xf6\x7b\x7e\xcf\x75\x5d\x17\x89\x8d\x1f\x28\x71\x54\x05\x50\xc3\x92\x61\x05\x93\xe3\xe7\xb0\xed\xdd\x97\x2d\x00\x60\xe4\x10\xb5\xb3\x0a\xb7\x02\xe3\xce\x18\x0a\x59\xe1\x39\x6f\xde\x1a\x3c\xbe\xbe\xbf\x48\x9f\xbf\x7d\x50\xf8\xa9\x05\xc8\x1a\xda\x8c\x32\x72\x18\x75\xc7\xdb\x83\xf4\x35\xac\xeb\x4f\xe5\x69\x90\xb2\xe7\x0a\xe5\x7c\x74\xe7\x2b\xac\xd7\xb8\x11\x11\x4f\x81\x8c\x38\x03\x3e\x5c\x50\xb8\x8b\xb3\x03\x1e\x39\xe8\x94\x15\xba\xa0\x93\xee\x68\x90\xf6\x40\x2d\x0f\xc7\xf5\x03\xc1\x29\xb4\x14\x04\x92\xb5\x2e\x51\xd2\xce\x2e\xf3\x9e\x63\x17\xb4\x4f\x92\x6c\x71\x8d\x63\x2a\x6d\x63\x22\xdb\x31\xf6\x7b\x5c\xcd\xc2\xab\xf3\x24\x98\x26\xe8\x28\xe1\x57\x0b\xb5\xb9\x7f\x78\x6a\x36\xea\x8c\x83\x69\xfa\x7b\xc7\xff\xaf\xa1\xbc\xe0\x4a\x55\xfc\x06\x00\x00\xff\xff\xb4\x7a\xbc\xaa\xa7\x01\x00\x00")

func dataIatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_downYml,
		"data/iatemplates/mysql_down.yml",
	)
}

func dataIatemplatesMysql_downYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_down.yml", size: 423, mode: os.FileMode(0664), modTime: time.Unix(1607345766, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x7d, 0x88, 0xdb, 0xb1, 0xd3, 0xe3, 0xcf, 0xcc, 0x5b, 0xe8, 0x3, 0x77, 0x7c, 0x97, 0x48, 0x5f, 0xe4, 0xb7, 0x8e, 0x4a, 0xd5, 0x50, 0x20, 0xd2, 0xf6, 0x8, 0x9e, 0x71, 0x16, 0x1c, 0x46}}
	return a, nil
}

var _dataIatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x9e\x16\x0e\x20\x6d\x56\x59\x81\x38\x58\x5c\x40\xe2\x56\x0e\xd0\x63\x55\x55\x93\x74\x9a\x5a\x38\x76\x98\x99\x74\x89\x96\xfe\x3b\xaa\x9b\x35\xbb\x9c\xc8\x29\xf3\xe6\xf9\xf9\xf9\xbd\xba\xae\x2b\xe3\x61\x0c\x64\xac\xae\x02\x6a\x44\x1a\xd8\x61\x98\xf5\x67\xd8\x09\xab\x91\x18\xef\x2b\x00\x38\xb1\xa8\x4f\xd1\xe1\x3e\x8f\x3a\x0d\x03\xc9\xec\xf0\x75\x5e\x7f\x5b\xe1\xfb\x0b\x2e\xff\x1a\xc5\xe1\x77\x9d\x07\x2c\x72\x7d\x48\x2d\x85\x9d\x1a\xd9\xa4\xbb\x69\x34\x3f\xf0\x42\xf8\x88\xcd\x06\x77\x76\x14\xd6\x63\x0a\x7b\x6c\xb7\x79\x31\x92\xd0\x90\x8d\x5d\xbe\x27\x73\x85\xb6\xe0\xcf\xbc\xac\xb9\x4b\x71\xaf\x38\x48\x1a\x60\x47\x46\x20\x35\x2c\xef\x28\xf4\x29\x7a\x73\xb8\x51\xee\x6e\x0a\x66\xf3\xc8\x0e\x87\x90\xc8\xf0\x0a\x47\xea\x7e\xc0\x12\x5a\x06\xb5\x81\x2f\xbf\x23\x89\x72\xd6\x7c\x4a\xec\x16\x49\x7c\xef\x23\x85\x7c\x1a\x0f\xa4\xf0\xf1\xef\x35\x42\xb1\x67\x87\x4d\x73\x8b\xf7\x4d\xb3\x2d\xf8\x89\xc2\xc4\x0e\xef\x3e\x34\x19\x3a\x24\x71\xb8\x6f\xf4\x9a\x2a\x9f\x58\xbc\xcd\x0e\x0f\x24\xd1\xc7\x3e\xa3\x81\x5a\x0e\x25\x87\x43\x4a\x0e\x2d\x49\x1e\x29\xc6\x64\x64\x3e\xc5\xb2\xdf\xb3\x76\xe2\x47\xcb\x65\x95\x0e\xb0\x14\xe5\xa3\x1a\xc5\x8e\xf1\xf8\x88\xd7\x57\xe1\x3b\x65\x39\xf9\x8e\x77\x97\x7c\x71\x3e\xe7\x97\x94\xf2\x33\x31\x7b\xbe\xac\x74\x49\x98\xfa\x74\x57\x94\x57\x9f\x3e\x7f\x59\xad\xdd\x33\x49\x9c\xcf\xd5\x3f\xdd\x5c\xaf\x7f\x29\xfd\xe6\x3f\xdc\xbc\xad\xfe\x04\x00\x00\xff\xff\xdb\x03\xba\xbd\xa7\x02\x00\x00")

func dataIatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_restartedYml,
		"data/iatemplates/mysql_restarted.yml",
	)
}

func dataIatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_restarted.yml", size: 679, mode: os.FileMode(0664), modTime: time.Unix(1607345803, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xd7, 0xa6, 0xb5, 0x96, 0x73, 0x14, 0x0, 0xe5, 0xb9, 0x46, 0x30, 0xb0, 0xa3, 0x5, 0x15, 0xc7, 0x27, 0x7a, 0xf6, 0x2, 0x9f, 0x3c, 0x4a, 0x49, 0xe4, 0x34, 0x8e, 0xa2, 0xce, 0x2f, 0x9d}}
	return a, nil
}

var _dataIatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x3c\x84\x37\x60\xbf\xd4\xa9\x73\x08\x94\x85\x16\x5c\xc8\xcd\x39\x94\xd0\x5e\x8c\x11\x63\x79\x24\x6f\xd9\xdd\x51\x67\x57\x6a\x44\x9a\xff\x5e\xb4\xb6\x55\x35\x2d\xd5\x49\xf3\xb1\xf3\x7c\xcc\x2c\x97\xcb\x59\x62\xdf\x38\x4a\x1c\xcd\x0c\x58\x22\x90\x67\x03\xdf\xc7\x6f\xae\x48\x22\x85\xa7\xd0\x17\xa5\x84\xc0\x65\xb2\x12\xe2\x0c\x00\x3a\xd6\x68\x25\x18\xdc\xe6\x30\xb6\xde\x93\xf6\x06\x0f\xfd\xe3\xa7\x0d\x26\xdd\xb0\x01\x6d\xe4\xdc\xc5\x4f\x8d\x1a\xfc\x58\xe6\x00\xf0\xf4\x54\x48\xc7\x5a\x24\xeb\x79\x7e\x02\xac\x9d\xec\xc9\x15\x31\x51\x6a\x63\x91\x8e\xca\x74\x88\x17\x74\x3e\x6c\xef\xfc\x6e\x81\xb7\xb0\x75\x10\xb5\xa1\xc6\xfc\xab\xec\x17\x97\x79\xd3\x09\x1d\xa9\xa5\xbd\xe3\x58\x0c\x30\xaf\xe9\x03\xff\xe3\x76\xb5\x3a\xff\x7f\xc0\x76\x8b\x9b\x01\x2c\x1e\xc5\x1d\xb0\xdb\xe5\x42\x43\x4a\x3e\x9b\x32\x7c\x17\x63\xc6\xb6\x73\x7e\x22\x7e\x8d\x86\xb5\xe4\x90\xa8\x66\x54\x2a\x7e\x30\xa2\xb2\x75\xab\x7c\x18\xd4\x5a\xdf\xfa\xf1\x55\x1b\x6c\x32\xb8\xba\xbe\x1a\x33\xa9\x6f\xd8\xa0\x72\x42\x69\xcc\x29\x85\x9a\x0d\xb6\xab\x37\x03\xdf\xdd\x98\xef\xc8\xb5\x6c\xf0\xee\x24\xa1\x12\x35\xb8\x3b\xcd\x8e\xdc\xb1\xda\xd4\x1b\x7c\x27\x0d\x36\xd4\x39\xeb\x68\xcf\x6e\xd4\x52\x89\x18\xec\x49\x73\x48\x21\x48\xa2\xec\xcd\xa5\x7e\xe0\x58\xaa\x6d\x52\xde\xf0\xb8\x2f\xe0\x41\x94\x91\x8e\x14\xfe\x30\xec\x1a\x52\xfd\x65\xf9\xa4\x7c\x3e\x00\x48\xc0\xf3\x33\xfe\x3b\x11\xb9\x89\xac\x9d\x2d\xb9\x18\x3c\xc5\xcb\xcb\x88\xf0\x65\xbd\xf9\x7c\x8f\xf7\xb9\x35\x6b\x9c\x16\x37\xeb\x8f\xf7\x9b\x47\x33\x99\xf3\xab\xfa\xea\x02\x93\x08\x86\xc3\xfd\x8d\xcd\xdc\x86\x98\x28\x94\xfc\x0f\x26\x8b\xd9\xcf\x00\x00\x00\xff\xff\x57\x7a\x0c\x77\x13\x03\x00\x00")

func dataIatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_too_many_connectionsYml,
		"data/iatemplates/mysql_too_many_connections.yml",
	)
}

func dataIatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_too_many_connections.yml", size: 787, mode: os.FileMode(0664), modTime: time.Unix(1607325493, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x47, 0x73, 0x99, 0xa5, 0xda, 0xfb, 0xd5, 0xa1, 0x98, 0x90, 0xf0, 0x65, 0xe7, 0xab, 0xc0, 0xfb, 0x74, 0xf3, 0xfa, 0x4c, 0x47, 0x6a, 0xab, 0x89, 0xe3, 0xed, 0x3b, 0xe0, 0x48, 0x6a, 0xeb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/iatemplates/mysql_down.yml":                 dataIatemplatesMysql_downYml,
	"data/iatemplates/mysql_restarted.yml":            dataIatemplatesMysql_restartedYml,
	"data/iatemplates/mysql_too_many_connections.yml": dataIatemplatesMysql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"iatemplates": {nil, map[string]*bintree{
			"mysql_down.yml":                 {dataIatemplatesMysql_downYml, map[string]*bintree{}},
			"mysql_restarted.yml":            {dataIatemplatesMysql_restartedYml, map[string]*bintree{}},
			"mysql_too_many_connections.yml": {dataIatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
