// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/iatemplates/mysql_down.yml (419B)
// data/iatemplates/mysql_restarted.yml (616B)
// data/iatemplates/mysql_too_many_connections.yml (787B)

package ia

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\xbd\x4e\xf3\x40\x10\xec\xfd\x14\x53\x7c\x85\x2d\x7d\x89\xa0\xa0\x39\x29\x05\x08\x3a\x03\x42\x29\x28\xa3\xb5\xbd\x48\x27\xdd\x1f\x77\x17\xc3\x29\xf8\xdd\x51\xd6\x89\x89\xa8\xe8\x76\x76\x77\x66\x67\x36\xb3\x0d\x86\x32\x27\x55\x01\x2b\x38\xb2\xac\x60\x4b\x7a\x37\xbb\xc1\x7f\xb8\x0a\x00\x46\x8e\x49\x7b\xa7\x70\x2d\x30\xed\xad\xa5\x58\x14\x1e\xcb\xf6\xa5\xc5\xfd\xf3\xeb\x93\xf4\xf9\x33\x44\x85\xaf\x95\x00\x59\x43\x57\x50\x27\x8e\xa3\xee\x79\x77\x94\xfe\x0f\xe7\x87\x73\x79\x1e\xe4\x12\xb8\x41\x3d\x1f\xdd\x87\x06\x9b\x0d\xae\x44\x24\x50\x24\x2b\xce\x80\x37\x1f\x15\x6e\xd2\xec\x80\x47\x8e\x3a\x17\x85\x3e\xea\xac\x7b\x32\xd2\x36\xd4\xb1\x39\xad\x1f\x09\x5e\xa1\xa3\x28\x90\x9c\xf3\x99\xb2\xf6\x6e\x99\x0f\x9c\xfa\xa8\x43\x96\x64\x8b\x6b\x9c\x52\x69\x97\x32\xb9\x9e\x71\x38\xe0\xdf\x2c\xbc\xbe\x4c\x82\x69\x82\x4e\x12\x7e\xbd\x50\xdb\xdb\xbb\x87\x76\xab\x2e\x38\x98\xa6\x9f\x77\xfc\xfe\x1a\xea\x3f\x5c\x69\xaa\xef\x00\x00\x00\xff\xff\x6a\x4e\x60\x5c\xa3\x01\x00\x00")

func dataIatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_downYml,
		"data/iatemplates/mysql_down.yml",
	)
}

func dataIatemplatesMysql_downYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_down.yml", size: 419, mode: os.FileMode(0664), modTime: time.Unix(1607325478, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x12, 0x38, 0xb6, 0x55, 0x92, 0x61, 0x3a, 0xbd, 0x78, 0xdc, 0x91, 0xc2, 0x8f, 0x90, 0x64, 0x11, 0xbb, 0xe9, 0x60, 0xbc, 0x94, 0x17, 0x95, 0x7, 0x29, 0x36, 0x1, 0xbe, 0xb6, 0xe2, 0x38}}
	return a, nil
}

var _dataIatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3f\x8f\xd3\x40\x10\xc5\x7b\x7f\x8a\xa7\x13\x05\x48\x38\xf2\x09\x44\xb1\xa2\x01\x89\x2e\x14\x90\x32\x8a\xa2\x89\x33\x76\x56\xda\x3f\x66\x67\xec\xc3\x3a\xfc\xdd\x51\x36\x66\xb9\x50\xe1\x6e\xde\x3c\x3d\xbf\xf9\x6d\x5d\xd7\x95\xb2\x1f\x1c\x29\x8b\xa9\x80\x1a\x81\x3c\x1b\xf8\x59\x7e\xb8\x63\x62\x51\x4a\xca\xe7\x0a\x00\x26\x4e\x62\x63\x30\x78\xcc\xa3\x8c\xde\x53\x9a\x0d\xbe\xce\xbb\x6f\x5b\x7c\xbf\xf3\xf2\xcf\x21\x19\xfc\xaa\xf3\x80\x35\xae\x77\xf1\x44\xee\x28\x4a\x3a\xca\x71\x1c\xd4\x7a\x5e\x0d\x1f\xb1\xdf\x63\xa3\x97\xc4\x72\x89\xee\x8c\xc3\x21\x2f\x06\x4a\xe4\x73\xb1\xeb\xf7\xa7\x5c\xb1\xad\xfa\x8b\x2e\x3b\x6e\x63\x38\x0b\xba\x14\x3d\xf4\xc2\x70\x24\x8a\xf5\x8e\x62\x1f\x83\x55\x83\x07\xe1\xf6\xa1\x68\x3a\x0f\x6c\xd0\xb9\x48\x7f\x7d\x89\x42\xcf\x06\xfb\xe6\x2d\xde\x37\xcd\xa1\xe8\x13\xb9\x91\x0d\xde\x7d\x68\xb2\xd4\xc5\x64\xf0\xd8\xc8\x0d\x0b\x4f\x9c\xac\xce\x06\x4f\x94\x82\x0d\x7d\x56\x1d\x9d\xd8\x95\x43\xba\x18\x0d\x4e\x94\xf2\x48\x21\x44\x25\xb5\x31\x94\xfd\x99\xa5\x4d\x76\xd0\x4c\xbb\x40\xc4\x4a\xda\x06\x51\x0a\x2d\xe3\xf9\x19\xaf\x6e\xc1\x1b\xe1\x34\xd9\x96\x8f\x57\x40\x58\x16\x3c\x91\xa0\xbc\x5e\x36\xe6\xce\xd7\x95\xac\x88\xa8\x8f\x9b\x92\xbc\xfd\xf4\xf9\xcb\x76\x67\x5e\x44\x62\x59\xaa\x7f\xe0\xde\x7e\x7f\x1f\xfd\xfa\x3f\xda\xbc\xa9\x7e\x07\x00\x00\xff\xff\x9b\x3f\xb5\x5b\x68\x02\x00\x00")

func dataIatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_restartedYml,
		"data/iatemplates/mysql_restarted.yml",
	)
}

func dataIatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_restarted.yml", size: 616, mode: os.FileMode(0664), modTime: time.Unix(1607325485, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb5, 0x7d, 0xda, 0x42, 0xb8, 0x14, 0x96, 0x82, 0x5e, 0xff, 0xb6, 0x9f, 0xc1, 0x85, 0xc9, 0x7e, 0x3c, 0xae, 0x29, 0xd7, 0xd2, 0x3, 0xbc, 0x39, 0xca, 0xcb, 0xdd, 0x5, 0xd8, 0xf0, 0xcb, 0x4}}
	return a, nil
}

var _dataIatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x3c\x84\x37\x60\xbf\xd4\xa9\x73\x08\x94\x85\x16\x5c\xc8\xcd\x39\x94\xd0\x5e\x8c\x11\x63\x79\x24\x6f\xd9\xdd\x51\x67\x57\x6a\x44\x9a\xff\x5e\xb4\xb6\x55\x35\x2d\xd5\x49\xf3\xb1\xf3\x7c\xcc\x2c\x97\xcb\x59\x62\xdf\x38\x4a\x1c\xcd\x0c\x58\x22\x90\x67\x03\xdf\xc7\x6f\xae\x48\x22\x85\xa7\xd0\x17\xa5\x84\xc0\x65\xb2\x12\xe2\x0c\x00\x3a\xd6\x68\x25\x18\xdc\xe6\x30\xb6\xde\x93\xf6\x06\x0f\xfd\xe3\xa7\x0d\x26\xdd\xb0\x01\x6d\xe4\xdc\xc5\x4f\x8d\x1a\xfc\x58\xe6\x00\xf0\xf4\x54\x48\xc7\x5a\x24\xeb\x79\x7e\x02\xac\x9d\xec\xc9\x15\x31\x51\x6a\x63\x91\x8e\xca\x74\x88\x17\x74\x3e\x6c\xef\xfc\x6e\x81\xb7\xb0\x75\x10\xb5\xa1\xc6\xfc\xab\xec\x17\x97\x79\xd3\x09\x1d\xa9\xa5\xbd\xe3\x58\x0c\x30\xaf\xe9\x03\xff\xe3\x76\xb5\x3a\xff\x7f\xc0\x76\x8b\x9b\x01\x2c\x1e\xc5\x1d\xb0\xdb\xe5\x42\x43\x4a\x3e\x9b\x32\x7c\x17\x63\xc6\xb6\x73\x7e\x22\x7e\x8d\x86\xb5\xe4\x90\xa8\x66\x54\x2a\x7e\x30\xa2\xb2\x75\xab\x7c\x18\xd4\x5a\xdf\xfa\xf1\x55\x1b\x6c\x32\xb8\xba\xbe\x1a\x33\xa9\x6f\xd8\xa0\x72\x42\x69\xcc\x29\x85\x9a\x0d\xb6\xab\x37\x03\xdf\xdd\x98\xef\xc8\xb5\x6c\xf0\xee\x24\xa1\x12\x35\xb8\x3b\xcd\x8e\xdc\xb1\xda\xd4\x1b\x7c\x27\x0d\x36\xd4\x39\xeb\x68\xcf\x6e\xd4\x52\x89\x18\xec\x49\x73\x48\x21\x48\xa2\xec\xcd\xa5\x7e\xe0\x58\xaa\x6d\x52\xde\xf0\xb8\x2f\xe0\x41\x94\x91\x8e\x14\xfe\x30\xec\x1a\x52\xfd\x65\xf9\xa4\x7c\x3e\x00\x48\xc0\xf3\x33\xfe\x3b\x11\xb9\x89\xac\x9d\x2d\xb9\x18\x3c\xc5\xcb\xcb\x88\xf0\x65\xbd\xf9\x7c\x8f\xf7\xb9\x35\x6b\x9c\x16\x37\xeb\x8f\xf7\x9b\x47\x33\x99\xf3\xab\xfa\xea\x02\x93\x08\x86\xc3\xfd\x8d\xcd\xdc\x86\x98\x28\x94\xfc\x0f\x26\x8b\xd9\xcf\x00\x00\x00\xff\xff\x57\x7a\x0c\x77\x13\x03\x00\x00")

func dataIatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIatemplatesMysql_too_many_connectionsYml,
		"data/iatemplates/mysql_too_many_connections.yml",
	)
}

func dataIatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := dataIatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/iatemplates/mysql_too_many_connections.yml", size: 787, mode: os.FileMode(0664), modTime: time.Unix(1607325493, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x47, 0x73, 0x99, 0xa5, 0xda, 0xfb, 0xd5, 0xa1, 0x98, 0x90, 0xf0, 0x65, 0xe7, 0xab, 0xc0, 0xfb, 0x74, 0xf3, 0xfa, 0x4c, 0x47, 0x6a, 0xab, 0x89, 0xe3, 0xed, 0x3b, 0xe0, 0x48, 0x6a, 0xeb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/iatemplates/mysql_down.yml":                 dataIatemplatesMysql_downYml,
	"data/iatemplates/mysql_restarted.yml":            dataIatemplatesMysql_restartedYml,
	"data/iatemplates/mysql_too_many_connections.yml": dataIatemplatesMysql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": {nil, map[string]*bintree{
		"iatemplates": {nil, map[string]*bintree{
			"mysql_down.yml":                 {dataIatemplatesMysql_downYml, map[string]*bintree{}},
			"mysql_restarted.yml":            {dataIatemplatesMysql_restartedYml, map[string]*bintree{}},
			"mysql_too_many_connections.yml": {dataIatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
