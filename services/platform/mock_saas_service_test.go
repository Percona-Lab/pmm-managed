// Code generated by mockery v1.0.0. DO NOT EDIT.

package platform

import (
	context "context"

	authv1 "github.com/percona-platform/saas/gen/auth"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// mockSaasService is an autogenerated mock type for the saasService type
type mockSaasService struct {
	mock.Mock
}

// RefreshSession provides a mock function with given fields: cc, ctx, req
func (_m *mockSaasService) RefreshSession(cc *grpc.ClientConn, ctx context.Context, req *authv1.RefreshSessionRequest) (*authv1.RefreshSessionResponse, error) {
	ret := _m.Called(cc, ctx, req)

	var r0 *authv1.RefreshSessionResponse
	if rf, ok := ret.Get(0).(func(*grpc.ClientConn, context.Context, *authv1.RefreshSessionRequest) *authv1.RefreshSessionResponse); ok {
		r0 = rf(cc, ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authv1.RefreshSessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*grpc.ClientConn, context.Context, *authv1.RefreshSessionRequest) error); ok {
		r1 = rf(cc, ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignIn provides a mock function with given fields: cc, ctx, req
func (_m *mockSaasService) SignIn(cc *grpc.ClientConn, ctx context.Context, req *authv1.SignInRequest) (*authv1.SignInResponse, error) {
	ret := _m.Called(cc, ctx, req)

	var r0 *authv1.SignInResponse
	if rf, ok := ret.Get(0).(func(*grpc.ClientConn, context.Context, *authv1.SignInRequest) *authv1.SignInResponse); ok {
		r0 = rf(cc, ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authv1.SignInResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*grpc.ClientConn, context.Context, *authv1.SignInRequest) error); ok {
		r1 = rf(cc, ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignOut provides a mock function with given fields: cc, ctx, req
func (_m *mockSaasService) SignOut(cc *grpc.ClientConn, ctx context.Context, req *authv1.SignOutRequest) (*authv1.SignOutResponse, error) {
	ret := _m.Called(cc, ctx, req)

	var r0 *authv1.SignOutResponse
	if rf, ok := ret.Get(0).(func(*grpc.ClientConn, context.Context, *authv1.SignOutRequest) *authv1.SignOutResponse); ok {
		r0 = rf(cc, ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authv1.SignOutResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*grpc.ClientConn, context.Context, *authv1.SignOutRequest) error); ok {
		r1 = rf(cc, ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignUp provides a mock function with given fields: cc, ctx, req
func (_m *mockSaasService) SignUp(cc *grpc.ClientConn, ctx context.Context, req *authv1.SignUpRequest) (*authv1.SignUpResponse, error) {
	ret := _m.Called(cc, ctx, req)

	var r0 *authv1.SignUpResponse
	if rf, ok := ret.Get(0).(func(*grpc.ClientConn, context.Context, *authv1.SignUpRequest) *authv1.SignUpResponse); ok {
		r0 = rf(cc, ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authv1.SignUpResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*grpc.ClientConn, context.Context, *authv1.SignUpRequest) error); ok {
		r1 = rf(cc, ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
