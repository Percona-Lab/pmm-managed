// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type nodeRowTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *nodeRowTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("nodes").
func (v *nodeRowTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *nodeRowTableType) Columns() []string {
	return []string{"id", "type", "name", "hostname", "region"}
}

// NewStruct makes a new struct for that view or table.
func (v *nodeRowTableType) NewStruct() reform.Struct {
	return new(NodeRow)
}

// NewRecord makes a new record for that table.
func (v *nodeRowTableType) NewRecord() reform.Record {
	return new(NodeRow)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *nodeRowTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// NodeRowTable represents nodes view or table in SQL database.
var NodeRowTable = &nodeRowTableType{
	s: parse.StructInfo{Type: "NodeRow", SQLSchema: "", SQLName: "nodes", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "NodeType", Column: "type"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "Hostname", Type: "*string", Column: "hostname"}, {Name: "Region", Type: "*string", Column: "region"}}, PKFieldIndex: 0},
	z: new(NodeRow).Values(),
}

// String returns a string representation of this struct or record.
func (s NodeRow) String() string {
	res := make([]string, 5)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "Name: " + reform.Inspect(s.Name, true)
	res[3] = "Hostname: " + reform.Inspect(s.Hostname, true)
	res[4] = "Region: " + reform.Inspect(s.Region, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *NodeRow) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.Name,
		s.Hostname,
		s.Region,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *NodeRow) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.Name,
		&s.Hostname,
		&s.Region,
	}
}

// View returns View object for that struct.
func (s *NodeRow) View() reform.View {
	return NodeRowTable
}

// Table returns Table object for that record.
func (s *NodeRow) Table() reform.Table {
	return NodeRowTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *NodeRow) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *NodeRow) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *NodeRow) HasPK() bool {
	return s.ID != NodeRowTable.z[NodeRowTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *NodeRow) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = NodeRowTable
	_ reform.Struct = (*NodeRow)(nil)
	_ reform.Table  = NodeRowTable
	_ reform.Record = (*NodeRow)(nil)
	_ fmt.Stringer  = (*NodeRow)(nil)
)

type nodeTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *nodeTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("nodes").
func (v *nodeTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *nodeTableType) Columns() []string {
	return []string{"id", "type", "name"}
}

// NewStruct makes a new struct for that view or table.
func (v *nodeTableType) NewStruct() reform.Struct {
	return new(Node)
}

// NewRecord makes a new record for that table.
func (v *nodeTableType) NewRecord() reform.Record {
	return new(Node)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *nodeTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// NodeTable represents nodes view or table in SQL database.
var NodeTable = &nodeTableType{
	s: parse.StructInfo{Type: "Node", SQLSchema: "", SQLName: "nodes", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "NodeType", Column: "type"}, {Name: "Name", Type: "string", Column: "name"}}, PKFieldIndex: 0},
	z: new(Node).Values(),
}

// String returns a string representation of this struct or record.
func (s Node) String() string {
	res := make([]string, 3)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "Name: " + reform.Inspect(s.Name, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Node) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.Name,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Node) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.Name,
	}
}

// View returns View object for that struct.
func (s *Node) View() reform.View {
	return NodeTable
}

// Table returns Table object for that record.
func (s *Node) Table() reform.Table {
	return NodeTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Node) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Node) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Node) HasPK() bool {
	return s.ID != NodeTable.z[NodeTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Node) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = NodeTable
	_ reform.Struct = (*Node)(nil)
	_ reform.Table  = NodeTable
	_ reform.Record = (*Node)(nil)
	_ fmt.Stringer  = (*Node)(nil)
)

type aWSRDSNodeTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *aWSRDSNodeTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("nodes").
func (v *aWSRDSNodeTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *aWSRDSNodeTableType) Columns() []string {
	return []string{"id", "type", "name", "region"}
}

// NewStruct makes a new struct for that view or table.
func (v *aWSRDSNodeTableType) NewStruct() reform.Struct {
	return new(AWSRDSNode)
}

// NewRecord makes a new record for that table.
func (v *aWSRDSNodeTableType) NewRecord() reform.Record {
	return new(AWSRDSNode)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *aWSRDSNodeTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// AWSRDSNodeTable represents nodes view or table in SQL database.
var AWSRDSNodeTable = &aWSRDSNodeTableType{
	s: parse.StructInfo{Type: "AWSRDSNode", SQLSchema: "", SQLName: "nodes", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "NodeType", Column: "type"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "Region", Type: "*string", Column: "region"}}, PKFieldIndex: 0},
	z: new(AWSRDSNode).Values(),
}

// String returns a string representation of this struct or record.
func (s AWSRDSNode) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "Name: " + reform.Inspect(s.Name, true)
	res[3] = "Region: " + reform.Inspect(s.Region, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *AWSRDSNode) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.Name,
		s.Region,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *AWSRDSNode) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.Name,
		&s.Region,
	}
}

// View returns View object for that struct.
func (s *AWSRDSNode) View() reform.View {
	return AWSRDSNodeTable
}

// Table returns Table object for that record.
func (s *AWSRDSNode) Table() reform.Table {
	return AWSRDSNodeTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *AWSRDSNode) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *AWSRDSNode) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *AWSRDSNode) HasPK() bool {
	return s.ID != AWSRDSNodeTable.z[AWSRDSNodeTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *AWSRDSNode) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = AWSRDSNodeTable
	_ reform.Struct = (*AWSRDSNode)(nil)
	_ reform.Table  = AWSRDSNodeTable
	_ reform.Record = (*AWSRDSNode)(nil)
	_ fmt.Stringer  = (*AWSRDSNode)(nil)
)

type remoteNodeTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *remoteNodeTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("nodes").
func (v *remoteNodeTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *remoteNodeTableType) Columns() []string {
	return []string{"id", "type", "name", "region"}
}

// NewStruct makes a new struct for that view or table.
func (v *remoteNodeTableType) NewStruct() reform.Struct {
	return new(RemoteNode)
}

// NewRecord makes a new record for that table.
func (v *remoteNodeTableType) NewRecord() reform.Record {
	return new(RemoteNode)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *remoteNodeTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// RemoteNodeTable represents nodes view or table in SQL database.
var RemoteNodeTable = &remoteNodeTableType{
	s: parse.StructInfo{Type: "RemoteNode", SQLSchema: "", SQLName: "nodes", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "NodeType", Column: "type"}, {Name: "Name", Type: "string", Column: "name"}, {Name: "Region", Type: "*string", Column: "region"}}, PKFieldIndex: 0},
	z: new(RemoteNode).Values(),
}

// String returns a string representation of this struct or record.
func (s RemoteNode) String() string {
	res := make([]string, 4)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "Name: " + reform.Inspect(s.Name, true)
	res[3] = "Region: " + reform.Inspect(s.Region, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *RemoteNode) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.Name,
		s.Region,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *RemoteNode) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.Name,
		&s.Region,
	}
}

// View returns View object for that struct.
func (s *RemoteNode) View() reform.View {
	return RemoteNodeTable
}

// Table returns Table object for that record.
func (s *RemoteNode) Table() reform.Table {
	return RemoteNodeTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *RemoteNode) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *RemoteNode) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *RemoteNode) HasPK() bool {
	return s.ID != RemoteNodeTable.z[RemoteNodeTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *RemoteNode) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = RemoteNodeTable
	_ reform.Struct = (*RemoteNode)(nil)
	_ reform.Table  = RemoteNodeTable
	_ reform.Record = (*RemoteNode)(nil)
	_ fmt.Stringer  = (*RemoteNode)(nil)
)

func init() {
	parse.AssertUpToDate(&NodeRowTable.s, new(NodeRow))
	parse.AssertUpToDate(&NodeTable.s, new(Node))
	parse.AssertUpToDate(&AWSRDSNodeTable.s, new(AWSRDSNode))
	parse.AssertUpToDate(&RemoteNodeTable.s, new(RemoteNode))
}
