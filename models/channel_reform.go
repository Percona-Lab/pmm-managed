// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type notificationChannelTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *notificationChannelTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("notification_channels").
func (v *notificationChannelTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *notificationChannelTableType) Columns() []string {
	return []string{"id", "type", "email_config", "pagerduty_config", "slack_config", "webhook_config", "disabled"}
}

// NewStruct makes a new struct for that view or table.
func (v *notificationChannelTableType) NewStruct() reform.Struct {
	return new(notificationChannel)
}

// NewRecord makes a new record for that table.
func (v *notificationChannelTableType) NewRecord() reform.Record {
	return new(notificationChannel)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *notificationChannelTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// notificationChannelTable represents notification_channels view or table in SQL database.
var notificationChannelTable = &notificationChannelTableType{
	s: parse.StructInfo{Type: "notificationChannel", SQLSchema: "", SQLName: "notification_channels", Fields: []parse.FieldInfo{{Name: "ID", Type: "string", Column: "id"}, {Name: "Type", Type: "ChannelType", Column: "type"}, {Name: "EmailConfig", Type: "*[]uint8", Column: "email_config"}, {Name: "PagerDutyConfig", Type: "*[]uint8", Column: "pagerduty_config"}, {Name: "SlackConfig", Type: "*[]uint8", Column: "slack_config"}, {Name: "WebHookConfig", Type: "*[]uint8", Column: "webhook_config"}, {Name: "Disabled", Type: "bool", Column: "disabled"}}, PKFieldIndex: 0},
	z: new(notificationChannel).Values(),
}

// String returns a string representation of this struct or record.
func (s notificationChannel) String() string {
	res := make([]string, 7)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Type: " + reform.Inspect(s.Type, true)
	res[2] = "EmailConfig: " + reform.Inspect(s.EmailConfig, true)
	res[3] = "PagerDutyConfig: " + reform.Inspect(s.PagerDutyConfig, true)
	res[4] = "SlackConfig: " + reform.Inspect(s.SlackConfig, true)
	res[5] = "WebHookConfig: " + reform.Inspect(s.WebHookConfig, true)
	res[6] = "Disabled: " + reform.Inspect(s.Disabled, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *notificationChannel) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Type,
		s.EmailConfig,
		s.PagerDutyConfig,
		s.SlackConfig,
		s.WebHookConfig,
		s.Disabled,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *notificationChannel) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Type,
		&s.EmailConfig,
		&s.PagerDutyConfig,
		&s.SlackConfig,
		&s.WebHookConfig,
		&s.Disabled,
	}
}

// View returns View object for that struct.
func (s *notificationChannel) View() reform.View {
	return notificationChannelTable
}

// Table returns Table object for that record.
func (s *notificationChannel) Table() reform.Table {
	return notificationChannelTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *notificationChannel) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *notificationChannel) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *notificationChannel) HasPK() bool {
	return s.ID != notificationChannelTable.z[notificationChannelTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *notificationChannel) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = string(i64)
	} else {
		s.ID = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = notificationChannelTable
	_ reform.Struct = (*notificationChannel)(nil)
	_ reform.Table  = notificationChannelTable
	_ reform.Record = (*notificationChannel)(nil)
	_ fmt.Stringer  = (*notificationChannel)(nil)
)

func init() {
	parse.AssertUpToDate(&notificationChannelTable.s, new(notificationChannel))
}
