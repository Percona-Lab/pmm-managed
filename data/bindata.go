// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iatemplates/mongodb_connections_memory_usage.yml (943B)
// iatemplates/mongodb_high_memory_usage.yml (892B)
// iatemplates/mongodb_restarted.yml (719B)
// iatemplates/mysql_down.yml (537B)
// iatemplates/mysql_restarted.yml (793B)
// iatemplates/mysql_too_many_connections.yml (901B)
// iatemplates/node_high_cpu_load.yml (803B)
// iatemplates/node_low_free_memory.yml (801B)
// iatemplates/node_swap_filled_up.yml (815B)
// iatemplates/postgresql_down.yml (554B)
// iatemplates/postgresql_restarted.yml (728B)
// iatemplates/postgresql_too_many_connections.yml (886B)

package data

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iatemplatesMongodb_connections_memory_usageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x6b\xdb\x30\x14\x7d\xcf\xaf\x38\x84\x15\x92\x31\xe7\xa3\x5b\x18\x08\x3a\x48\x59\xdf\x62\x18\xac\xdb\x4b\x08\x46\xb6\xaf\x6d\x6d\x96\x64\x24\x39\xad\xc9\xf2\xdf\x87\x14\xdb\x4d\x37\x06\xcb\x4b\xa4\xa3\xab\xa3\x73\xcf\x3d\x8e\xa2\x68\xe2\x48\x36\x35\x77\x64\xd9\x04\x88\xa0\xb8\x24\x06\xa9\x55\xa9\xf3\x34\xc9\xb4\x52\x94\x39\xa1\x95\x4d\x24\x49\x6d\xba\xa4\xb5\xbc\xa4\x09\x00\x1c\xc9\x58\xa1\x15\xc3\x3a\x6c\x6d\x2b\x25\x37\x1d\x43\x1c\x0a\xd1\x5a\xca\x91\x76\x88\x3d\xd7\xe7\x7b\x5c\x71\x85\x7a\x7a\x6e\x0c\xc3\xaf\x28\x6c\xc2\x75\x5f\x3d\x53\x3a\xa7\xc4\xab\x98\x63\x36\xc8\xb0\xf6\x5a\xc9\xc9\xaf\x13\xd7\x35\x74\x37\xcd\x5a\x63\x48\xb9\xe9\x79\x8e\xb7\x58\xaf\x6e\x3f\xf4\x7f\x3d\xe9\x12\x5a\xbd\xa6\x0c\xeb\xbe\x95\x98\xe4\xa3\x76\xbc\x4e\xd2\xce\x91\x9d\xf7\x77\x3c\xc1\xaa\x5f\x7f\xc2\x7e\x8f\x85\xab\x0c\xd9\x4a\xd7\x39\x0e\x87\x70\xd0\x70\xc3\x65\x30\xcc\xff\x06\xd3\xc6\xb2\x1e\xbf\xb2\x64\x8b\x86\x4c\x46\xca\xf1\x92\x50\x18\x2d\xbd\x1b\x85\x28\x5b\x43\x39\x24\x7f\x16\xb2\x95\xe3\xad\x56\x09\xc7\x30\xbd\x99\x8e\x88\xef\x95\xa1\xa8\x35\x77\x23\x66\xb8\x2a\x89\x61\xbf\x7a\xe7\xf5\x1e\x46\xfc\xc8\xeb\x96\x18\x6e\x37\x01\x29\xb4\x61\xd8\x5c\xb8\x2d\x1d\xc9\x08\xd7\x31\x3c\x71\xa3\x84\x2a\x03\x5a\xf3\x94\xea\xb1\x17\x27\xb2\x9f\xe4\x18\xbe\xc4\x71\xf4\x71\xfd\x7e\x33\xc0\x95\x50\xa5\x4d\x9c\x4e\x72\xcd\x30\xed\xc8\x5e\xc4\x71\xa5\xb4\xe3\x61\x2a\x03\x43\x4e\x36\x33\xa2\x71\x21\x19\xe3\x74\x81\xc7\x4a\x58\x0c\x61\x83\xb0\x50\xda\xa1\x10\x4a\xd8\x8a\x72\x86\xca\xb9\xc6\xb2\xe5\xf2\x87\x30\x7c\xe1\xcd\xd2\x8a\x2f\x32\x2d\x97\xa9\xd1\x4f\x96\x96\x7f\x08\x02\x62\x6d\x08\xae\xe2\xea\xaf\x11\xdd\x40\x17\xff\x11\x42\x1f\x8d\xd3\x09\x6f\x2e\x06\x2c\xc6\x90\xe0\x7c\x1e\x1f\xf9\xbe\xdd\x7d\x7b\xc0\x5d\xa8\x0b\xc6\x5e\x1f\xee\xb6\xf7\x0f\xbb\xaf\xec\x8a\xe4\xe5\xf4\xe5\x63\xe8\x1f\xae\x44\x59\x41\x0e\xa2\x7c\x0c\xd2\xee\x95\x9a\x99\x50\xd6\x71\x95\xd1\xbf\x44\xcd\x27\xbf\x03\x00\x00\xff\xff\x5f\x5b\x5d\x79\xaf\x03\x00\x00")

func iatemplatesMongodb_connections_memory_usageYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_connections_memory_usageYml,
		"iatemplates/mongodb_connections_memory_usage.yml",
	)
}

func iatemplatesMongodb_connections_memory_usageYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_connections_memory_usageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_connections_memory_usage.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x3c, 0x8a, 0x32, 0x48, 0x23, 0xfc, 0x2d, 0xab, 0x8b, 0xa7, 0x7e, 0x69, 0x69, 0x3e, 0x32, 0x83, 0xf7, 0x68, 0x21, 0x27, 0x4a, 0xac, 0xee, 0x9e, 0xc4, 0x72, 0xc4, 0x43, 0xff, 0x5b, 0x5c}}
	return a, nil
}

var _iatemplatesMongodb_high_memory_usageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x42\x0f\x92\x52\xe7\xa3\xed\xd1\x22\x68\x21\x47\xef\x2d\x86\x42\xaf\x7d\x09\xc1\xc8\xf6\xda\x56\x6b\x49\x46\x5a\xe7\xce\x5c\xef\xbf\x17\x2b\xb6\x2f\xd7\xd2\xbc\x44\x9a\xdd\x9d\x9d\x5d\x8d\xa3\x28\x9a\x31\xe9\xa6\x96\x4c\x5e\xcc\x80\x08\x46\x6a\x12\xd0\xd6\x94\x36\x4f\x93\x4a\x95\x55\xa2\x49\x5b\xd7\x25\xad\x97\x25\xcd\x00\xe0\x44\xce\x2b\x6b\x04\xb6\xe1\xea\x5b\xad\xa5\xeb\x04\xe2\x90\x88\xd6\x53\x8e\xb8\x67\xf8\x72\x03\x65\x3c\x4b\x93\x91\x0f\xa9\xf4\xd0\x38\x81\xdf\x51\xb8\x84\x4a\xa4\x1d\x16\xc6\xe6\x94\xf4\x9d\x97\x58\x8c\xad\xbd\xef\x1b\x27\x8e\xbc\xca\xc9\x30\x5e\x63\xbb\x79\xfb\x7e\xf8\x5b\x0e\x04\x6b\x58\xf3\xb2\x3c\x9c\x07\xc5\x31\xe9\x3b\xcb\xb2\x4e\xd2\x8e\xc9\x8f\x35\x3d\xc3\x66\x38\x7f\xc6\xe1\x80\x15\x57\x8e\x7c\x65\xeb\x1c\xc7\x63\x08\x34\xd2\x49\x1d\x16\xd2\xff\xc6\xa5\x4c\x69\x03\x7e\x31\xf9\x0e\x0d\xb9\x8c\x0c\xcb\x92\x50\x38\xab\x91\x59\x53\xa8\xb2\x75\x94\x43\xcb\x07\xa5\x5b\x3d\x55\xb5\x46\xb1\xc0\xfc\x6a\x3e\x21\xdc\x35\x24\x50\xd4\x56\xf2\x84\x39\x69\x4a\x12\x38\x6c\xde\xf4\x7a\x8f\x13\x7e\x92\x75\x4b\x02\x1f\xcf\x23\x14\xd6\x09\x5c\x9f\xb9\x3d\x9d\xc8\x29\xee\x04\xee\xa5\x33\xca\x94\x01\xad\x65\x4a\xf5\x34\x0b\xab\xec\x17\xb1\xc0\xd7\x38\x8e\x3e\x6c\xdf\x5d\x8f\x70\xa5\x4c\xe9\x13\xb6\x49\x6e\x05\xe6\x1d\xf9\xb3\x38\x69\x8c\x65\xc9\xca\x9a\x89\x21\x27\x9f\x39\xd5\x70\x30\xc0\xf4\x92\xc0\x5d\xa5\x3c\x46\x33\x41\x79\x18\xcb\x28\x94\x51\xbe\xa2\x5c\xa0\x62\x6e\xbc\x58\xaf\x7f\x2a\x27\x57\xfd\xb2\xac\x91\xab\xcc\xea\x75\xea\xec\xbd\xa7\xf5\x5f\x82\x80\xd8\x3a\x02\x57\xd2\xfc\xf3\x44\x57\xb0\xc5\x0b\xaf\xa5\xdd\x64\x37\x4f\xee\xa4\x32\xea\x6d\xf1\xf8\x88\x57\xe7\xe1\x57\x93\x41\xf0\xf4\x34\x35\xf8\xb1\xdb\x7f\xbf\xc5\xa7\x90\x17\x96\x7a\x19\xdc\xef\x6e\x6e\xf7\xdf\xc4\x05\xc9\x73\xf4\xd9\xef\x43\xd3\xfe\x2b\x81\x1e\x05\xf5\x16\x58\x8c\xb6\xff\x9f\x8a\xe5\xec\x4f\x00\x00\x00\xff\xff\x02\x52\xac\x9e\x7c\x03\x00\x00")

func iatemplatesMongodb_high_memory_usageYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_high_memory_usageYml,
		"iatemplates/mongodb_high_memory_usage.yml",
	)
}

func iatemplatesMongodb_high_memory_usageYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_high_memory_usageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_high_memory_usage.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x9, 0x45, 0xed, 0xe3, 0x27, 0xa2, 0x5, 0xa0, 0x83, 0x1a, 0x46, 0x26, 0xa4, 0x0, 0x5e, 0x33, 0xc2, 0x75, 0x78, 0x60, 0x8c, 0xad, 0xd5, 0x19, 0x12, 0xe4, 0x4, 0x97, 0x91, 0x59, 0x8c}}
	return a, nil
}

var _iatemplatesMongodb_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6f\xd3\x40\x14\x84\xef\xfe\x15\xa3\x88\x03\x1c\xec\x34\xaa\x00\x69\xc5\x85\x0a\x6e\x8d\x40\x94\x5b\x55\x59\x2f\xf6\x4b\xbc\x60\xef\xb3\xf6\xbd\x24\x44\x25\xff\x1d\x65\x9d\x2c\x6d\x4f\xf5\x6d\x67\x47\xa3\x6f\x67\x5c\x96\x65\x61\x3c\x8c\x3d\x19\xab\x2b\x80\x12\x81\x06\x76\x18\x24\x6c\xa4\x5d\xd5\x91\xd5\x28\x1a\xb7\x05\x00\xec\x38\xaa\x97\xe0\xb0\x48\x47\xdd\x0e\x03\xc5\x83\xc3\xf2\xe4\xfe\x72\x83\x1f\xcf\xdc\xfc\x67\x8c\x0e\x7f\xcb\x74\x40\x8e\xf4\x41\x8d\x42\xc3\xf5\x76\x34\x3f\x70\xad\xdc\x48\x68\xf5\xec\xfa\x84\xfb\x7b\x54\xd6\x45\xd6\x4e\xfa\x16\x0f\x0f\xe9\x62\xa4\x48\x43\x22\x3c\x7d\x17\xca\x6c\x3b\xeb\x4f\x90\xee\xa6\x54\xac\xa3\x0c\xb0\x8e\xd1\x93\x1a\xce\xcf\xc9\xf6\x6d\xf0\xe6\x30\x53\x6e\x66\x59\xb3\xc3\xc8\x0e\xeb\x5e\xe8\xbf\x6f\x47\xfd\x96\x1d\xae\x3f\x5c\x25\x69\x2d\xd1\x61\x71\x35\x31\x2b\xef\x38\x7a\x3b\x38\xec\x29\x06\x1f\x36\x49\xed\x69\xc5\x7d\x06\x36\xdf\xfc\x66\x73\xf8\xbe\x5c\x96\x1f\x17\xd7\xef\x2f\x72\xe7\xc3\x46\x6b\x93\xba\x15\x87\xd9\x81\x75\xc2\xa0\x10\xc4\xc8\xbc\x84\x9c\xd0\xb2\x36\xd1\x8f\x96\xea\xcf\x9d\x02\x3f\x3b\xaf\xb8\x4c\x08\xaf\x08\x62\x58\xfb\xe0\xb5\xe3\xd6\xa1\x33\x1b\xd5\xcd\xe7\xbf\x7c\xa4\x6a\xe4\xd8\x48\xa0\xaa\x91\x61\xbe\x8a\xb2\x57\x9e\xbf\x00\x42\x9e\xf2\xb2\x12\x1e\x1f\xf1\x66\x7a\x4c\xa5\x1c\x77\xbe\xe1\xfa\x54\x3e\x8e\x47\xec\x49\x91\x7f\x90\x64\x4c\x3d\x9d\xae\xce\xa3\x82\x36\x52\xe5\xec\xdb\xcf\x37\x5f\x6f\xef\xdc\x93\x48\x1c\x8f\xc5\x8b\xe1\x96\xdf\x26\x80\xe7\xe1\x6f\x5f\xc1\xf3\xae\xf8\x17\x00\x00\xff\xff\x19\x96\x4d\x3b\xcf\x02\x00\x00")

func iatemplatesMongodb_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_restartedYml,
		"iatemplates/mongodb_restarted.yml",
	)
}

func iatemplatesMongodb_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0xbc, 0xd1, 0x19, 0x81, 0xfe, 0xcb, 0x3c, 0xc6, 0x74, 0x36, 0x97, 0x90, 0x25, 0xd7, 0x4e, 0xd0, 0x44, 0x76, 0xb4, 0x8a, 0x20, 0x10, 0xb9, 0xfe, 0x91, 0xbd, 0x4f, 0x90, 0x2e, 0x97, 0x5b}}
	return a, nil
}

var _iatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4b\x6f\xe2\x30\x10\xbe\xe7\x57\x7c\x42\x7b\x00\x69\x93\x2c\x5a\xa1\x4a\x96\x38\xb4\x6a\x6f\xd0\x87\xa8\xd4\x63\x64\x9c\xa1\x71\x9b\xd8\xae\x3d\x40\x23\x9a\xff\x5e\x61\x08\x45\x9c\x7a\xb3\xe7\xf1\xbd\x26\x4d\xd3\x84\xa9\x71\xb5\x64\x0a\x22\x01\x52\x18\xd9\x90\x40\xd3\x86\x8f\xba\x28\xed\xd6\x24\x00\xb0\x21\x1f\xb4\x35\x02\xe3\xf8\x0d\xeb\xa6\x91\xbe\x15\x98\xb7\x8b\xa7\x19\x6e\x1f\x5e\xee\x63\x9d\x3e\x9d\x17\xf8\x4a\xe3\x27\x8e\x61\xd9\x62\x18\xc8\x6f\xb4\xa2\x62\x0f\xfd\x17\xc6\x96\xfd\xb3\x6f\x70\xeb\x68\x84\xe1\x81\x74\xed\x46\x98\x4e\xf1\x2f\x82\x38\xe9\x65\x13\x95\x01\x2b\xeb\x05\x26\xe1\xa0\x80\x36\xe4\x35\xb7\x02\xca\x6b\xd6\x4a\xd6\xb1\x5c\xcb\x25\xd5\xc7\x71\x80\xb5\x7a\x27\x16\x78\x9c\xcf\xd3\xab\xf1\xff\x49\x5f\xae\xb4\x79\x0d\x05\xdb\xa2\xb4\x02\x83\x96\xc2\x20\x76\xa4\x31\x96\x25\x6b\x6b\x4e\x08\x25\x05\xe5\xb5\xe3\xe8\xfd\xe4\x0b\x78\xae\x74\x40\x1f\x1c\x74\x80\xb1\x8c\x95\x36\x3a\x54\x54\x0a\x54\xcc\x2e\x88\x3c\x7f\xd3\x5e\x66\x8e\xbc\xb2\x46\x66\xca\x36\xf9\xd2\xdb\x6d\xa0\xfc\x42\x10\x8e\x39\x6a\x13\x58\x1a\x45\xd8\xed\xf0\xe7\x60\x25\x3b\xcf\x0e\x5d\xb7\xe7\xda\xc7\x9d\x9d\x56\x67\xd7\x37\x77\xb3\x85\x38\xdb\x41\xd7\xfd\x1c\xe0\xf2\x4e\x18\xfe\x82\x65\x94\x7c\x07\x00\x00\xff\xff\x87\xbd\xb0\x85\x19\x02\x00\x00")

func iatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_downYml,
		"iatemplates/mysql_down.yml",
	)
}

func iatemplatesMysql_downYml() (*asset, error) {
	bytes, err := iatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0x18, 0x5e, 0xa4, 0xd1, 0x4a, 0x5a, 0xa9, 0x53, 0x4d, 0xf8, 0x30, 0x44, 0x82, 0x1b, 0x34, 0xed, 0x47, 0x2b, 0xd6, 0x9c, 0xfd, 0xe4, 0x6b, 0x14, 0x4d, 0x11, 0x38, 0x25, 0x8, 0x91, 0xa0}}
	return a, nil
}

var _iatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x8e\xd3\x4c\x10\xbc\xe7\x29\x4a\xf9\xbe\x03\x48\xeb\xfc\x68\xf9\x91\x46\x5c\x40\xe2\x96\x48\x40\xb8\x45\x91\xd5\xb1\x3b\xf6\xb0\xe3\x19\x33\xdd\x4e\xb0\x96\xbc\x3b\xca\xc4\x31\xbb\x7b\xc2\x27\x4f\x4d\x4d\x75\x75\x75\x67\x59\x36\x51\x6e\x5a\x47\xca\x62\x26\x40\x06\x4f\x0d\x1b\x34\xbd\xfc\x74\x79\x64\x51\x8a\xca\xe5\x04\x00\x8e\x1c\xc5\x06\x6f\xb0\x4c\x47\xe9\x9a\x86\x62\x6f\xb0\xee\x37\x5f\x57\xf8\xf6\x8c\xcb\xbf\xda\x68\xf0\x3b\x4b\x07\x0c\x72\x95\x0b\x7b\x72\xb9\x28\x69\x27\x79\xd7\xaa\x6d\x78\x20\x7c\xc0\x76\x8b\x99\xd6\x91\xa5\x0e\xae\xc4\x6e\x97\x2e\x5a\x8a\xd4\x24\x63\x97\xef\x66\x6e\xa4\x0d\xf8\x13\x2f\x1b\x2e\x82\x2f\x05\x87\x18\x1a\x68\xcd\x70\x24\x8a\xa1\x8f\x91\xde\x79\xab\x06\x53\xe1\x62\x3a\x62\xda\xb7\x6c\x70\x70\x81\x14\xff\xa1\xa6\xe2\x01\x1a\xb0\x67\xd0\xde\xf1\xe5\xb7\xa5\x28\x9c\x34\x6f\x89\xdd\x21\x44\x5b\x59\x4f\x2e\xbd\xc6\x89\x04\xd6\xff\x2d\x13\xc9\x57\x6c\xb0\x5d\xdc\xe1\xcd\x62\xb1\x1b\xf1\x23\xb9\x8e\x0d\xee\xdf\x2d\x12\x74\x08\xd1\x60\xb9\x90\x6b\xaa\x7c\xe4\x68\xb5\x37\x38\x51\xf4\xd6\x57\x09\x75\xb4\x67\x37\xe6\xa0\xb6\x78\x60\x35\xf8\xb2\x5e\x67\xef\x97\xf7\x6f\x6f\x70\x6d\x7d\x25\xb9\x86\xbc\x0c\x06\xd3\x9e\xe5\xda\x1d\x79\x1f\x94\xd4\x06\x3f\x2a\x94\x2c\x45\xb4\xad\xa6\x71\x8e\x53\x02\xbe\xd7\x56\xc6\xf6\x60\x05\x3e\x28\x0e\xd6\x5b\xa9\xb9\x34\xa8\x55\x5b\x31\xf3\xf9\x0f\x1b\x69\xd6\x72\x2c\x82\xa7\x59\x11\x9a\xf9\x3e\x86\x93\xf0\xfc\x85\x21\x0c\xab\x61\xbd\x28\xf9\x82\xf1\xf8\x88\xff\xaf\xad\xcc\x84\xe3\xd1\x16\x9c\x5f\x26\x8a\xf3\x39\x65\x37\xae\x5b\x22\xa6\x94\x2e\x57\x32\xcc\x94\xaa\x30\x1b\x95\x57\x1f\x3f\x7d\x5e\x6d\xcc\x13\x49\x9c\xcf\x93\x17\xdb\x70\x2d\xff\x5c\xfa\xd5\x3f\xb8\x79\x3d\xf9\x13\x00\x00\xff\xff\xaa\x2e\xba\xeb\x19\x03\x00\x00")

func iatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_restartedYml,
		"iatemplates/mysql_restarted.yml",
	)
}

func iatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x9b, 0x94, 0xe2, 0x44, 0x56, 0xa1, 0xe, 0x81, 0x24, 0x19, 0x26, 0x0, 0xb0, 0x1c, 0xeb, 0xe3, 0xb7, 0xbf, 0x66, 0xff, 0xbc, 0x5a, 0xa0, 0x99, 0xff, 0xe1, 0x79, 0x59, 0x6c, 0x19, 0xa2}}
	return a, nil
}

var _iatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x51\x6b\xdb\x4c\x10\x7c\xf7\xaf\x18\xc2\x17\x48\x3e\x6a\x3b\xa1\x84\x96\x83\x16\x52\xc8\x9b\x0d\x2d\x69\xfb\x62\x8c\x58\x4b\x6b\xe9\x52\xdd\xae\x7a\xb7\x72\x22\xd2\xfc\xf7\x22\x39\x56\xdd\xb4\x54\x4f\xba\xb9\xd5\xee\xcc\xec\x68\x3a\x9d\x4e\x8c\x43\x53\x93\x71\x72\x13\x60\x0a\xa1\xc0\x0e\xa1\x4b\xdf\xeb\xcc\x54\xb3\x40\xd2\x65\xb9\x8a\x70\x6e\x5e\x25\x4d\x00\x60\xc7\x31\x79\x15\x87\xcb\xe1\x98\xda\x10\x28\x76\x0e\xcb\xee\xf6\xd3\x02\x47\xd5\xf0\x82\x36\xf1\x50\xc5\x0f\x4d\x74\xf8\x31\x1d\x0e\x40\xa0\x87\x4c\x77\x1c\x33\xf3\x81\xcf\xf6\x03\xcb\x5a\x37\x54\x67\xc9\xc8\xda\x94\x59\x15\x99\x8a\x74\x98\xce\xc5\xea\x2a\xac\xcf\x31\x87\x2f\x45\xa3\x97\x12\x67\x77\xba\x39\x3f\xf4\x3b\xee\xb0\xa3\xe8\x69\x53\x73\xca\xfa\x31\x2f\xe9\x03\xff\xe3\xf2\xe2\xe2\xf9\xfd\x3d\x56\x2b\xcc\xfa\x61\xa9\xd2\xba\xc0\x7a\x3d\x5c\x34\x14\x29\x0c\xa6\xf4\xcf\xc1\x98\xb1\xec\x19\x3f\x12\x7f\x8d\x86\x63\xce\x62\x54\x32\xb6\x51\x43\x6f\xc4\xd6\x97\x6d\xe4\xa2\x57\xeb\x43\x1b\xc6\xaf\x5a\xf1\xe6\x70\x72\x7a\x32\x22\xd6\x35\xec\xb0\xad\x95\x6c\xc4\x22\x49\xc9\x0e\xab\x8b\x57\x3d\xdf\xf5\x88\xef\xa8\x6e\xd9\xe1\xed\x5e\xc2\x56\xa3\xc3\xd5\xbe\x77\xe2\x1d\x47\x6f\x9d\xc3\x3d\x45\xf1\x52\x0e\x68\x4d\x1b\xae\x47\x2d\xe6\xf3\x6f\x6c\x0e\x1f\x97\xcb\xe9\x9b\xcb\xd7\x57\x07\xb8\xf2\x52\xa6\xcc\x34\x2b\xd4\xe1\xa4\xe3\xb4\x27\x47\x22\x6a\x34\xb8\x77\xe8\x50\x70\xca\xa3\x6f\x6c\xc8\xc0\xb8\x51\xe0\x73\xe5\x13\x0e\x81\x82\x4f\x10\x35\x6c\xbd\xf8\x54\x71\xe1\x50\x99\x35\xc9\xcd\xe7\x77\x3e\xd2\xac\x37\x4b\x85\x66\xb9\x86\xf9\x26\xea\x7d\xe2\xf9\x0b\x42\xc0\x52\x23\xc3\x2a\x92\x3f\x56\x74\x0a\xdd\xfe\x25\x6e\x14\xf9\x39\x72\x50\xc1\xe3\x23\xfe\xdb\x4b\x9f\x25\x8e\x3b\x9f\x73\xd6\x6f\x11\x4f\x4f\xe3\x84\xaf\xd7\x8b\x2f\x37\x78\x37\x94\x0e\xae\x1e\x5f\x2e\xae\x3f\xdc\x2c\x6e\xdd\x51\x9f\x5f\xb7\x2f\x32\x6f\xaa\xe8\x7f\x95\xdf\xd8\x9c\x79\x49\x46\x92\xf3\x3f\x98\x9c\x4f\x7e\x06\x00\x00\xff\xff\xd3\xbe\x1a\x81\x85\x03\x00\x00")

func iatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_too_many_connectionsYml,
		"iatemplates/mysql_too_many_connections.yml",
	)
}

func iatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x49, 0xff, 0x10, 0x59, 0x73, 0xa9, 0x50, 0x92, 0xfd, 0x96, 0x3d, 0x70, 0x69, 0x63, 0xde, 0xce, 0xc9, 0x42, 0x5f, 0x3d, 0x19, 0xdd, 0xa, 0x43, 0x53, 0x2, 0x28, 0x53, 0xe4, 0x12, 0x6a}}
	return a, nil
}

var _iatemplatesNode_high_cpu_loadYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xdf\x8b\xd3\x40\x10\x7e\xef\x5f\xf1\x51\x3c\x68\xc5\xf4\x07\x52\x94\x85\x13\xaa\xdc\x5b\x4f\x0e\xf4\x7c\x29\xa5\x4c\xb3\xd3\x64\x35\xbb\x1b\x76\x27\xbd\x2b\xb5\xff\xbb\x24\x69\xd7\x43\xd1\x3e\x75\xbf\x99\x7c\x3f\x66\x26\xcb\xb2\x81\xb0\xad\x2b\x12\x8e\x6a\x00\x64\x70\x64\x59\xc1\x79\xcd\xdb\xd2\x14\xe5\x36\xaf\x9b\x6d\xe5\x49\x0f\x00\xe0\xc0\x21\x1a\xef\x14\xe6\xdd\x33\x36\xd6\x52\x38\x2a\x7c\xf6\x9a\xd1\xb6\xe3\xd3\xc3\x23\x52\x3b\x3f\xd7\x41\xe1\x67\xd6\x3d\x80\xd1\x1c\x19\xe8\x50\x60\x77\x1c\x75\x02\xad\xd6\x18\xa3\x40\xc2\x3d\xd0\x8a\x45\xce\xbd\xd3\x71\x2b\x5e\xa8\x3a\x59\xaf\xf9\x76\x68\x74\xc5\xc3\xf3\x7a\x61\x37\xe3\xf1\xf8\xc2\xf6\x1a\xf3\xd9\xec\xf2\xff\x03\xd6\x6b\x4c\xa4\x0c\x1c\x4b\x5f\x69\x6c\x36\x5d\xa1\xa6\x40\xb6\xcb\xd5\xfe\xae\xd9\x52\xdb\x05\x7f\x91\x63\x89\x9a\x43\xce\x4e\xa8\x60\xec\x83\xb7\xc8\xbd\xdb\x9b\xa2\x09\xac\x61\xe9\xd9\xd8\xc6\xa6\xaf\x1a\x67\x44\x61\x78\x33\x4c\x88\x1c\x6b\x56\xd8\x57\x9e\x24\x61\x81\x5c\xc1\x0a\xeb\xd9\x9b\xd6\xef\x26\xe1\x07\xaa\x1a\x56\x78\xdf\x47\xd8\xfb\xa0\xb0\xe8\xb9\x23\x1f\x38\x18\x39\x2a\x3c\x51\x70\xc6\x15\x1d\x5a\xd1\x8e\xab\x94\x45\x4c\xfe\x83\x45\xe1\xe1\xfe\x3e\x7b\x37\x7f\xbb\xb8\xc2\xa5\x71\x45\x3b\xba\xad\xf6\x0a\xc3\x23\xc7\xde\x1c\x39\xe7\x85\xc4\x78\x97\x18\x34\xc7\x3c\x98\x5a\xba\x75\xa6\x15\x01\x5f\x4b\x13\x71\xbd\x09\x98\x08\xe7\x05\x7b\xe3\x4c\x2c\x59\x2b\x94\x22\x75\x54\xd3\xe9\x77\x13\x68\xd2\x0e\xcb\x3b\x9a\xe4\xde\x4e\x77\xc1\x3f\x45\x9e\xfe\x61\x08\x38\x9d\xf0\xaa\xf7\x3e\x49\x3b\xc7\xf9\x9c\x0e\xa5\x95\xb0\x3e\x30\xa4\x24\xf7\xd7\x1a\x6f\x12\xcf\xb7\xe5\xea\xf1\x0e\xb7\x1d\x5f\x37\x3b\x9c\xcf\xa9\xb8\x5a\x7e\xbc\x5b\x7d\x51\x2f\xc4\x7e\x57\xff\x73\xa4\x18\x19\x17\x85\x5c\xce\xff\xb2\x39\x1e\xfc\x0a\x00\x00\xff\xff\xbe\x85\xe7\x3c\x23\x03\x00\x00")

func iatemplatesNode_high_cpu_loadYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_high_cpu_loadYml,
		"iatemplates/node_high_cpu_load.yml",
	)
}

func iatemplatesNode_high_cpu_loadYml() (*asset, error) {
	bytes, err := iatemplatesNode_high_cpu_loadYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_high_cpu_load.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0xe9, 0xcc, 0x26, 0x4e, 0x3, 0x6f, 0x1f, 0xc7, 0x57, 0x69, 0xff, 0x26, 0xe0, 0x7a, 0xcd, 0xfa, 0x3d, 0xd4, 0xcd, 0x46, 0x66, 0x82, 0xb5, 0xc6, 0xd3, 0xc8, 0xbb, 0xd8, 0x5, 0x2e, 0x8a}}
	return a, nil
}

var _iatemplatesNode_low_free_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x42\x0f\xee\x4a\x9d\x8f\x96\xa3\x20\xda\x87\x14\xee\x2d\x29\x85\x5e\xfb\x12\x82\x51\xec\xb5\xad\x56\xd2\x1a\x69\x9d\xd4\x5c\xf3\xdf\x8b\xed\xc4\x0d\x57\x7a\x7e\xb2\x66\x56\xa3\xd9\x9d\x4d\x92\x64\x22\xe4\x6a\xab\x85\xa2\x9a\x00\x09\xbc\x76\xa4\xe0\x39\xa7\xd4\xf2\x31\x2d\x02\x51\xea\xc8\x71\x68\x27\x00\x70\xa0\x10\x0d\x7b\x85\x65\x7f\x8c\x8d\x73\x3a\xb4\x0a\x9f\x39\x27\x70\x23\xe0\x02\x57\xe5\xf4\xab\x0e\x0a\xbf\x93\xfe\x80\x41\x76\xa0\xd3\x0d\xb9\xd5\x41\x1b\xab\xf7\x96\xd2\x7d\x2b\x14\x31\x7f\x5e\xf0\xc8\xa2\xed\x40\x9e\x15\x5e\x63\xb9\x58\x9c\xff\x3f\x60\xbb\xc5\x4c\xaa\x40\xb1\x62\x9b\x63\xb7\xeb\x89\x5a\x07\xed\xfa\x6e\xba\xef\xd2\xd1\x58\x76\xc6\xaf\xbc\xaf\x50\x53\xc8\xc8\x8b\x2e\x09\x45\x60\x87\x8c\x7d\x61\xca\x26\x50\x0e\x67\xbc\x71\x8d\x1b\x6f\x35\xde\x88\xc2\xf4\x66\x3a\x22\xd2\xd6\xa4\x50\x58\xd6\x32\x62\x41\xfb\x92\x14\xb6\x8b\x37\x9d\xdf\xdd\x88\x1f\xb4\x6d\x48\xe1\xed\xd0\x42\xc1\x41\xe1\x7e\xd0\x8e\x74\xa0\x60\xa4\x55\x38\xea\xe0\x8d\x2f\x7b\xd4\xea\x3d\xd9\xb1\x17\x31\xd9\x4f\x12\x85\x2f\x9b\x4d\xf2\x7e\xf9\xee\xfe\x02\x57\xc6\x97\x31\x15\x4e\x73\x56\x98\xb6\x14\x07\x73\xda\x7b\x16\x2d\x86\xfd\xa8\x90\x53\xcc\x82\xa9\xa5\x8f\x70\x8c\x05\x78\xac\x4c\xc4\x65\x13\x60\x22\x3c\x0b\x0a\xe3\x4d\xac\x28\x57\xa8\x44\xea\xa8\xe6\xf3\x1f\x26\xe8\x59\x37\x2c\xf6\x7a\x96\xb1\x9b\xef\x03\x1f\x23\xcd\x9f\x19\x02\x9e\x9e\xf0\x6a\xf0\x3e\xeb\x23\xed\x32\xc0\xe9\x74\x5e\x8d\xee\x81\xc2\x58\x6b\x7c\x89\xa6\xc6\xed\xbf\x41\xde\xc0\x52\x21\x77\xa3\xde\xf7\xd5\xfa\xdb\x03\x3e\xf6\xba\xfd\x0c\x71\x3a\x8d\xe4\x7a\xf5\xe9\x61\xfd\x55\x5d\x3d\xfa\x97\x7d\x61\x41\x71\x6b\x7c\x14\xed\x33\xfa\x9f\xdd\xbb\xc9\x9f\x00\x00\x00\xff\xff\x37\xa9\xa4\x78\x21\x03\x00\x00")

func iatemplatesNode_low_free_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_low_free_memoryYml,
		"iatemplates/node_low_free_memory.yml",
	)
}

func iatemplatesNode_low_free_memoryYml() (*asset, error) {
	bytes, err := iatemplatesNode_low_free_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_low_free_memory.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4b, 0x2c, 0xbb, 0x3a, 0x34, 0x4b, 0xd0, 0xd2, 0xd0, 0xfd, 0x89, 0x87, 0xed, 0xa3, 0x88, 0xbe, 0x31, 0x98, 0xfb, 0x9, 0x45, 0x61, 0x57, 0x33, 0xb5, 0x7b, 0x31, 0x22, 0xeb, 0x36, 0xe3, 0x67}}
	return a, nil
}

var _iatemplatesNode_swap_filled_upYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x42\x0f\x92\x52\xe7\x83\x72\xb4\x08\x5a\x48\xe1\xfa\x94\x2b\x07\xb9\xb6\x0f\x21\x98\x8d\xbd\xb6\xd5\x5a\x92\x91\xd6\xc9\x99\x6b\xfe\x7b\xb1\x9d\xb8\xe9\x95\xfa\xc9\x9a\xd5\xce\xce\x68\x36\x8a\xa2\x91\xb0\xa9\x4a\x12\x0e\x6a\x04\x44\xb0\x64\x58\xc1\xba\x94\xe3\x70\xa4\x2a\xce\x74\x59\x72\x1a\xd7\xd5\x08\x00\x0e\xec\x83\x76\x56\x61\xd9\x1d\x43\x6d\x0c\xf9\x46\xe1\x8b\x4b\x19\x85\xce\x0b\x6c\xbe\xaf\x1e\xd0\x36\x69\x9b\xe3\xdc\xc5\x4f\x95\x57\xf8\x15\x75\x07\x60\xb2\x44\x84\x49\x37\xc2\xb0\x71\xbe\x89\x37\x47\xaa\x3e\x7b\xe6\x78\xdf\x08\x07\xcc\xf1\xb2\xf8\xe8\x84\xca\xbe\x3a\x9d\x9e\x69\x5e\x63\xb9\x58\x9c\xff\x3f\x62\xbb\xc5\x4c\x0a\xcf\xa1\x70\x65\x8a\xdd\xae\x2b\x54\xe4\xc9\x74\xc6\xda\xef\x62\x6e\xb8\x76\xc6\xaf\x7c\xac\x50\xb1\x4f\xd8\x0a\xe5\x8c\xcc\x3b\x83\xc4\xd9\x4c\xe7\xb5\xe7\x14\x86\x9e\xb4\xa9\xcd\xd0\x55\x5b\x2d\x0a\xe3\x9b\xf1\x80\x48\x53\xb1\x42\x56\x3a\x92\x01\xf3\x64\x73\x56\xd8\x2e\xde\xb4\x7a\x77\x03\x7e\xa0\xb2\x66\x85\xf7\xbd\x85\xcc\x79\x85\xdb\x9e\x3b\xf0\x81\xbd\x96\x46\xe1\x48\xde\x6a\x9b\x77\x68\x49\x7b\x2e\x07\x2f\xa2\x93\x9f\x2c\x0a\x0f\xf7\xf7\xd1\xbb\xe5\xdb\xdb\x0b\x5c\x68\x9b\x87\x58\x5c\x9c\x3a\x85\x71\xc3\xa1\x17\x47\xd6\x3a\x21\xd1\xce\x0e\x0c\x29\x87\xc4\xeb\x4a\xba\x38\x87\x6c\x80\xc7\x42\x07\x5c\x96\x02\x3a\xc0\x3a\x41\xa6\xad\x0e\x05\xa7\x0a\x85\x48\x15\xd4\x7c\xfe\x43\x7b\x9a\xb5\x8f\xe5\x2c\xcd\x12\x67\xe6\x7b\xef\x8e\x81\xe7\x2f\x04\x01\xcf\xcf\x78\xd5\x6b\x9f\x75\xa9\xb6\x19\xe0\x74\x42\x1b\x6b\x4b\xdf\x2f\x18\xea\x0a\xc6\x79\x86\x14\x64\xff\x09\xf3\x66\x60\xfb\xb6\x5a\x7f\xbd\xc3\x87\x8e\xb5\x7b\x41\x9c\x4e\x43\x71\xbd\xfa\x74\xb7\xde\xa8\xab\x91\x7f\xaa\x7f\xaf\x6a\xb8\x1a\xde\x2f\x2a\x26\xda\x06\x21\x9b\xf0\xff\x14\x4f\x47\xbf\x03\x00\x00\xff\xff\x9c\x62\x8d\x50\x2f\x03\x00\x00")

func iatemplatesNode_swap_filled_upYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_swap_filled_upYml,
		"iatemplates/node_swap_filled_up.yml",
	)
}

func iatemplatesNode_swap_filled_upYml() (*asset, error) {
	bytes, err := iatemplatesNode_swap_filled_upYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_swap_filled_up.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xdf, 0x72, 0x96, 0x7f, 0x44, 0x73, 0xc5, 0x3c, 0x9b, 0x1f, 0x39, 0x5f, 0x46, 0x1f, 0x7e, 0x2f, 0x36, 0x1c, 0x32, 0x5c, 0x75, 0x42, 0x99, 0x1e, 0x6d, 0x3d, 0x60, 0x4e, 0x90, 0x93, 0xcd}}
	return a, nil
}

var _iatemplatesPostgresql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xcf\xaf\xd2\x40\x10\xbe\xf7\xaf\xf8\x42\x3c\x40\x62\x5b\x89\x21\x26\x9b\x70\xd0\xe8\x0d\x14\x83\x89\xc7\x66\xd9\x0e\x74\xb5\xdd\x5d\x77\x06\xb0\xc1\xfe\xef\x86\xc5\x22\x79\x79\x87\x77\xdb\x9d\xf9\x66\xbe\x1f\x93\xe7\x79\x26\xd4\x85\x56\x0b\xb1\xca\x80\x1c\x4e\x77\xa4\x10\x3c\xcb\x21\x12\xff\x6a\xab\xda\x9f\x5d\x06\x00\x27\x8a\x6c\xbd\x53\x98\xa7\x2f\x1f\xbb\x4e\xc7\x5e\x61\x73\xc3\x6e\xbf\xae\xf0\xf1\xcb\xf7\xcf\xa9\x49\xbf\x43\x54\xf8\x93\xa7\x4f\xc2\x62\xd7\x63\xca\x14\x4f\xd6\x50\x75\x25\x79\x0d\xe7\xeb\xf1\x39\x36\xa4\x0f\x34\xc3\x34\x1c\xaa\x63\x98\x61\xb9\xc4\x9b\xb4\x21\xe8\xa8\xbb\x24\x10\xd8\xfb\xa8\xb0\xe0\x9b\x06\x3a\x51\xb4\xd2\x2b\x98\x68\xc5\x1a\xdd\xa6\x72\xab\x77\xd4\xfe\x83\x03\x62\xcd\x4f\x12\x85\xcd\x7a\x9d\xbf\x9b\xbf\x5d\x8c\xe5\xc6\xba\x03\x57\xe2\xab\xda\x2b\x4c\x7a\xe2\x49\xea\x68\xe7\xbc\x68\xb1\xde\xdd\x37\xd4\xc4\x26\xda\x20\xc9\xfd\xdd\x14\xf0\xad\xb1\x8c\x31\x3f\x58\x86\xf3\x82\xbd\x75\x96\x1b\xaa\x15\x1a\x91\xc0\xaa\x2c\x7f\xd8\xa8\x8b\x40\xd1\x78\xa7\x0b\xe3\xbb\x72\x17\xfd\x99\xa9\x7c\x22\x08\x8f\x49\x5a\xc7\xa2\x9d\x21\x5c\x2e\x78\x75\xf3\x53\x3c\xa6\x87\x61\xb8\x12\x5e\x03\x2f\xee\xf3\xab\xf7\x1f\x3e\xad\xb6\xea\x61\x06\xc3\xf0\xff\x04\xcf\x9e\x0b\xd3\x17\x50\xcd\xb2\xbf\x01\x00\x00\xff\xff\xc4\x39\x9c\x91\x2a\x02\x00\x00")

func iatemplatesPostgresql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_downYml,
		"iatemplates/postgresql_down.yml",
	)
}

func iatemplatesPostgresql_downYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x31, 0x8f, 0x81, 0xda, 0xa5, 0xb4, 0xc0, 0x49, 0x15, 0x43, 0xb6, 0x55, 0x9b, 0x19, 0xcc, 0x11, 0x7, 0x7f, 0xb2, 0x70, 0x11, 0x3f, 0x4, 0x1f, 0x7c, 0x97, 0x78, 0x1b, 0x8a, 0xd2, 0xef}}
	return a, nil
}

var _iatemplatesPostgresql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6f\xd3\x40\x10\x85\xef\xfe\x15\x4f\x11\x07\x38\xd8\x69\x54\x01\xd2\x8a\x0b\x48\xdc\x52\xa9\x10\x6e\x55\x65\x4d\xed\x89\xbd\x60\xef\x2e\x33\x93\x84\xa8\xe4\xbf\xa3\xd8\x89\x49\x73\xaa\x6f\xfb\xf6\xed\xd3\x37\xf3\x9c\xe7\x79\x66\xdc\xa7\x8e\x8c\xd5\x65\x40\x8e\x40\x3d\x3b\xa4\xa8\xd6\x08\xeb\xef\xae\x14\x56\x23\x31\xae\x33\x00\xd8\xb2\xa8\x8f\xc1\x61\x31\x1c\x75\xd3\xf7\x24\x7b\x87\xfb\xf1\xc1\xea\xdb\x12\xdf\x5f\x3c\xe0\x3f\x49\x1c\xfe\xe6\xc3\x01\x48\x4d\x79\xcc\xee\x49\x8d\xa5\xdc\x24\xf3\x3d\x97\xca\x55\x0c\xb5\x9e\x2c\x9f\xf0\xf0\x80\xc2\x5a\x61\x6d\x63\x57\xe3\xf1\x71\xb8\x48\x24\xd4\x0f\x90\xc7\xef\x0c\x3a\xd9\x4e\xfa\x05\xd2\x6a\x4c\xc5\x5a\x62\x0f\x6b\x19\x1d\xa9\xe1\x34\xce\x64\xdf\x04\x6f\x0e\x33\xe5\x6a\x36\x69\xb6\x4f\xec\xb0\xee\x22\xfd\xf7\x6d\xa9\xdb\xb0\xc3\xed\x87\x9b\x41\x5a\x47\x71\x58\xdc\x8c\xcc\xca\x5b\x16\x6f\x7b\x87\x1d\x49\xf0\xa1\x19\xd4\x8e\x9e\xb8\x9b\x80\xcd\x57\xbf\xd8\x1c\xee\xef\xee\xf2\x8f\x8b\xdb\xf7\x67\xb9\xf5\xa1\xd1\xd2\x62\x59\x47\x87\xd9\x9e\x75\xc4\xa0\x10\xa2\x91\xf9\x18\xa6\x84\x9a\xb5\x12\x9f\x6c\x58\xff\xb4\x50\xe0\x47\xeb\x15\xe7\x16\xe1\x15\x21\x1a\xd6\x3e\x78\x6d\xb9\x76\x68\xcd\x92\xba\xf9\xfc\xa7\x17\x2a\x12\x4b\x15\x03\x15\x55\xec\xe7\x4f\x12\x77\xca\xf3\x2b\x20\x5c\x56\xe9\x83\x1a\x85\x8a\xf1\xfc\x8c\x37\xe3\x3c\x85\xb2\x6c\x7d\xc5\xe5\x71\xff\x38\x1c\xb0\x23\xc5\xf4\x8f\x0c\xc6\x61\x55\xc7\xab\x53\xaf\xa0\x26\x16\x53\xfc\xf2\xf3\x97\xaf\xcb\x95\xbb\x88\xc4\xe1\x90\x5d\x75\x77\xc1\xf0\x32\xff\xed\x2b\x90\xde\x65\xff\x02\x00\x00\xff\xff\xd0\x21\xdb\x33\xd8\x02\x00\x00")

func iatemplatesPostgresql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_restartedYml,
		"iatemplates/postgresql_restarted.yml",
	)
}

func iatemplatesPostgresql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0xc2, 0x40, 0x6b, 0xd9, 0x41, 0xf0, 0xb1, 0x81, 0xf4, 0x6d, 0x72, 0xa1, 0xe, 0xdf, 0x4e, 0xf4, 0xfb, 0xe, 0x7a, 0xf5, 0xf9, 0xee, 0x22, 0x4f, 0x8b, 0x4e, 0x17, 0x86, 0xcc, 0x9c, 0xeb}}
	return a, nil
}

var _iatemplatesPostgresql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x5f\x6b\xdb\x4e\x10\x7c\xf7\xa7\x98\x9f\xf9\x05\x92\x50\xd9\x31\x25\xb4\x1c\xb4\xe0\x42\xde\x6c\x48\x49\xdb\x17\x63\xc4\x46\x5a\x49\xd7\xea\xee\xd4\xbb\x95\x63\xe3\xb8\x9f\xbd\xe8\x6c\xa9\xee\x5f\xbd\xdd\xdc\xce\xde\xcc\xce\x2a\x49\x92\x91\xb0\x69\x6a\x12\x0e\x6a\x04\x24\xb0\x64\x58\xa1\x71\x41\x4a\xcf\xe1\x6b\x9d\x8a\x73\xa9\x21\xbb\x4b\x33\x67\x2d\x67\xa2\x9d\x0d\x23\x00\xd8\xb0\x0f\xda\x59\x85\x59\x3c\x86\xd6\x18\xf2\x3b\x85\xfb\x23\xf7\xe1\xfd\x02\x67\x14\x68\x8b\x36\x70\x2c\xe5\x6d\xe3\x15\x9e\x93\x78\x88\xcc\xcb\xa6\x4c\x83\x90\xa4\x94\x89\xde\x68\xe9\x5e\x6b\xad\xec\x73\x92\x4e\xd0\x7f\xdf\xc6\xbd\xcc\xc9\xf5\x73\x2f\x6e\x7c\xb8\x3a\x75\x78\x8b\x8e\xcf\x22\xda\x96\x21\x35\xb4\x3d\x17\x8b\x6b\xac\x56\x98\x48\xe5\x39\x54\xae\xce\xb1\x5e\x63\x8a\xd9\xcd\x4d\x24\x37\xe4\xc9\x44\xef\xdd\xd7\xfb\x1f\x8a\x4f\xf8\x99\xbd\x39\x1a\xf6\x19\x5b\xa1\x92\x51\x78\x67\x3a\x97\x85\x2e\x5b\xcf\x39\x0c\x6d\xb5\x69\xcd\xc0\x6a\xad\x16\x85\xf1\xc5\x78\x40\x64\xd7\xb0\x42\x51\x3b\x92\x01\xf3\x64\x4b\x56\x58\xdd\xbc\xe8\x64\xad\x07\x7c\x43\x75\xcb\x0a\xaf\x8f\x4a\x0b\xe7\x15\x6e\x8f\xbd\x03\x6f\xd8\x6b\xd9\x29\x3c\x91\xb7\xda\x96\x11\xad\xe9\x91\xeb\xc1\x8b\xe8\xec\x0b\x8b\xc2\xfd\x72\x99\xbc\x9a\xbd\xbc\xed\xe1\x2a\x0e\x49\x5c\x9a\x3b\x85\xf1\x8e\xc3\x51\x1c\x59\xeb\x84\xe2\xc4\xfa\x0e\x39\x87\xcc\xeb\x46\x62\xca\x43\x5c\xc0\x87\x4a\x07\xf4\x81\x40\x07\x58\x27\x28\xb4\xd5\xa1\xe2\x5c\xa1\x12\x69\x82\x9a\x4e\x3f\x6b\x4f\x93\x6e\x58\xce\xd2\x24\x73\x66\xfa\xe8\xdd\x53\xe0\xe9\x2f\x82\x80\xa5\xf3\x0c\xa9\xc8\xfe\x16\xd4\x05\x5c\xf1\xb7\x85\x22\xcf\xa7\xa5\x82\xb3\xd8\xef\xf1\xff\xd1\xff\x24\xb0\xdf\xe8\x8c\xd3\x2e\x4a\x1c\x0e\xc3\x33\x9f\xe6\x8b\x8f\x77\x78\x13\x4b\xe3\x68\xcf\x2f\x17\xf3\x77\x77\x8b\x07\x75\xd6\xe7\xc7\xed\x9f\x56\x5b\x9c\x43\xf7\x5b\xfc\x24\xe9\x52\xdb\x20\x64\x33\xfe\x87\x9c\xab\xd1\xf7\x00\x00\x00\xff\xff\xc1\x61\x68\xee\x76\x03\x00\x00")

func iatemplatesPostgresql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_too_many_connectionsYml,
		"iatemplates/postgresql_too_many_connections.yml",
	)
}

func iatemplatesPostgresql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3e, 0xcc, 0x39, 0x98, 0xf, 0xa9, 0x47, 0xdf, 0xac, 0xc1, 0x80, 0x1e, 0xa8, 0x5d, 0x6e, 0x44, 0xf6, 0x4b, 0x34, 0x95, 0xad, 0x90, 0x22, 0xf6, 0x76, 0xc9, 0xd0, 0xe0, 0xb1, 0x6, 0x33, 0x9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"iatemplates/mongodb_connections_memory_usage.yml": iatemplatesMongodb_connections_memory_usageYml,
	"iatemplates/mongodb_high_memory_usage.yml":        iatemplatesMongodb_high_memory_usageYml,
	"iatemplates/mongodb_restarted.yml":                iatemplatesMongodb_restartedYml,
	"iatemplates/mysql_down.yml":                       iatemplatesMysql_downYml,
	"iatemplates/mysql_restarted.yml":                  iatemplatesMysql_restartedYml,
	"iatemplates/mysql_too_many_connections.yml":       iatemplatesMysql_too_many_connectionsYml,
	"iatemplates/node_high_cpu_load.yml":               iatemplatesNode_high_cpu_loadYml,
	"iatemplates/node_low_free_memory.yml":             iatemplatesNode_low_free_memoryYml,
	"iatemplates/node_swap_filled_up.yml":              iatemplatesNode_swap_filled_upYml,
	"iatemplates/postgresql_down.yml":                  iatemplatesPostgresql_downYml,
	"iatemplates/postgresql_restarted.yml":             iatemplatesPostgresql_restartedYml,
	"iatemplates/postgresql_too_many_connections.yml":  iatemplatesPostgresql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"iatemplates": {nil, map[string]*bintree{
		"mongodb_connections_memory_usage.yml": {iatemplatesMongodb_connections_memory_usageYml, map[string]*bintree{}},
		"mongodb_high_memory_usage.yml":        {iatemplatesMongodb_high_memory_usageYml, map[string]*bintree{}},
		"mongodb_restarted.yml":                {iatemplatesMongodb_restartedYml, map[string]*bintree{}},
		"mysql_down.yml":                       {iatemplatesMysql_downYml, map[string]*bintree{}},
		"mysql_restarted.yml":                  {iatemplatesMysql_restartedYml, map[string]*bintree{}},
		"mysql_too_many_connections.yml":       {iatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		"node_high_cpu_load.yml":               {iatemplatesNode_high_cpu_loadYml, map[string]*bintree{}},
		"node_low_free_memory.yml":             {iatemplatesNode_low_free_memoryYml, map[string]*bintree{}},
		"node_swap_filled_up.yml":              {iatemplatesNode_swap_filled_upYml, map[string]*bintree{}},
		"postgresql_down.yml":                  {iatemplatesPostgresql_downYml, map[string]*bintree{}},
		"postgresql_restarted.yml":             {iatemplatesPostgresql_restartedYml, map[string]*bintree{}},
		"postgresql_too_many_connections.yml":  {iatemplatesPostgresql_too_many_connectionsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
