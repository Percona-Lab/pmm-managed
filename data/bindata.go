// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iatemplates/mongodb_connections_memory_usage.yml (829B)
// iatemplates/mongodb_high_memory_usage.yml (779B)
// iatemplates/mongodb_restarted.yml (605B)
// iatemplates/mysql_down.yml (423B)
// iatemplates/mysql_restarted.yml (679B)
// iatemplates/mysql_too_many_connections.yml (787B)
// iatemplates/node_high_cpu_load.yml (689B)
// iatemplates/node_low_free_memory.yml (687B)
// iatemplates/node_swap_filled_up.yml (701B)
// iatemplates/postgresql_down.yml (440B)
// iatemplates/postgresql_restarted.yml (614B)
// iatemplates/postgresql_too_many_connections.yml (772B)

package data

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iatemplatesMongodb_connections_memory_usageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4f\x6b\xdb\x4e\x10\xbd\xfb\x53\x3c\xcc\x2f\x60\xff\xa8\x53\x27\x34\x97\x85\x14\x1c\x9a\x9b\x7d\xea\x9f\x8b\x31\x62\x24\x8d\xe4\x05\xed\xac\xd8\x5d\xb9\x11\xae\xbf\x7b\xd9\x8d\xac\x28\x94\x42\x75\xd1\xce\x9b\x99\xb7\x6f\xde\xec\x6a\xb5\x9a\x05\x36\x6d\x43\x81\xbd\x9a\x01\x2b\x08\x19\x56\x30\x56\x6a\x5b\xe6\x59\x61\x45\xb8\x08\xda\x8a\xcf\x0c\x1b\xeb\xfa\xac\xf3\x54\xf3\x0c\x00\x4e\xec\xbc\xb6\xa2\x70\x97\x42\xdf\x19\x43\xae\x57\xd8\xa5\x42\x74\x9e\x4b\xe4\x3d\x76\x91\xeb\xcb\x13\x26\x5c\xa9\x9e\x5f\x5a\xa7\xf0\x6b\x95\x82\xd4\x1e\xab\x17\x62\x4b\xce\xa2\x8a\x25\x16\x57\x19\xde\x4f\x95\x9c\xe3\x39\x0b\x7d\xcb\x8f\xf3\xa2\x73\x8e\x25\xcc\x2f\x4b\xfc\x8f\xbb\xf5\xfd\xa7\xe1\x37\x90\x7e\x84\x95\xf7\x94\xe9\x3c\x8c\xb2\x63\xf3\xcd\x06\x6a\xb2\xbc\x0f\xec\x97\x43\x4f\x24\x58\x0f\xe7\xcf\xd8\xef\x71\x1b\x8e\x8e\xfd\xd1\x36\x25\x0e\x87\x94\x68\xc9\x91\x49\x86\xc5\xef\x6a\xda\x58\x36\xe0\x13\x4b\x36\x68\xd9\x15\x2c\x81\x6a\x46\xe5\xac\x89\x6e\x54\xba\xee\x1c\x97\x30\xf4\xa2\x4d\x67\xc6\xae\x4e\x74\x50\x98\xdf\xcc\x47\x24\xce\xaa\x50\x35\x96\xc2\x88\x39\x92\x9a\x15\xf6\xeb\x0f\x51\xef\x61\xc4\x4f\xd4\x74\xac\x70\xff\x90\x90\xca\x3a\x85\x87\x57\x6e\xcf\x27\x76\x3a\xf4\x0a\x3f\xc9\x89\x96\x3a\xa1\x0d\xe5\xdc\x8c\xb3\x54\xd6\x2a\xe4\xe4\x52\x48\x22\x36\x50\xf2\xfc\x9a\x2f\xd9\x17\x4e\xb7\x21\xed\x7d\xdc\x1d\xb0\xb3\x8e\x11\x8e\x24\x7f\x18\x76\x03\x5b\xfd\xc3\x93\x88\x8b\x3a\x9f\xf1\xdf\xab\x9c\xdb\x71\x65\xb8\x5c\xc6\x4b\x7e\x6c\xb6\xdf\x9f\xf1\x98\xea\xd2\x98\xd3\xe4\x76\xf3\xf4\xbc\xfd\xaa\x26\x24\x6f\xd9\xb7\xa7\x39\x5c\x7c\xd4\xf5\x11\xe6\x2a\x2a\x2e\x25\xef\xdf\xa9\x59\x68\xf1\x81\xa4\xe0\xbf\x89\x5a\xce\x7e\x07\x00\x00\xff\xff\x60\x68\x67\x77\x3d\x03\x00\x00")

func iatemplatesMongodb_connections_memory_usageYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_connections_memory_usageYml,
		"iatemplates/mongodb_connections_memory_usage.yml",
	)
}

func iatemplatesMongodb_connections_memory_usageYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_connections_memory_usageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_connections_memory_usage.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xdf, 0xb2, 0xe4, 0xe8, 0x44, 0x54, 0x81, 0xa6, 0x9c, 0x8c, 0x46, 0x92, 0x35, 0x9b, 0x1c, 0xf1, 0x3f, 0xf3, 0x9a, 0x43, 0xdc, 0x4a, 0x4, 0x43, 0x5c, 0xe9, 0x4e, 0x1c, 0x28, 0xa8, 0xef}}
	return a, nil
}

var _iatemplatesMongodb_high_memory_usageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x6b\xdb\x40\x10\xbd\xfb\x57\x3c\x42\x03\x71\xa9\x52\xa7\xb4\x50\x16\x5a\x70\x68\x6e\xf6\xa9\x1f\x17\x63\xc4\x48\x1a\x49\x0b\xda\x5d\x31\xbb\x72\x23\xd2\xfc\xf7\xa2\xb5\xb4\x71\x28\xd5\x45\x3b\x9f\xef\xcd\xbc\xc9\xb2\x6c\x15\xd8\xf4\x1d\x05\xf6\x6a\x05\x64\xb0\x64\x58\xc1\x38\xdb\xb8\xaa\xc8\x5b\xdd\xb4\xb9\x61\xe3\x64\xcc\x07\x4f\x0d\xaf\x00\xe0\xc4\xe2\xb5\xb3\x0a\x77\xd1\xf4\x83\x31\x24\xa3\xc2\x3e\x26\x62\xf0\x5c\x61\x3f\x75\xf8\x76\x0f\x6d\x7d\x20\x5b\xb2\x47\xcc\xe5\xc7\x5e\x14\xfe\x64\xd1\x88\xa5\x28\x46\xdc\x58\x57\x71\x3e\x41\xaf\x71\xb3\x60\x7b\x3f\x21\xe7\xc2\x5e\x57\x6c\x03\xde\xe2\x6e\xf3\xe1\xe3\xfc\x5b\xcf\x0d\xde\xc3\xd9\xd7\xe5\xf1\x3d\x53\xde\xb3\xf9\xe1\x02\x75\x79\x31\x06\xf6\x4b\xcd\xd4\x61\x33\xbf\xbf\xe2\x70\xc0\x6d\x68\x85\x7d\xeb\xba\x0a\xc7\x63\x0c\xf4\x24\x64\xe2\x46\xa6\x6f\xd9\x4a\x4a\x9b\xfd\x17\xa3\x6f\xd1\xb3\x94\x6c\x03\x35\x8c\x5a\x9c\x41\xe9\x6c\xad\x9b\x41\xb8\x82\xa1\x47\x6d\x06\x93\xaa\x06\xab\x83\xc2\xd5\xf5\x55\xf2\x84\xb1\x67\x85\xba\x73\x14\x92\x4f\xc8\x36\xac\x70\xd8\xbc\x9b\xf8\x1e\x93\xff\x44\xdd\xc0\x0a\x9f\xcf\x23\xd4\x4e\x14\x3e\x9d\x7b\x7b\x3e\xb1\xe8\x30\x2a\xfc\x26\xb1\xda\x36\xd1\xdb\x51\xc1\x5d\x9a\xa5\x76\x4e\xa1\x20\x89\x26\x59\xeb\x02\x05\xed\x6c\x8a\x57\xec\x4b\xd1\x7d\x88\xfa\x26\x9d\x80\xbd\x13\x46\x68\xc9\xfe\xb3\xb0\x6b\xb8\xfa\x95\xf4\xc5\x98\xd4\xf7\x2c\x27\x5d\xf2\x24\xd2\xd3\x13\xde\x9c\xa9\xdc\x26\xb9\xf0\xfc\x9c\x00\x7e\x6d\x77\x3f\x1f\xf0\x25\xe6\xc5\x11\x2f\x83\xbb\xed\xfd\xc3\xee\xbb\xba\x68\xf2\x12\x7d\x39\xbf\x19\x74\x3a\x5a\x98\x85\xd0\x24\xc8\xcd\x72\x85\xff\x63\xb1\x5e\xfd\x0d\x00\x00\xff\xff\xe4\x70\x10\x21\x0b\x03\x00\x00")

func iatemplatesMongodb_high_memory_usageYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_high_memory_usageYml,
		"iatemplates/mongodb_high_memory_usage.yml",
	)
}

func iatemplatesMongodb_high_memory_usageYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_high_memory_usageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_high_memory_usage.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x53, 0xb0, 0x6c, 0xfa, 0x14, 0xe3, 0xd7, 0xf9, 0xd7, 0x7e, 0xec, 0x87, 0x76, 0x87, 0xb, 0x4d, 0x8c, 0x1d, 0x8d, 0x3e, 0x19, 0xa8, 0x93, 0xdd, 0x42, 0xb2, 0x46, 0x5a, 0xc1, 0xa9, 0x7f}}
	return a, nil
}

var _iatemplatesMongodb_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\xaa\xdb\x30\x10\x45\xf7\xfe\x8a\x4b\xe8\xa2\x5d\x38\x24\x14\xba\x10\xdd\x34\xb4\xbb\x84\x42\xb3\x0c\xc1\x4c\xec\x71\x22\xb0\x24\x23\x8d\x9d\x86\xd4\xff\x5e\x2c\x3b\x7a\xc9\x5b\x3d\xef\x66\xe6\x72\x39\x3e\xca\xf3\x3c\x13\x36\x6d\x43\xc2\x41\x65\x40\x0e\x4b\x86\x15\x8c\xb3\x67\x57\x9d\x0a\xcf\x41\xc8\x0b\x57\x19\x00\xf4\xec\x83\x76\x56\x61\x1d\xc7\xd0\x19\x43\xfe\xa6\xb0\x1b\xd3\x3f\x37\xf8\xf3\x92\xe6\xbf\xad\x57\xf8\x97\xc7\x01\xa9\x52\xdb\x20\x64\x4b\x2e\xba\x56\xb4\xe1\x22\x70\xe9\x6c\x15\xe6\xd4\x77\x1c\x0e\x58\xca\xc5\x73\xb8\xb8\xa6\xc2\xf1\x18\x0f\x2d\x79\x32\x91\x70\xfc\x1e\x94\x29\x36\xef\x9f\x90\xf6\x53\x2b\x6a\xef\x0c\xe4\xc2\x68\x28\x08\xe6\xdf\x49\xf1\xce\x6a\x51\x58\x04\x2e\x17\x69\x27\xb7\x96\x15\xea\xc6\xd1\x5b\xae\xa7\xa6\x63\x85\xaf\xdf\x56\x71\x55\x3b\xaf\xb0\x5e\x4d\xcc\x81\x7b\xf6\x5a\x6e\x0a\x57\xf2\x56\xdb\x73\xdc\x36\x74\xe2\x26\x01\xd7\xce\x29\x9c\xc8\xc7\x91\xac\x75\x42\xa2\x9d\x4d\xf7\x8a\x43\xe9\x75\x2b\x51\x6e\x32\x86\x24\xf6\xe1\x0c\xf7\x3b\x3e\x4d\xd5\xcb\xc0\xbe\xd7\x25\x17\xa3\x0a\x0c\x03\xae\x14\x90\x9e\x2b\x06\x23\xf5\x78\x9a\x15\x83\xce\x6e\x99\xba\xb7\x3f\x36\xbf\xb6\x7b\xf5\x54\x89\x61\xc8\xde\x69\xdc\xfd\x9e\x00\x5e\xcb\x3f\x7f\x80\xe7\x4b\xf6\x3f\x00\x00\xff\xff\x2a\x18\x59\x08\x5d\x02\x00\x00")

func iatemplatesMongodb_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_restartedYml,
		"iatemplates/mongodb_restarted.yml",
	)
}

func iatemplatesMongodb_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0x6a, 0x27, 0x28, 0x2d, 0x8, 0xec, 0x71, 0x36, 0xc3, 0xa7, 0xad, 0xef, 0x61, 0xcb, 0x44, 0xf5, 0x73, 0xb0, 0xb2, 0x63, 0x8, 0x29, 0x4a, 0xd6, 0xb8, 0xec, 0x57, 0x71, 0x2, 0x35, 0xdc}}
	return a, nil
}

var _iatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\x3d\x4f\xc3\x40\x0c\xdd\xf3\x2b\xde\xc0\x90\x48\xa4\x82\x81\xe5\xa4\x0e\x20\xd8\x02\x08\x75\x60\xac\x9c\xc4\x48\x27\xe5\x3e\xb8\xbb\x06\x4e\x25\xff\x1d\xd5\x69\x43\xc5\xd4\xcd\xcf\xf6\x7b\x7e\xcf\x75\x5d\x17\x89\x8d\x1f\x28\x71\x54\x05\x50\xc3\x92\x61\x05\x93\xe3\xe7\xb0\xed\xdd\x97\x2d\x00\x60\xe4\x10\xb5\xb3\x0a\xb7\x02\xe3\xce\x18\x0a\x59\xe1\x39\x6f\xde\x1a\x3c\xbe\xbe\xbf\x48\x9f\xbf\x7d\x50\xf8\xa9\x05\xc8\x1a\xda\x8c\x32\x72\x18\x75\xc7\xdb\x83\xf4\x35\xac\xeb\x4f\xe5\x69\x90\xb2\xe7\x0a\xe5\x7c\x74\xe7\x2b\xac\xd7\xb8\x11\x11\x4f\x81\x8c\x38\x03\x3e\x5c\x50\xb8\x8b\xb3\x03\x1e\x39\xe8\x94\x15\xba\xa0\x93\xee\x68\x90\xf6\x40\x2d\x0f\xc7\xf5\x03\xc1\x29\xb4\x14\x04\x92\xb5\x2e\x51\xd2\xce\x2e\xf3\x9e\x63\x17\xb4\x4f\x92\x6c\x71\x8d\x63\x2a\x6d\x63\x22\xdb\x31\xf6\x7b\x5c\xcd\xc2\xab\xf3\x24\x98\x26\xe8\x28\xe1\x57\x0b\xb5\xb9\x7f\x78\x6a\x36\xea\x8c\x83\x69\xfa\x7b\xc7\xff\xaf\xa1\xbc\xe0\x4a\x55\xfc\x06\x00\x00\xff\xff\xb4\x7a\xbc\xaa\xa7\x01\x00\x00")

func iatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_downYml,
		"iatemplates/mysql_down.yml",
	)
}

func iatemplatesMysql_downYml() (*asset, error) {
	bytes, err := iatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x7d, 0x88, 0xdb, 0xb1, 0xd3, 0xe3, 0xcf, 0xcc, 0x5b, 0xe8, 0x3, 0x77, 0x7c, 0x97, 0x48, 0x5f, 0xe4, 0xb7, 0x8e, 0x4a, 0xd5, 0x50, 0x20, 0xd2, 0xf6, 0x8, 0x9e, 0x71, 0x16, 0x1c, 0x46}}
	return a, nil
}

var _iatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x9e\x16\x0e\x20\x6d\x56\x59\x81\x38\x58\x5c\x40\xe2\x56\x0e\xd0\x63\x55\x55\x93\x74\x9a\x5a\x38\x76\x98\x99\x74\x89\x96\xfe\x3b\xaa\x9b\x35\xbb\x9c\xc8\x29\xf3\xe6\xf9\xf9\xf9\xbd\xba\xae\x2b\xe3\x61\x0c\x64\xac\xae\x02\x6a\x44\x1a\xd8\x61\x98\xf5\x67\xd8\x09\xab\x91\x18\xef\x2b\x00\x38\xb1\xa8\x4f\xd1\xe1\x3e\x8f\x3a\x0d\x03\xc9\xec\xf0\x75\x5e\x7f\x5b\xe1\xfb\x0b\x2e\xff\x1a\xc5\xe1\x77\x9d\x07\x2c\x72\x7d\x48\x2d\x85\x9d\x1a\xd9\xa4\xbb\x69\x34\x3f\xf0\x42\xf8\x88\xcd\x06\x77\x76\x14\xd6\x63\x0a\x7b\x6c\xb7\x79\x31\x92\xd0\x90\x8d\x5d\xbe\x27\x73\x85\xb6\xe0\xcf\xbc\xac\xb9\x4b\x71\xaf\x38\x48\x1a\x60\x47\x46\x20\x35\x2c\xef\x28\xf4\x29\x7a\x73\xb8\x51\xee\x6e\x0a\x66\xf3\xc8\x0e\x87\x90\xc8\xf0\x0a\x47\xea\x7e\xc0\x12\x5a\x06\xb5\x81\x2f\xbf\x23\x89\x72\xd6\x7c\x4a\xec\x16\x49\x7c\xef\x23\x85\x7c\x1a\x0f\xa4\xf0\xf1\xef\x35\x42\xb1\x67\x87\x4d\x73\x8b\xf7\x4d\xb3\x2d\xf8\x89\xc2\xc4\x0e\xef\x3e\x34\x19\x3a\x24\x71\xb8\x6f\xf4\x9a\x2a\x9f\x58\xbc\xcd\x0e\x0f\x24\xd1\xc7\x3e\xa3\x81\x5a\x0e\x25\x87\x43\x4a\x0e\x2d\x49\x1e\x29\xc6\x64\x64\x3e\xc5\xb2\xdf\xb3\x76\xe2\x47\xcb\x65\x95\x0e\xb0\x14\xe5\xa3\x1a\xc5\x8e\xf1\xf8\x88\xd7\x57\xe1\x3b\x65\x39\xf9\x8e\x77\x97\x7c\x71\x3e\xe7\x97\x94\xf2\x33\x31\x7b\xbe\xac\x74\x49\x98\xfa\x74\x57\x94\x57\x9f\x3e\x7f\x59\xad\xdd\x33\x49\x9c\xcf\xd5\x3f\xdd\x5c\xaf\x7f\x29\xfd\xe6\x3f\xdc\xbc\xad\xfe\x04\x00\x00\xff\xff\xdb\x03\xba\xbd\xa7\x02\x00\x00")

func iatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_restartedYml,
		"iatemplates/mysql_restarted.yml",
	)
}

func iatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x16, 0xd7, 0xa6, 0xb5, 0x96, 0x73, 0x14, 0x0, 0xe5, 0xb9, 0x46, 0x30, 0xb0, 0xa3, 0x5, 0x15, 0xc7, 0x27, 0x7a, 0xf6, 0x2, 0x9f, 0x3c, 0x4a, 0x49, 0xe4, 0x34, 0x8e, 0xa2, 0xce, 0x2f, 0x9d}}
	return a, nil
}

var _iatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x3c\x84\x37\x60\xbf\xd4\xa9\x73\x08\x94\x85\x16\x5c\xc8\xcd\x39\x94\xd0\x5e\x8c\x11\x63\x79\x24\x6f\xd9\xdd\x51\x67\x57\x6a\x44\x9a\xff\x5e\xb4\xb6\x55\x35\x2d\xd5\x49\xf3\xb1\xf3\x7c\xcc\x2c\x97\xcb\x59\x62\xdf\x38\x4a\x1c\xcd\x0c\x58\x22\x90\x67\x03\xdf\xc7\x6f\xae\x48\x22\x85\xa7\xd0\x17\xa5\x84\xc0\x65\xb2\x12\xe2\x0c\x00\x3a\xd6\x68\x25\x18\xdc\xe6\x30\xb6\xde\x93\xf6\x06\x0f\xfd\xe3\xa7\x0d\x26\xdd\xb0\x01\x6d\xe4\xdc\xc5\x4f\x8d\x1a\xfc\x58\xe6\x00\xf0\xf4\x54\x48\xc7\x5a\x24\xeb\x79\x7e\x02\xac\x9d\xec\xc9\x15\x31\x51\x6a\x63\x91\x8e\xca\x74\x88\x17\x74\x3e\x6c\xef\xfc\x6e\x81\xb7\xb0\x75\x10\xb5\xa1\xc6\xfc\xab\xec\x17\x97\x79\xd3\x09\x1d\xa9\xa5\xbd\xe3\x58\x0c\x30\xaf\xe9\x03\xff\xe3\x76\xb5\x3a\xff\x7f\xc0\x76\x8b\x9b\x01\x2c\x1e\xc5\x1d\xb0\xdb\xe5\x42\x43\x4a\x3e\x9b\x32\x7c\x17\x63\xc6\xb6\x73\x7e\x22\x7e\x8d\x86\xb5\xe4\x90\xa8\x66\x54\x2a\x7e\x30\xa2\xb2\x75\xab\x7c\x18\xd4\x5a\xdf\xfa\xf1\x55\x1b\x6c\x32\xb8\xba\xbe\x1a\x33\xa9\x6f\xd8\xa0\x72\x42\x69\xcc\x29\x85\x9a\x0d\xb6\xab\x37\x03\xdf\xdd\x98\xef\xc8\xb5\x6c\xf0\xee\x24\xa1\x12\x35\xb8\x3b\xcd\x8e\xdc\xb1\xda\xd4\x1b\x7c\x27\x0d\x36\xd4\x39\xeb\x68\xcf\x6e\xd4\x52\x89\x18\xec\x49\x73\x48\x21\x48\xa2\xec\xcd\xa5\x7e\xe0\x58\xaa\x6d\x52\xde\xf0\xb8\x2f\xe0\x41\x94\x91\x8e\x14\xfe\x30\xec\x1a\x52\xfd\x65\xf9\xa4\x7c\x3e\x00\x48\xc0\xf3\x33\xfe\x3b\x11\xb9\x89\xac\x9d\x2d\xb9\x18\x3c\xc5\xcb\xcb\x88\xf0\x65\xbd\xf9\x7c\x8f\xf7\xb9\x35\x6b\x9c\x16\x37\xeb\x8f\xf7\x9b\x47\x33\x99\xf3\xab\xfa\xea\x02\x93\x08\x86\xc3\xfd\x8d\xcd\xdc\x86\x98\x28\x94\xfc\x0f\x26\x8b\xd9\xcf\x00\x00\x00\xff\xff\x57\x7a\x0c\x77\x13\x03\x00\x00")

func iatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_too_many_connectionsYml,
		"iatemplates/mysql_too_many_connections.yml",
	)
}

func iatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0x47, 0x73, 0x99, 0xa5, 0xda, 0xfb, 0xd5, 0xa1, 0x98, 0x90, 0xf0, 0x65, 0xe7, 0xab, 0xc0, 0xfb, 0x74, 0xf3, 0xfa, 0x4c, 0x47, 0x6a, 0xab, 0x89, 0xe3, 0xed, 0x3b, 0xe0, 0x48, 0x6a, 0xeb}}
	return a, nil
}

var _iatemplatesNode_high_cpu_loadYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x8a\xdb\x30\x14\xbc\xe7\x2b\x86\xd0\x85\xa4\xd4\x4b\x72\x58\x28\x82\x2d\xa4\x65\x6f\xa1\x14\xca\xf6\x12\x42\x78\xb1\x9e\x6d\x81\xa4\x67\x24\x39\xdd\x90\xfa\xdf\x8b\x95\x54\x5d\x28\x5d\x9f\xfc\x66\x9e\x67\x34\x1e\x55\x55\x35\x4b\xec\x7a\x4b\x89\xa3\x9a\x01\x15\x3c\x39\x56\xf0\xa2\xf9\xd0\x99\xb6\x3b\xd4\xfd\x70\xb0\x42\x7a\x06\x00\x27\x0e\xd1\x88\x57\x58\xe7\x31\x0e\xce\x51\x38\x2b\x7c\x15\xcd\x98\xd6\xf1\xe5\xdb\x33\xca\x3a\xbf\xf4\x41\xe1\x57\x95\x07\x60\xb1\x46\x05\x3a\xb5\x38\x9e\x17\xd9\x60\xf2\x5a\x62\x11\x28\xf1\x15\x98\xcc\x22\xd7\xe2\x75\x3c\x24\x49\x64\x2f\x4e\x34\x3f\xce\x8d\xb6\x3c\x1f\x77\x0f\x6e\xbf\x5c\x2e\x6f\x6a\xef\xb1\x5e\xad\x6e\xef\x9f\xb0\xdb\xe1\x3e\x75\x81\x63\x27\x56\x63\xbf\xcf\x44\x4f\x81\x5c\xce\x35\x3d\x7f\xb2\x95\xb5\x1b\xfe\x2a\xc7\x06\x3d\x87\x9a\x7d\xa2\x96\xd1\x04\x71\xa8\xc5\x37\xa6\x1d\x02\x6b\x38\x7a\x31\x6e\x70\xe5\xab\xc1\x9b\xa4\x30\xbf\x9b\x17\x24\x9d\x7b\x56\x68\xac\x50\x2a\x58\x20\xdf\xb2\xc2\x6e\xf5\x61\x3a\xef\xbe\xe0\x27\xb2\x03\x2b\x7c\xbc\x46\x68\x24\x28\x3c\x5c\xb5\x23\x9f\x38\x98\x74\x56\xf8\x49\xc1\x1b\xdf\x66\xd4\xd2\x91\x6d\xc9\xd2\x88\x28\x1c\x29\xe4\x91\xbc\x97\x44\xc9\x88\x2f\xbc\xe6\x58\x07\xd3\xa7\x5c\x56\x29\x00\xb8\x5c\xf0\xee\xaa\x74\x5f\x1a\xc0\x38\x96\xda\x60\x22\x9c\x04\x46\xea\xc8\xff\xf3\x53\xef\x8a\xce\x8f\xcd\xf6\xf9\x09\x8f\x59\x2f\x27\xc1\x38\x16\x72\xbb\xf9\xfc\xb4\xfd\xae\x5e\x99\xfd\x65\xdf\xb8\x32\x58\x18\x1f\x13\xf9\x9a\xff\x77\xcc\xe5\xec\x77\x00\x00\x00\xff\xff\xce\xbb\x47\xd4\xb1\x02\x00\x00")

func iatemplatesNode_high_cpu_loadYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_high_cpu_loadYml,
		"iatemplates/node_high_cpu_load.yml",
	)
}

func iatemplatesNode_high_cpu_loadYml() (*asset, error) {
	bytes, err := iatemplatesNode_high_cpu_loadYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_high_cpu_load.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0xc, 0x55, 0xb1, 0x81, 0x8d, 0x31, 0xd2, 0xe0, 0x9c, 0xb9, 0x59, 0xd3, 0xb2, 0xe4, 0x58, 0x7a, 0x3d, 0x4e, 0x23, 0xee, 0xf, 0xb4, 0x67, 0xe5, 0xc3, 0xcd, 0x9d, 0x3, 0xc, 0x9f, 0x56}}
	return a, nil
}

var _iatemplatesNode_low_free_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6f\x13\x31\x10\xbd\xe7\x57\x3c\x55\x54\x6a\x11\x5b\x52\x24\x2e\x16\x1c\x82\xd4\x5b\xe0\xc2\xc7\x25\x8a\x56\x93\xec\x78\x6b\xc9\xf6\xac\xec\xd9\x94\x55\xc9\x7f\x47\xf1\x06\x13\x81\x60\x4f\x3b\xef\x8d\x9f\xe7\xbd\x71\xd3\x34\x0b\xe5\x30\x78\x52\xce\x66\x01\x34\x88\x14\xd8\x20\x4a\xc7\xad\x97\xa7\xd6\x26\xe6\x36\x70\x90\x34\x2d\x00\xe0\xc0\x29\x3b\x89\x06\xf7\xa5\xcc\x63\x08\x94\x26\x83\x4f\xd2\x31\x64\x54\x88\xc5\x45\x3b\x7f\x1f\x92\xc1\x8f\xa6\x14\x98\x65\x67\xba\xfd\xc8\x61\x75\x20\xe7\x69\xe7\xb9\xdd\x4d\xca\x19\xaf\xff\x6c\xf8\x22\x4a\x7e\x26\xcf\x0a\x2f\x71\xbf\x5c\x9e\xff\xdf\x61\xb3\xc1\x9d\x3e\x26\xce\x8f\xe2\x3b\x6c\xb7\x85\x18\x28\x51\x28\x6e\x4e\xdf\x2f\x47\xb5\xed\x8c\x5f\xcc\xbe\xc2\xc0\x69\xcf\x51\xa9\x67\xd8\x24\x01\x7b\x89\xd6\xf5\x63\xe2\x0e\xc1\x45\x17\xc6\x50\x4f\x8d\xd1\xa9\xc1\xd5\xf5\x55\x45\x74\x1a\xd8\xc0\x7a\x21\xad\x58\xa2\xd8\xb3\xc1\x66\xf9\xea\x34\xef\xb6\xe2\x07\xf2\x23\x1b\xbc\x99\x2d\x58\x49\x06\x6f\x67\xed\xcc\x07\x4e\x4e\x27\x83\x27\x4a\xd1\xc5\xbe\xa0\x9e\x76\xec\xab\x17\x2b\x62\xb0\xa3\x54\x4a\x8a\x51\x94\xd4\x49\xac\x7c\xc7\x79\x9f\xdc\xa0\x65\x41\x35\x74\xe0\xf9\x19\x2f\x66\xa5\xbb\x12\xf0\x29\x11\x1c\x8f\xe7\x45\xc1\x65\x58\xe7\xbd\x8b\x3d\xc6\x01\x37\x7f\xc7\x7a\x0d\xcf\x56\x6f\xab\xde\xb7\xd5\xfa\xeb\x03\xde\x17\xdd\xe2\x08\xc7\x63\x25\xd7\xab\x0f\x0f\xeb\xcf\xe6\xe2\xd2\xdf\xec\x7f\x9e\x0b\x6e\x5c\xcc\x4a\x71\xcf\xff\x1a\xf7\x76\xf1\x33\x00\x00\xff\xff\x50\xa3\x2a\xc3\xaf\x02\x00\x00")

func iatemplatesNode_low_free_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_low_free_memoryYml,
		"iatemplates/node_low_free_memory.yml",
	)
}

func iatemplatesNode_low_free_memoryYml() (*asset, error) {
	bytes, err := iatemplatesNode_low_free_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_low_free_memory.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x98, 0x9, 0xb, 0xcb, 0xc2, 0x90, 0xc3, 0xf8, 0x34, 0xb, 0x6c, 0xfc, 0x95, 0x3d, 0x31, 0xdf, 0x74, 0x4, 0xf1, 0x99, 0xbe, 0xd2, 0x14, 0xef, 0xf9, 0xb0, 0xd3, 0x19, 0xb1, 0x8e, 0x4a}}
	return a, nil
}

var _iatemplatesNode_swap_filled_upYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x8e\x1e\x24\xa5\xbe\x26\x0f\x85\x22\x68\x21\x85\xeb\x53\x28\x85\xf4\xe3\x21\x04\xb3\x89\xd7\xb6\xc0\xfa\x60\x25\x27\x67\xae\xf9\xef\xc5\x72\xaa\xa6\x2d\xf5\x93\x77\x46\x3b\xab\x19\x6d\x51\x14\xb3\xc8\xc6\x77\x14\x39\xa8\x19\x50\xc0\x92\x61\x05\xeb\x2a\x2e\xc3\x99\x7c\x59\xeb\xae\xe3\xaa\xec\xfd\x0c\x00\x4e\x2c\x41\x3b\xab\xb0\x4a\x65\xe8\x8d\x21\x19\x14\x3e\xb9\x8a\xd1\xea\xa6\xc5\xf6\xfb\xfa\x33\xc6\x26\x6d\x1b\x5c\xbb\xf8\xc9\x8b\xc2\x8f\x22\x15\xc0\x7c\x85\x02\xf3\x34\xc2\xb0\x71\x32\x94\xdb\x33\xf9\x8f\xc2\x5c\x1e\x86\xc8\x01\xaf\xf1\x37\xf9\xc5\x45\xea\x26\x76\xb1\xb8\xca\xbc\xc4\x6a\xb9\xbc\xfe\xbf\xc7\x6e\x87\x87\xd8\x0a\x87\xd6\x75\x15\xf6\xfb\x44\x78\x12\x32\xc9\xd8\xf8\xfd\x32\x97\x8f\x5d\xf1\x1b\x1f\x6b\x78\x96\x23\xdb\x48\x0d\xa3\x16\x67\x70\x74\xb6\xd6\x4d\x2f\x5c\xc1\xd0\x93\x36\xbd\xc9\x5d\xbd\xd5\x51\xe1\xee\xfe\x2e\x23\x71\xf0\xac\x50\x77\x8e\x62\xc6\x84\x6c\xc3\x0a\xbb\xe5\xab\xf1\xbe\xfb\x8c\x9f\xa8\xeb\x59\xe1\xed\x64\xa1\x76\xa2\xf0\x66\xd2\x0e\x7c\x62\xd1\x71\x50\x38\x93\x58\x6d\x9b\x84\x76\x74\xe0\x2e\x7b\xa9\x9d\x53\x38\x90\xa4\x92\xac\x75\x91\xa2\x76\x36\xf3\x15\x87\xa3\x68\x1f\xd3\x63\xe5\xe4\x81\xe7\x67\xbc\x98\x94\x1e\x52\xc6\x63\x22\xb8\x5c\x30\x86\x0c\x1d\x30\x3d\x37\x7a\x0f\xe3\x84\x11\x5b\xb2\xff\x44\x7b\x9f\xd5\xbe\xad\x37\x5f\x1f\xf1\x2e\xa9\x26\x3f\xb8\x5c\x32\xb9\x59\x7f\x78\xdc\x6c\xd5\xcd\xc8\xdf\xec\x9f\x8b\x13\x6e\x86\x4f\x6b\x83\xb9\xb6\x21\x92\x3d\xf2\xff\x6e\xbc\x98\xfd\x0c\x00\x00\xff\xff\x8e\x33\xd9\xcd\xbd\x02\x00\x00")

func iatemplatesNode_swap_filled_upYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_swap_filled_upYml,
		"iatemplates/node_swap_filled_up.yml",
	)
}

func iatemplatesNode_swap_filled_upYml() (*asset, error) {
	bytes, err := iatemplatesNode_swap_filled_upYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_swap_filled_up.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x69, 0x71, 0x10, 0x9d, 0x32, 0x7a, 0xfa, 0x5d, 0xb0, 0x7f, 0x9f, 0xd2, 0x28, 0x87, 0xad, 0xb0, 0x96, 0x8b, 0x14, 0x2, 0x4f, 0xdc, 0x8d, 0x98, 0x91, 0xbb, 0x34, 0x99, 0xa5, 0x86, 0xa6}}
	return a, nil
}

var _iatemplatesPostgresql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\xbb\x4e\xc3\x40\x10\xec\xfd\x15\x53\x50\xd8\x12\x8e\xa0\xa0\x39\x29\x05\x08\x3a\x8b\x87\x52\x50\x5a\x6b\x7b\x89\x4e\xf2\x3d\xd8\xbb\x18\xac\xe0\x7f\x47\x39\x13\xe3\x82\x82\xee\xe6\x66\x66\x77\x66\xcb\xb2\xcc\x22\x1b\xdf\x53\xe4\xa0\x32\xa0\x84\x25\xc3\x0a\xde\x85\xb8\x17\x0e\xef\x7d\xdd\xb9\x0f\x9b\x01\xc0\xc0\x12\xb4\xb3\x0a\xd7\x09\x86\x83\x31\x24\xa3\xc2\xf3\xac\xdd\xbd\x54\xb8\x7f\x7a\x7d\x4c\x24\x7f\x7a\x51\xf8\x2a\x13\x48\x5a\x34\x23\xf2\xc0\x32\xe8\x96\xeb\xd3\x92\x4b\x58\xd7\x9d\x9f\x67\x22\x8e\x9e\x0b\xe4\x7e\x5f\x1f\x7c\x81\xed\x16\x57\x69\x82\x27\x21\x93\x02\x02\x6f\x4e\x14\x6e\xc2\x9c\x81\x07\x16\x1d\x47\x85\x56\x74\xd4\x2d\xf5\xe9\xbb\xa7\x86\xfb\x1f\xf9\xc9\xe0\x14\x1a\x92\x04\xc9\x5a\x17\x29\x6a\x67\x17\xbe\xe3\xd0\x8a\xf6\x31\x75\x5b\x22\x63\xdd\x4b\xdb\x10\xc9\xb6\x8c\xe3\x11\x17\xf3\xf4\xcd\xba\x0b\xa6\x09\x3a\xa4\xfa\x9b\xc5\x5f\xdd\xde\x3d\x54\x3b\xb5\xf2\x60\x9a\x7e\x0f\xf2\xe7\xf1\x90\xff\x63\x55\x91\x7d\x07\x00\x00\xff\xff\xcc\x1a\xcd\x72\xb8\x01\x00\x00")

func iatemplatesPostgresql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_downYml,
		"iatemplates/postgresql_down.yml",
	)
}

func iatemplatesPostgresql_downYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x3e, 0x9c, 0xfc, 0xfa, 0x63, 0x3b, 0xc9, 0x4b, 0x67, 0xfc, 0xfe, 0x96, 0x5c, 0x4a, 0xb4, 0x98, 0x3d, 0x4, 0x19, 0xb5, 0x68, 0xa9, 0x2d, 0x62, 0x98, 0x10, 0x8a, 0xf5, 0x9c, 0x14, 0xb6}}
	return a, nil
}

var _iatemplatesPostgresql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3f\x8f\xd3\x40\x10\xc5\x7b\x7f\x8a\xa7\x13\x05\x14\x8e\xee\x84\x44\xb1\xa2\x01\x89\x2e\x05\x90\xf2\x74\xb2\xe6\x9c\x49\xb2\xd2\xfe\x63\x66\x92\x23\x3a\xf2\xdd\x51\xd6\x66\x71\xa8\x70\x37\x6f\xde\x3c\xfd\xfc\xb6\xef\xfb\xce\x38\x96\x40\xc6\xea\x3a\xa0\x47\xa2\xc8\x0e\x25\xab\xed\x85\xf5\x47\x18\x84\xd5\x48\x8c\xb7\x1d\x00\x9c\x58\xd4\xe7\xe4\xf0\x50\x47\x3d\xc6\x48\x72\x76\xf8\x3a\x1d\x6c\xbe\xad\xf1\xfd\xe6\x80\x7f\x16\x71\xf8\xd5\xd7\x01\x28\xfb\xe1\x9a\x1d\x49\x8d\x65\x38\x16\xf3\x91\x07\xe5\x31\xa7\xad\xce\x96\x8f\x78\x7c\xc4\xca\x0e\xc2\x7a\xc8\x61\x8b\xa7\xa7\xba\x28\x24\x14\x2b\xe4\xf5\xfb\x03\xda\x6c\xb3\xbe\x40\xda\x4c\xa9\xd8\x49\x8e\xb0\x03\x23\x90\x1a\xe6\xdf\x69\xf6\x63\xf2\xe6\x70\xa7\x3c\xde\x35\xcd\xce\x85\x1d\x76\x21\xd3\x5f\xdf\x89\xc2\x91\x1d\xde\x7f\xb8\xaf\xd2\x2e\x8b\xc3\xc3\xfd\xc4\xac\x7c\x62\xf1\x76\x76\x78\x21\x49\x3e\xed\xab\x1a\xe8\x99\x43\x03\xde\xe5\xec\xf0\x4c\x52\x47\x4a\x29\x1b\x99\xcf\xa9\xed\xb7\xac\xa3\xf8\x62\xb5\xdc\x56\x17\x96\xc5\xfa\xa4\x46\x69\x64\xbc\xbe\xe2\xcd\x94\xbe\x52\x96\x93\x1f\x79\xb8\xb6\x81\xcb\x05\x2f\xa4\x68\x2f\x56\x8d\x15\xfc\xba\x9a\x5b\x06\xed\xf3\xaa\xc5\xaf\x3f\x7d\xfe\xb2\xde\xb8\x45\x24\x2e\x97\xee\x9f\x26\x17\x0c\xb7\xf9\x6f\xff\x03\xe9\x5d\xf7\x3b\x00\x00\xff\xff\xa3\xf1\xa8\xaa\x66\x02\x00\x00")

func iatemplatesPostgresql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_restartedYml,
		"iatemplates/postgresql_restarted.yml",
	)
}

func iatemplatesPostgresql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x18, 0x21, 0x4d, 0x67, 0x87, 0x50, 0x47, 0xf5, 0xdb, 0x5b, 0x2b, 0xe7, 0x5f, 0x89, 0x8d, 0x37, 0xb4, 0x4f, 0x9c, 0x2f, 0x11, 0x9b, 0xe1, 0x67, 0x2, 0xde, 0x69, 0x93, 0x37, 0xf0, 0xd0}}
	return a, nil
}

var _iatemplatesPostgresql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8b\xdb\x40\x0c\xbd\xe7\x57\xbc\x86\x2e\xec\x2e\x75\x9a\x3d\x14\xca\x40\x0b\x29\xec\x2d\x85\x96\xa5\xbd\x84\x60\xb4\x8e\xec\x0c\x78\x34\xee\x8c\xec\x26\x24\xe9\x6f\x2f\x9e\x24\xae\x4b\x3f\xe6\xa6\x27\x3d\xcd\x7b\x92\xb2\x2c\x9b\x28\xbb\xa6\x26\xe5\x68\x26\x40\x06\x21\xc7\x06\x8d\x8f\x5a\x05\x8e\xdf\xea\x5c\xbd\xcf\x1d\xc9\x3e\x2f\xbc\x08\x17\x6a\xbd\xc4\x09\x00\x74\x1c\xa2\xf5\x62\xf0\x90\xc2\xd8\x3a\x47\x61\x6f\xf0\xe9\xcc\x7d\xfa\xbc\xc4\x88\x02\x2b\x68\x23\xa7\x52\xde\x35\xc1\xe0\x98\xa5\x20\x31\x6f\x9b\x2a\x8f\x4a\x9a\x53\xa1\xb6\xb3\xda\xff\xd6\x8a\x1e\x36\xa4\xbd\xa0\x17\x3f\xa6\x57\x99\xb3\xfb\xe3\x55\xdc\xf4\x74\x77\xe9\xf0\x1e\x3d\x9f\x55\xad\x54\x31\x77\xb4\x1b\x8b\xc5\x3d\x56\x2b\xcc\x74\x1b\x38\x6e\x7d\xbd\xc1\x7a\x8d\xd7\x78\x98\xcf\x13\xb9\xa1\x40\x2e\x79\xef\xdf\xd5\xff\x50\x7c\xc1\x47\xf6\x16\x68\x38\x14\x2c\x4a\x15\xa3\x0c\xde\xf5\x2e\x4b\x5b\xb5\x81\x37\x70\xb4\xb3\xae\x75\x03\xab\x15\xab\x06\xd3\x9b\xe9\x80\xe8\xbe\x61\x83\xb2\xf6\xa4\x03\x16\x48\x2a\x36\x58\xcd\x5f\xf5\xb2\xd6\x03\xde\x51\xdd\xb2\xc1\xdb\xb3\xd2\xd2\x07\x83\x37\xe7\xde\x91\x3b\x0e\x56\xf7\x06\xdf\x29\x88\x95\x2a\xa1\x35\x3d\x73\x3d\x78\x29\xbd\x37\x78\xa6\x90\x42\x12\xf1\x4a\x69\x1e\xd7\xfc\x86\x63\x11\x6c\xa3\x69\x87\xc3\x32\x80\x8f\x3e\x30\x74\x4b\xf2\xc7\xd8\x6e\xe0\xcb\x7f\xad\x97\x02\x5f\x56\x0c\x2f\x38\x1c\xf0\xf2\xac\x66\x16\x39\x74\xb6\xe0\xbc\x1f\x2c\x4e\xa7\xe1\x9b\xaf\x8b\xe5\x97\x47\xbc\x4b\xa5\xc9\xe8\x38\xb9\x5c\x7c\x78\x5c\x3e\x99\x51\x9f\x5f\xd9\xbf\x1d\x9a\x7a\x8f\xfe\x48\x7f\x93\x74\x6b\x25\x2a\x49\xc1\xff\x91\x73\x37\xf9\x19\x00\x00\xff\xff\x08\x1d\x5b\xf5\x04\x03\x00\x00")

func iatemplatesPostgresql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_too_many_connectionsYml,
		"iatemplates/postgresql_too_many_connections.yml",
	)
}

func iatemplatesPostgresql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x31, 0xf4, 0xed, 0x39, 0xff, 0x98, 0xc4, 0x6, 0xf5, 0x2a, 0xd8, 0xe0, 0x2, 0xd, 0xde, 0x22, 0x7c, 0xb2, 0xed, 0x16, 0x0, 0xa6, 0xdd, 0x9d, 0x87, 0xc5, 0x7e, 0xb4, 0x2d, 0xa2, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"iatemplates/mongodb_connections_memory_usage.yml": iatemplatesMongodb_connections_memory_usageYml,
	"iatemplates/mongodb_high_memory_usage.yml":        iatemplatesMongodb_high_memory_usageYml,
	"iatemplates/mongodb_restarted.yml":                iatemplatesMongodb_restartedYml,
	"iatemplates/mysql_down.yml":                       iatemplatesMysql_downYml,
	"iatemplates/mysql_restarted.yml":                  iatemplatesMysql_restartedYml,
	"iatemplates/mysql_too_many_connections.yml":       iatemplatesMysql_too_many_connectionsYml,
	"iatemplates/node_high_cpu_load.yml":               iatemplatesNode_high_cpu_loadYml,
	"iatemplates/node_low_free_memory.yml":             iatemplatesNode_low_free_memoryYml,
	"iatemplates/node_swap_filled_up.yml":              iatemplatesNode_swap_filled_upYml,
	"iatemplates/postgresql_down.yml":                  iatemplatesPostgresql_downYml,
	"iatemplates/postgresql_restarted.yml":             iatemplatesPostgresql_restartedYml,
	"iatemplates/postgresql_too_many_connections.yml":  iatemplatesPostgresql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"iatemplates": {nil, map[string]*bintree{
		"mongodb_connections_memory_usage.yml": {iatemplatesMongodb_connections_memory_usageYml, map[string]*bintree{}},
		"mongodb_high_memory_usage.yml":        {iatemplatesMongodb_high_memory_usageYml, map[string]*bintree{}},
		"mongodb_restarted.yml":                {iatemplatesMongodb_restartedYml, map[string]*bintree{}},
		"mysql_down.yml":                       {iatemplatesMysql_downYml, map[string]*bintree{}},
		"mysql_restarted.yml":                  {iatemplatesMysql_restartedYml, map[string]*bintree{}},
		"mysql_too_many_connections.yml":       {iatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		"node_high_cpu_load.yml":               {iatemplatesNode_high_cpu_loadYml, map[string]*bintree{}},
		"node_low_free_memory.yml":             {iatemplatesNode_low_free_memoryYml, map[string]*bintree{}},
		"node_swap_filled_up.yml":              {iatemplatesNode_swap_filled_upYml, map[string]*bintree{}},
		"postgresql_down.yml":                  {iatemplatesPostgresql_downYml, map[string]*bintree{}},
		"postgresql_restarted.yml":             {iatemplatesPostgresql_restartedYml, map[string]*bintree{}},
		"postgresql_too_many_connections.yml":  {iatemplatesPostgresql_too_many_connectionsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
