// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iatemplates/mongodb_connections_memory_usage.yml (947B)
// iatemplates/mongodb_high_memory_usage.yml (896B)
// iatemplates/mongodb_restarted.yml (723B)
// iatemplates/mysql_down.yml (541B)
// iatemplates/mysql_restarted.yml (797B)
// iatemplates/mysql_too_many_connections.yml (905B)
// iatemplates/node_high_cpu_load.yml (807B)
// iatemplates/node_low_free_memory.yml (805B)
// iatemplates/node_swap_filled_up.yml (819B)
// iatemplates/postgresql_down.yml (558B)
// iatemplates/postgresql_restarted.yml (732B)
// iatemplates/postgresql_too_many_connections.yml (890B)

package data

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iatemplatesMongodb_connections_memory_usageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x5d\x6b\xdb\x30\x14\x7d\xcf\xaf\x38\x84\x15\x92\x31\xe7\xa3\x5b\x18\x08\x3a\x48\x59\xdf\x62\x18\xac\xdb\x4b\x08\x46\xb6\xaf\x6d\x6d\x96\x64\x24\x39\xad\xc9\xf2\xdf\x87\x14\xdb\x4d\x37\x06\xcb\x4b\xa4\xa3\xab\xa3\x73\xcf\x3d\x8e\xa2\x68\xe2\x48\x36\x35\x77\x64\xd9\x04\x88\xa0\xb8\x24\x86\x46\xca\x44\x6a\x55\xea\x3c\x4d\x32\xad\x14\x65\x4e\x68\x65\x13\x49\x52\x9b\x2e\x69\x2d\x2f\x69\x02\x00\x47\x32\x56\x68\xc5\xb0\x0e\x5b\xdb\x4a\xc9\x4d\xc7\x10\x87\x42\xb4\x96\x72\xa4\x1d\x62\xcf\xf5\xf9\x1e\x57\x5c\xa1\x9e\x9e\x1b\xc3\xf0\x2b\x0a\x9b\x70\xdd\x57\xcf\x94\xce\x29\xf1\x4a\xe6\x98\x0d\x32\xac\xbd\x56\x72\xf2\xeb\xc4\x75\x0d\xdd\x4d\xb3\xd6\x18\x52\x6e\x7a\x9e\xe3\x2d\xd6\xab\xdb\x0f\xfd\x5f\x4f\xba\x84\x56\xaf\x29\xc3\xba\x6f\x25\x26\xf9\xa8\x1d\xaf\x93\xb4\x73\x64\xe7\xfd\x1d\x4f\xb0\xea\xd7\x9f\xb0\xdf\x63\xe1\x2a\x43\xb6\xd2\x75\x8e\xc3\x21\x1c\x34\xdc\x70\x19\x4c\xf3\xbf\xc1\xb8\xb1\xac\xc7\xaf\x2c\xd9\xa2\x21\x93\x91\x72\xbc\x24\x14\x46\x4b\xef\x46\x21\xca\xd6\x50\x0e\xc9\x9f\x85\x6c\xe5\x78\xab\x55\xc2\x31\x4c\x6f\xa6\x23\xe2\x7b\x65\x28\x6a\xcd\xdd\x88\x19\xae\x4a\x62\xd8\xaf\xde\x79\xbd\x87\x11\x3f\xf2\xba\x25\x86\xdb\x4d\x40\x0a\x6d\x18\x36\x17\x6e\x4b\x47\x32\xc2\x75\x0c\x4f\xdc\x28\xa1\xca\x80\xd6\x3c\xa5\x7a\xec\xc5\x89\xec\x27\x39\x86\x2f\x71\x1c\x7d\x5c\xbf\xdf\x0c\x70\x25\x54\x69\x13\xa7\x93\x5c\x33\x4c\x3b\xb2\x17\x71\x5c\x29\xed\x78\x98\xca\xc0\x90\x93\xcd\x8c\x68\x5c\x48\xc6\x38\x5d\xe0\xb1\x12\x16\x43\xe0\x20\x2c\x94\x76\x28\x84\x12\xb6\xa2\x9c\xa1\x72\xae\xb1\x6c\xb9\xfc\x21\x0c\x5f\x78\xb3\xb4\xe2\x8b\x4c\xcb\x65\x6a\xf4\x93\xa5\xe5\x1f\x82\x80\x58\x1b\x82\xab\xb8\xfa\x6b\x44\x37\xd0\xc5\x7f\x84\xd0\x47\xe3\x74\xc2\x9b\x8b\x01\x8b\x31\x24\x38\x9f\xc7\x47\xbe\x6f\x77\xdf\x1e\x70\x17\xea\x82\xb1\xd7\x87\xbb\xed\xfd\xc3\xee\x2b\xbb\x22\x79\x39\x7d\xf9\x18\xfa\x87\x2b\x51\x56\x90\x83\x28\x1f\x83\xb4\x7b\xa5\x66\x26\x94\x75\x5c\x65\xf4\x2f\x51\xf3\xc9\xef\x00\x00\x00\xff\xff\xfb\xd1\x7d\x9b\xb3\x03\x00\x00")

func iatemplatesMongodb_connections_memory_usageYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_connections_memory_usageYml,
		"iatemplates/mongodb_connections_memory_usage.yml",
	)
}

func iatemplatesMongodb_connections_memory_usageYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_connections_memory_usageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_connections_memory_usage.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3f, 0xe3, 0x57, 0x2c, 0xfc, 0x0, 0xa9, 0x38, 0x49, 0xd7, 0x8b, 0x2e, 0xac, 0xb8, 0x52, 0x2f, 0x83, 0xe6, 0xfa, 0xa4, 0xc5, 0x4b, 0xf2, 0xb7, 0xe, 0xf, 0x3, 0x17, 0xaa, 0x78, 0x35, 0x7}}
	return a, nil
}

var _iatemplatesMongodb_high_memory_usageYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x42\x0f\x92\x52\xe7\xa3\xed\xd1\x22\x68\x21\x47\xef\x2d\x86\x42\xaf\x7d\x09\xc1\xc8\xf6\xda\x56\x6b\x49\x46\x5a\xe7\xce\x5c\xef\xbf\x17\x2b\xb6\x2f\xd7\xd2\xbc\x44\x9a\xdd\x9d\x9d\x5d\x8d\xa3\x28\x9a\x31\xe9\xa6\x96\x4c\x5e\xcc\x80\x08\x46\x6a\x12\x68\xb4\x4e\xb4\x35\xa5\xcd\xd3\xa4\x52\x65\x95\x68\xd2\xd6\x75\x49\xeb\x65\x49\x33\x00\x38\x91\xf3\xca\x1a\x81\x6d\xb8\xfa\x56\x6b\xe9\x3a\x81\x38\x24\xa2\xf5\x94\x23\xee\x19\xbe\xdc\x40\x19\xcf\xd2\x64\xe4\x43\x2a\x3d\x34\x4e\xe0\x77\x14\x2e\xa1\x12\x69\x87\x85\xb1\x39\x25\x7d\xf7\x25\x16\x63\x6b\xef\xfb\xc6\x89\x23\xaf\x72\x32\x8c\xd7\xd8\x6e\xde\xbe\x1f\xfe\x96\x03\xc1\x1a\xd6\xbc\x2c\x0f\xe7\x41\x71\x4c\xfa\xce\xb2\xac\x93\xb4\x63\xf2\x63\x4d\xcf\xb0\x19\xce\x9f\x71\x38\x60\xc5\x95\x23\x5f\xd9\x3a\xc7\xf1\x18\x02\x8d\x74\x52\x87\xa5\xf4\xbf\x71\x31\x53\xda\x80\x5f\x4c\xbe\x43\x43\x2e\x23\xc3\xb2\x24\x14\xce\x6a\x64\xd6\x14\xaa\x6c\x1d\xe5\xd0\xf2\x41\xe9\x56\x4f\x55\xad\x51\x2c\x30\xbf\x9a\x4f\x08\x77\x0d\x09\x14\xb5\x95\x3c\x61\x4e\x9a\x92\x04\x0e\x9b\x37\xbd\xde\xe3\x84\x9f\x64\xdd\x92\xc0\xc7\xf3\x08\x85\x75\x02\xd7\x67\x6e\x4f\x27\x72\x8a\x3b\x81\x7b\xe9\x8c\x32\x65\x40\x6b\x99\x52\x3d\xcd\xc2\x2a\xfb\x45\x2c\xf0\x35\x8e\xa3\x0f\xdb\x77\xd7\x23\x5c\x29\x53\xfa\x84\x6d\x92\x5b\x81\x79\x47\xfe\x2c\x4e\x1a\x63\x59\xb2\xb2\x66\x62\xc8\xc9\x67\x4e\x35\x1c\x0c\x30\xbd\x24\x70\x57\x29\x8f\xd1\x50\x50\x1e\xc6\x32\x0a\x65\x94\xaf\x28\x17\xa8\x98\x1b\x2f\xd6\xeb\x9f\xca\xc9\x55\xbf\x2c\x6b\xe4\x2a\xb3\x7a\x9d\x3a\x7b\xef\x69\xfd\x97\x20\x20\xb6\x8e\xc0\x95\x34\xff\x3c\xd1\x15\x6c\xf1\xc2\x6b\x69\x37\xd9\xcd\x93\x3b\xa9\x8c\x7a\x5b\x3c\x3e\xe2\xd5\x79\xf8\xd5\x64\x10\x3c\x3d\x4d\x0d\x7e\xec\xf6\xdf\x6f\xf1\x29\xe4\x85\xa5\x5e\x06\xf7\xbb\x9b\xdb\xfd\x37\x71\x41\xf2\x1c\x7d\xf6\xfb\xd0\xb4\xff\x4a\xa0\x47\x41\xbd\x05\x16\xa3\xed\xff\xa7\x62\x39\xfb\x13\x00\x00\xff\xff\x65\xc8\xea\x39\x80\x03\x00\x00")

func iatemplatesMongodb_high_memory_usageYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_high_memory_usageYml,
		"iatemplates/mongodb_high_memory_usage.yml",
	)
}

func iatemplatesMongodb_high_memory_usageYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_high_memory_usageYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_high_memory_usage.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xe3, 0x2b, 0x12, 0xd7, 0x9d, 0x6f, 0x25, 0x69, 0xa1, 0xe5, 0x75, 0x73, 0x4d, 0x2d, 0xbf, 0x7, 0x66, 0x97, 0x17, 0xe8, 0x68, 0x47, 0xc9, 0x11, 0xad, 0xf7, 0x9d, 0x1a, 0x15, 0x8e, 0x1a}}
	return a, nil
}

var _iatemplatesMongodb_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xd3\x40\x14\xc4\xef\xf9\x14\xa3\x88\x03\x1c\xec\x34\xaa\x00\x69\xc5\x85\x0a\x6e\x8d\x40\x94\x5b\x55\x59\x2f\xf6\x4b\xbc\xe0\xfd\xa3\x7d\x2f\x09\x51\xc9\x77\x47\x59\xc7\x4b\xdb\x53\x7d\xdb\xd9\xd1\xe8\xb7\x33\xae\xaa\x6a\xa6\xec\xe2\x40\xca\x62\x66\x40\x05\x4f\x8e\x0d\xa2\x73\x8d\x0b\x7e\x1b\xba\x75\x93\x58\x94\x92\x72\x37\x03\x80\x3d\x27\xb1\xc1\x1b\x2c\xf3\x51\x76\xce\x51\x3a\x1a\xac\xce\xee\x2f\x37\xf8\xf1\xcc\xcd\x7f\x62\x32\xf8\x5b\xe5\x03\x30\x45\x5a\x2f\x4a\xbe\xe5\x66\x17\xd5\x3a\x6e\x84\xdb\xe0\x3b\xb9\xb8\x3e\xe1\xfe\x1e\xb5\xf6\x89\xa5\x0f\x43\x87\x87\x87\x7c\x11\x29\x91\xcb\x94\xe7\x6f\x22\x2d\xb6\x8b\xfe\x04\xe9\x6e\x4c\xc5\x26\x05\x07\xed\x19\x03\x89\xe2\xf2\x9c\x62\xdf\x79\xab\x06\x73\xe1\x76\x5e\x34\x3d\x46\x36\xd8\x0c\x81\xfe\xfb\xf6\x34\xec\xd8\xe0\xfa\xc3\x55\x96\x36\x21\x19\x2c\xaf\x46\x66\xe1\x3d\x27\xab\x47\x83\x03\x25\x6f\xfd\x36\xab\x03\xad\x79\x28\xc0\x6a\xdb\xdf\xac\x06\xdf\x57\xab\xea\xe3\xf2\xfa\xfd\x24\xf7\xd6\x6f\xa5\xd1\xd0\x74\xc1\x60\x7e\x64\x19\x31\xc8\xfb\xa0\xa4\x36\xf8\x92\xd0\xb1\xb4\xc9\x46\xcd\xf5\x97\x4e\x81\x9f\xbd\x15\x4c\x33\xc2\x0a\x7c\x50\x6c\xac\xb7\xd2\x73\x67\xd0\xab\x46\x31\x8b\xc5\x2f\x9b\xa8\x8e\x9c\xda\xe0\xa9\x6e\x83\x5b\xac\x53\x38\x08\x2f\x5e\x00\xa1\x4c\x39\xad\x84\xc7\x47\xbc\x19\x1f\x53\x0b\xa7\xbd\x6d\xb9\x39\x97\x8f\xd3\x09\x07\x12\x94\x1f\x24\x1b\x73\x4f\xe7\xab\xcb\xa8\xa0\x6d\xa8\x4b\xf6\xed\xe7\x9b\xaf\xb7\x77\xe6\x49\x24\x4e\xa7\xd9\x8b\xe1\x56\xdf\x46\x80\xe7\xe1\x6f\x5f\xc1\xf3\x6e\xf6\x2f\x00\x00\xff\xff\xb3\xfd\x78\x25\xd3\x02\x00\x00")

func iatemplatesMongodb_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMongodb_restartedYml,
		"iatemplates/mongodb_restarted.yml",
	)
}

func iatemplatesMongodb_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMongodb_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mongodb_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc2, 0xad, 0x8b, 0x8b, 0x35, 0xde, 0xc1, 0x6f, 0x6b, 0xc1, 0x35, 0xc, 0xcc, 0x8c, 0x5b, 0x32, 0x5b, 0xa, 0x90, 0x86, 0x6a, 0x1d, 0x79, 0xec, 0x26, 0x71, 0x11, 0x1e, 0xe6, 0xab, 0x6c, 0x96}}
	return a, nil
}

var _iatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\x4b\x6f\xda\x40\x10\xbe\xfb\x57\x7c\x42\x3d\x80\x54\xdb\x45\x15\xaa\xb4\x12\x87\x56\xed\x0d\xda\x46\x44\xca\xd1\x5a\xd6\x43\xbc\x89\xf7\x91\xdd\x01\x62\x11\xff\xf7\x88\x05\x13\xc4\x29\xb7\xdd\x79\x7c\xaf\xc9\xf3\x3c\x63\x32\xbe\x95\x4c\x51\x64\x40\x0e\x2b\x0d\x09\x78\x63\x2a\xd3\xc5\x97\xb6\xaa\xdd\xde\x66\x00\xb0\xa3\x10\xb5\xb3\x02\xd3\xf4\x8d\x5b\x63\x64\xe8\x04\x96\xdd\xea\x6e\x81\xdf\xff\x1e\xfe\xa6\x3a\xbd\xfa\x20\xf0\x96\xa7\x4f\x1a\xc3\xba\xc3\x38\x52\xd8\x69\x45\xd5\x11\xfe\x2b\xac\xab\x87\xe7\xd0\xe0\xce\xd3\x04\xe3\x13\xe9\xd6\x4f\x30\x9f\xe3\x5b\x02\xf1\x32\x48\x93\xd4\x01\x1b\x17\x04\x66\xf1\xa4\x80\x76\x14\x34\x77\x02\x2a\x68\xd6\x4a\xb6\xa9\xdc\xca\x35\xb5\xe7\x71\x80\xb5\x7a\x26\x16\xf8\xbf\x5c\xe6\x3f\xa6\xdf\x67\x43\xb9\xd1\xf6\x31\x56\xec\xaa\xda\x09\x8c\x3a\x8a\xa3\xd4\x91\xd6\x3a\x96\xac\x9d\xbd\x20\xd4\x14\x55\xd0\x9e\x93\xf7\x8b\x2f\xe0\xbe\xd1\x11\x43\x78\xd0\x11\xd6\x31\x36\xda\xea\xd8\x50\x2d\xd0\x30\xfb\x28\xca\xf2\x49\x07\x59\x78\x0a\xca\x59\x59\x28\x67\xca\x75\x70\xfb\x48\xe5\x8d\x20\x9c\x73\xd4\x36\xb2\xb4\x8a\x70\x38\xe0\xcb\xc9\x4a\x71\x9d\x1d\xfa\xfe\xc8\x75\x8c\xbb\xb8\xac\x2e\x7e\xfe\xfa\xb3\x58\x89\xab\x1d\xf4\xfd\xc7\x01\x6e\xef\x84\xf1\x27\x58\x26\xd9\x7b\x00\x00\x00\xff\xff\x15\xee\xc0\xf4\x1d\x02\x00\x00")

func iatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_downYml,
		"iatemplates/mysql_down.yml",
	)
}

func iatemplatesMysql_downYml() (*asset, error) {
	bytes, err := iatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x62, 0xa3, 0x8c, 0xd2, 0xb2, 0x4, 0x58, 0x9b, 0x84, 0xf, 0xfd, 0x1e, 0x35, 0x5d, 0x7b, 0xbb, 0xe, 0xff, 0x1a, 0x15, 0xc4, 0xae, 0x7d, 0xa1, 0xeb, 0xa1, 0x98, 0x39, 0x4d, 0x2a, 0x13, 0x63}}
	return a, nil
}

var _iatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4b\x8f\xd3\x4c\x10\xbc\xe7\x57\x94\xf2\x7d\x07\x90\xd6\x79\x68\x79\x48\x23\x2e\x20\x71\x4b\x24\x20\xdc\xa2\xc8\xea\xd8\x1d\x7b\xd8\x79\x98\xe9\x4e\x82\xb5\xe4\xbf\xa3\x4c\x12\xb3\xbb\x27\x7c\xf2\xd4\xd4\x54\x57\x57\x77\x51\x14\x23\x65\xdf\x39\x52\x16\x33\x02\x0a\x04\xf2\x6c\xd0\x79\x5f\xfa\x5e\x7e\xba\x32\xb1\x28\x25\xe5\x7a\x04\x00\x07\x4e\x62\x63\x30\x98\xe7\xa3\xec\xbd\xa7\xd4\x1b\x2c\xfb\xd5\xd7\x05\xbe\x3d\xe3\xf2\xaf\x2e\x19\xfc\x2e\xf2\x01\xb8\xc8\x35\x2e\x6e\xc9\x95\xa2\xa4\x7b\x29\xf7\x9d\x5a\xcf\x57\xc2\x07\xac\xd7\x98\x68\x9b\x58\xda\xe8\x6a\x6c\x36\xf9\xa2\xa3\x44\x3e\x9b\x3b\x7f\x37\x83\x03\xed\x8a\x3f\xf1\xb2\xe2\x2a\x86\x5a\xb0\x4b\xd1\x43\x5b\x86\x23\x51\x5c\xfb\x18\xe8\xfb\x60\xd5\x60\x2c\x5c\x8d\x07\x4c\xfb\x8e\x0d\x76\x2e\x92\xe2\x3f\xb4\x54\x3d\x40\x23\xb6\x0c\xda\x3a\x3e\xff\x76\x94\x84\xb3\xe6\x2d\xb5\x3b\xc4\x64\x1b\x1b\xc8\xe5\xd7\x38\x92\xc0\x86\xbf\x65\x12\x85\x86\x0d\xd6\xb3\x3b\xbc\x99\xcd\x36\x03\x7e\x20\xb7\x67\x83\xfb\x77\xb3\x0c\xed\x62\x32\x98\xcf\xe4\x92\x2a\x1f\x38\x59\xed\x0d\x8e\x94\x82\x0d\x4d\x46\x1d\x6d\xd9\x0d\x39\xa8\xad\x1e\x58\x0d\xbe\x2c\x97\xc5\xfb\xf9\xfd\xdb\x1b\xdc\xda\xd0\x48\xa9\xb1\xac\xa3\xc1\xb8\x67\xb9\x74\x47\x21\x44\x25\xb5\x31\x0c\x0a\x35\x4b\x95\x6c\xa7\x79\x9c\xc3\x94\x80\xef\xad\x95\xa1\x3d\x58\x41\x88\x8a\x9d\x0d\x56\x5a\xae\x0d\x5a\xd5\x4e\xcc\x74\xfa\xc3\x26\x9a\x74\x9c\xaa\x18\x68\x52\x45\x3f\xdd\xa6\x78\x14\x9e\xbe\x30\x84\xeb\x6a\xd8\x20\x4a\xa1\x62\x3c\x3e\xe2\xff\x4b\x2b\x13\xe1\x74\xb0\x15\x97\xe7\x89\xe2\x74\xca\xd9\x0d\xeb\x96\x89\x39\xa5\xf3\x95\x5c\x67\x4a\x4d\x9c\x0c\xca\x8b\x8f\x9f\x3e\x2f\x56\xe6\x89\x24\x4e\xa7\xd1\x8b\x6d\xb8\x94\x7f\x2e\xfd\xea\x1f\xdc\xbc\x1e\xfd\x09\x00\x00\xff\xff\x8f\x7e\x8e\x0c\x1d\x03\x00\x00")

func iatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_restartedYml,
		"iatemplates/mysql_restarted.yml",
	)
}

func iatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x27, 0x4b, 0xac, 0x9d, 0x95, 0x3d, 0xc5, 0x53, 0xc8, 0x5e, 0x96, 0xef, 0x2d, 0x8f, 0x50, 0x39, 0xf7, 0x98, 0xa7, 0xd, 0x16, 0x16, 0x11, 0x6c, 0x2a, 0x9, 0x59, 0x5d, 0x1a, 0x7c, 0xa1, 0x4f}}
	return a, nil
}

var _iatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\x51\x6b\xdb\x4c\x10\x7c\xf7\xaf\x18\xc2\x17\x48\x3e\x6a\x3b\xa1\x84\x96\x83\x16\x52\xc8\x9b\x0d\x2d\x69\xfb\x62\x8c\x58\x4b\x6b\xe9\x52\xdd\xae\x7a\xb7\x72\x22\xd2\xfc\xf7\x22\x39\x56\xdd\xb4\x54\x4f\xba\xb9\xd5\xee\xcc\xec\x68\x3a\x9d\x4e\x8c\x43\x53\x93\x71\x72\x13\x60\x0a\xa1\xc0\x0e\x4d\x08\x59\xe8\xd2\xf7\x3a\x33\xd5\x2c\x90\x74\x59\xae\x22\x9c\x9b\x57\x49\x13\x00\xd8\x71\x4c\x5e\xc5\xe1\x72\x38\xa6\x36\x04\x8a\x9d\xc3\xb2\xbb\xfd\xb4\xc0\x51\x35\xbc\xa0\x4d\x3c\x54\xf1\x43\x13\x1d\x7e\x4c\x87\x03\x10\xe8\x21\xd3\x1d\xc7\xcc\x7c\xe0\xb3\xfd\xc0\xb2\xd6\x0d\xd5\x59\x32\xb2\x36\x65\x56\x45\xa6\x22\x1d\xa6\x73\xb1\xba\x0a\xeb\x73\xcc\xe1\x4b\xd1\xe8\xa5\xc4\xd9\x9d\x6e\xce\x0f\xfd\x8e\x3b\xec\x28\x7a\xda\xd4\x9c\xb2\x7e\xcc\x4b\xfa\xc0\xff\xb8\xbc\xb8\x78\x7e\x7f\x8f\xd5\x0a\xb3\x7e\x58\xaa\xb4\x2e\xb0\x5e\x0f\x17\x0d\x45\x0a\x83\x31\xfd\x73\x30\x67\x2c\x7b\xc6\x8f\xc4\x5f\xa3\xe1\x98\xb3\x18\x95\x8c\x6d\xd4\xd0\x1b\xb1\xf5\x65\x1b\xb9\xe8\xd5\xfa\xd0\x86\xf1\xab\x56\xbc\x39\x9c\x9c\x9e\x8c\x88\x75\x0d\x3b\x6c\x6b\x25\x1b\xb1\x48\x52\xb2\xc3\xea\xe2\x55\xcf\x77\x3d\xe2\x3b\xaa\x5b\x76\x78\xbb\x97\xb0\xd5\xe8\x70\xb5\xef\x9d\x78\xc7\xd1\x5b\xe7\x70\x4f\x51\xbc\x94\x03\x5a\xd3\x86\xeb\x51\x8b\xf9\xfc\x1b\x9b\xc3\xc7\xe5\x72\xfa\xe6\xf2\xf5\xd5\x01\xae\xbc\x94\x29\x33\xcd\x0a\x75\x38\xe9\x38\xed\xc9\x91\x88\x1a\x0d\xee\x1d\x3a\x14\x9c\xf2\xe8\x1b\x1b\x32\x30\x6e\x14\xf8\x5c\xf9\x84\x43\xa8\xe0\x13\x44\x0d\x5b\x2f\x3e\x55\x5c\x38\x54\x66\x4d\x72\xf3\xf9\x9d\x8f\x34\xeb\xcd\x52\xa1\x59\xae\x61\xbe\x89\x7a\x9f\x78\xfe\x82\x10\xb0\xd4\xc8\xb0\x8a\xe4\x8f\x15\x9d\x42\xb7\x7f\x89\x1b\x45\x7e\x8e\x1c\x54\xf0\xf8\x88\xff\xf6\xd2\x67\x89\xe3\xce\xe7\x9c\xf5\x5b\xc4\xd3\xd3\x38\xe1\xeb\xf5\xe2\xcb\x0d\xde\x0d\xa5\x83\xab\xc7\x97\x8b\xeb\x0f\x37\x8b\x5b\x77\xd4\xe7\xd7\xed\x8b\xcc\x9b\x2a\xfa\x5f\xe5\x37\x36\x67\x5e\x92\x91\xe4\xfc\x0f\x26\xe7\x93\x9f\x01\x00\x00\xff\xff\x92\x9b\x9a\x24\x89\x03\x00\x00")

func iatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_too_many_connectionsYml,
		"iatemplates/mysql_too_many_connections.yml",
	)
}

func iatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0x2c, 0x9e, 0x2d, 0x70, 0xa3, 0x90, 0xf7, 0xd2, 0x58, 0xbe, 0x7e, 0xa7, 0xdf, 0xf7, 0xd8, 0xe7, 0x93, 0x1c, 0xd1, 0x11, 0x9f, 0xec, 0xb7, 0xdd, 0xee, 0x3e, 0x57, 0x64, 0xe4, 0x78, 0x68}}
	return a, nil
}

var _iatemplatesNode_high_cpu_loadYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xdf\x8b\xd3\x40\x10\x7e\xef\x5f\xf1\x51\x3c\x68\xc5\xf4\x07\x52\x94\x85\x13\xaa\xdc\x5b\x4f\x0e\xf4\x7c\x29\x25\x4c\xb3\xd3\x64\x35\xbb\x1b\x76\x27\xbd\x2b\xb5\xff\xbb\x24\x6d\xd7\x43\xd1\x3e\x75\xbf\x99\x7c\x3f\x66\x26\xcb\xb2\x81\xb0\x6d\x6a\x12\x8e\x6a\x00\x64\x70\x64\x59\xa1\xb1\x36\x77\x5e\x73\x5e\x99\xb2\xca\x8b\xa6\xcd\x6b\x4f\x7a\x00\x00\x7b\x0e\xd1\x78\xa7\x30\xef\x9f\xb1\xb5\x96\xc2\x41\xe1\xb3\xd7\x8c\xae\x1d\x9f\x1e\x1e\x91\xda\xf9\xb9\x09\x0a\x3f\xb3\xfe\x01\x8c\xe6\xc8\x40\xfb\x12\xdb\xc3\xa8\x17\xe8\xf4\xc6\x18\x05\x12\x3e\x03\x9d\x58\xe4\xc2\x3b\x1d\x73\xf1\x42\xf5\xd1\x7a\xcd\xb7\x43\xa3\x6b\x1e\x9e\xd6\x0b\xbb\x19\x8f\xc7\x17\xb6\xd7\x98\xcf\x66\x97\xff\x1f\xb0\x5e\x63\x22\x55\xe0\x58\xf9\x5a\x63\xb3\xe9\x0b\x0d\x05\xb2\x7d\xb6\xee\x77\xcd\x97\xda\x2e\xf8\x8b\x1c\x4b\x34\x1c\x0a\x76\x42\x25\x63\x17\xbc\x45\xe1\xdd\xce\x94\x6d\x60\x0d\x4b\xcf\xc6\xb6\x36\x7d\xd5\x3a\x23\x0a\xc3\x9b\x61\x42\xe4\xd0\xb0\xc2\xae\xf6\x24\x09\x0b\xe4\x4a\x56\x58\xcf\xde\x74\x7e\x37\x09\xdf\x53\xdd\xb2\xc2\xfb\x73\x84\x9d\x0f\x0a\x8b\x33\x77\xe4\x3d\x07\x23\x07\x85\x27\x0a\xce\xb8\xb2\x47\x6b\xda\x72\x9d\xb2\x88\x29\x7e\xb0\x28\x3c\xdc\xdf\x67\xef\xe6\x6f\x17\x57\xb8\x32\xae\xec\x46\x97\x6b\xaf\x30\x3c\x70\x3c\x9b\x23\xe7\xbc\x90\x18\xef\x12\x83\xe6\x58\x04\xd3\x48\xbf\xce\xb4\x22\xe0\x6b\x65\x22\xae\x77\x01\x13\xe1\xbc\x60\x67\x9c\x89\x15\x6b\x85\x4a\xa4\x89\x6a\x3a\xfd\x6e\x02\x4d\xba\x61\x79\x47\x93\xc2\xdb\xe9\x36\xf8\xa7\xc8\xd3\x3f\x0c\x01\xc7\x23\x5e\x9d\xbd\x4f\xd2\xce\x71\x3a\xa5\x43\xe9\x24\xac\x0f\x0c\xa9\xc8\xfd\xb5\xc6\x9b\xc4\xf3\x6d\xb9\x7a\xbc\xc3\x6d\xcf\xd7\xcf\x0e\xa7\x53\x2a\xae\x96\x1f\xef\x56\x5f\xd4\x0b\xb1\xdf\xd5\xff\x1c\x29\x46\xc6\x45\x21\x57\xf0\xbf\x6c\x8e\x07\xbf\x02\x00\x00\xff\xff\x42\xc9\x41\x20\x27\x03\x00\x00")

func iatemplatesNode_high_cpu_loadYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_high_cpu_loadYml,
		"iatemplates/node_high_cpu_load.yml",
	)
}

func iatemplatesNode_high_cpu_loadYml() (*asset, error) {
	bytes, err := iatemplatesNode_high_cpu_loadYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_high_cpu_load.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0x7f, 0x34, 0x92, 0x77, 0x38, 0x6a, 0x20, 0x5c, 0xb2, 0x9e, 0x4a, 0xba, 0xfb, 0xe6, 0x83, 0xad, 0x96, 0x4c, 0x15, 0x2f, 0x7, 0x56, 0x38, 0xf7, 0x32, 0xfb, 0x3c, 0xa3, 0x7f, 0xb8, 0x52}}
	return a, nil
}

var _iatemplatesNode_low_free_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x42\x0f\xee\x4a\x9d\x8f\x96\xa3\x20\xda\x87\x14\xee\x2d\x29\x85\x5e\xfb\x12\x82\x51\xec\xb5\xad\x56\xd2\x1a\x69\x9d\xd4\x5c\xf3\xdf\x8b\xed\xc4\x0d\x57\x7a\x7e\xb2\x66\x56\xa3\xd9\x9d\x4d\x92\x64\x22\xe4\x6a\xab\x85\xa2\x9a\x00\x09\xbc\x76\xa4\x50\x3b\x97\x7a\xce\x29\xb5\x7c\x4c\x8b\x40\x94\x3a\x72\x1c\xda\x09\x00\x1c\x28\x44\xc3\x5e\x61\xd9\x1f\x63\xe3\x9c\x0e\xad\xc2\x67\xce\x09\xdc\x08\xb8\xc0\x55\x39\xfd\xaa\x83\xc2\xef\xa4\x3f\x00\xbd\xec\x40\xa7\x1b\x72\xab\x83\x36\x56\xef\x2d\xa5\xfb\x56\x28\x62\xfe\xbc\xe0\x91\x45\xdb\x81\x3c\x2b\xbc\xc6\x72\xb1\x38\xff\x7f\xc0\x76\x8b\x99\x54\x81\x62\xc5\x36\xc7\x6e\xd7\x13\xb5\x0e\xda\xf5\x1d\x75\xdf\xa5\xab\xb1\xec\x8c\x5f\x79\x5f\xa1\xa6\x90\x91\x17\x5d\x12\x8a\xc0\x0e\x19\xfb\xc2\x94\x4d\xa0\x1c\xce\x78\xe3\x1a\x37\xde\x6a\xbc\x11\x85\xe9\xcd\x74\x44\xa4\xad\x49\xa1\xb0\xac\x65\xc4\x82\xf6\x25\x29\x6c\x17\x6f\x3a\xbf\xbb\x11\x3f\x68\xdb\x90\xc2\xdb\xa1\x85\x82\x83\xc2\xfd\xa0\x1d\xe9\x40\xc1\x48\xab\x70\xd4\xc1\x1b\x5f\xf6\xa8\xd5\x7b\xb2\x63\x2f\x62\xb2\x9f\x24\x0a\x5f\x36\x9b\xe4\xfd\xf2\xdd\xfd\x05\xae\x8c\x2f\x63\x2a\x9c\xe6\xac\x30\x6d\x29\x0e\xe6\xb4\xf7\x2c\x5a\x0c\xfb\x51\x21\xa7\x98\x05\x53\x4b\x1f\xe1\x18\x0b\xf0\x58\x99\x88\xcb\x36\xc0\x44\x78\x16\x14\xc6\x9b\x58\x51\xae\x50\x89\xd4\x51\xcd\xe7\x3f\x4c\xd0\xb3\x6e\x58\xec\xf5\x2c\x63\x37\xdf\x07\x3e\x46\x9a\x3f\x33\x04\x3c\x3d\xe1\xd5\xe0\x7d\xd6\x47\xda\x65\x80\xd3\xe9\xbc\x1a\xdd\x03\x85\xb1\xd6\xf8\x12\x4d\x8d\xdb\x7f\x83\xbc\x81\xa5\x42\xee\x46\xbd\xef\xab\xf5\xb7\x07\x7c\xec\x75\xfb\x19\xe2\x74\x1a\xc9\xf5\xea\xd3\xc3\xfa\xab\xba\x7a\xf4\x2f\xfb\xc2\x82\xe2\xd6\xf8\x28\xda\x67\xf4\x3f\xbb\x77\x93\x3f\x01\x00\x00\xff\xff\xc6\x72\xf8\xef\x25\x03\x00\x00")

func iatemplatesNode_low_free_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_low_free_memoryYml,
		"iatemplates/node_low_free_memory.yml",
	)
}

func iatemplatesNode_low_free_memoryYml() (*asset, error) {
	bytes, err := iatemplatesNode_low_free_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_low_free_memory.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xe4, 0x80, 0xd0, 0x52, 0x92, 0xfb, 0x7, 0xc9, 0xc5, 0x29, 0xa0, 0x8c, 0xdf, 0x26, 0xcb, 0x59, 0xdb, 0xd, 0x97, 0x90, 0x3c, 0x97, 0x6c, 0x2b, 0x16, 0x2, 0x9a, 0x90, 0xbe, 0x78, 0x72}}
	return a, nil
}

var _iatemplatesNode_swap_filled_upYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x8b\xd3\x40\x14\x7d\xef\xaf\x38\x14\x17\x5a\x31\xfd\x40\x16\x65\x40\xa1\xc2\xfa\xd4\x95\x85\xae\xfa\x50\x4a\x98\x26\x37\xc9\x68\xe6\x83\x99\x9b\x76\xc3\xda\xff\x2e\x49\xda\xb1\xae\x98\xa7\xcc\xb9\x73\xcf\x3d\x67\xce\x4d\x92\x64\xc4\xa4\x5d\x2d\x99\x82\x18\x01\x09\x8c\xd4\x24\xe0\xb4\x4e\x8d\xcd\x29\x0d\x47\xe9\xd2\x42\xd5\x35\xe5\x69\xe3\x46\x00\x70\x20\x1f\x94\x35\x02\xcb\xfe\x18\x1a\xad\xa5\x6f\x05\xbe\xd8\x9c\x50\xa9\xb2\xc2\xe6\xfb\xea\x01\x5d\x93\x32\x25\xce\x5d\xf4\xe4\xbc\xc0\xaf\xa4\x3f\x00\x93\x25\x12\x4c\xfa\x11\x9a\xb4\xf5\x6d\xba\x39\x4a\xf7\xd9\x13\xa5\xfb\x96\x29\x60\x8e\x97\xc5\x47\xcb\xb2\x1e\xaa\xd3\xe9\x99\xe6\x35\x96\x8b\xc5\xf9\xff\x23\xb6\x5b\xcc\xb8\xf2\x14\x2a\x5b\xe7\xd8\xed\xfa\x82\x93\x5e\xea\xde\x5c\xf7\x5d\x0c\xc6\x6b\x67\xfc\xca\xc7\x0a\x8e\x7c\x46\x86\x65\x49\x28\xbc\xd5\xc8\xac\x29\x54\xd9\x78\xca\xa1\xe5\x93\xd2\x8d\x8e\x5d\x8d\x51\x2c\x30\xbe\x19\x47\x84\x5b\x47\x02\x45\x6d\x25\x47\xcc\x4b\x53\x92\xc0\x76\xf1\xa6\xd3\xbb\x8b\xf8\x41\xd6\x0d\x09\xbc\x1f\x2c\x14\xd6\x0b\xdc\x0e\xdc\x81\x0e\xe4\x15\xb7\x02\x47\xe9\x8d\x32\x65\x8f\xd6\x72\x4f\x75\xf4\xc2\x2a\xfb\x49\x2c\xf0\x70\x7f\x9f\xbc\x5b\xbe\xbd\xbd\xc0\x95\x32\x65\x48\xd9\xa6\xb9\x15\x18\xb7\x14\x06\x71\xd2\x18\xcb\x92\x95\x35\x91\x21\xa7\x90\x79\xe5\xb8\x8f\x33\x66\x03\x3c\x56\x2a\xe0\xb2\x18\x50\x01\xc6\x32\x0a\x65\x54\xa8\x28\x17\xa8\x98\x5d\x10\xf3\xf9\x0f\xe5\xe5\xac\x7b\x2c\x6b\xe4\x2c\xb3\x7a\xbe\xf7\xf6\x18\x68\xfe\x42\x10\xf0\xfc\x8c\x57\x83\xf6\x59\x9f\x6a\x97\x01\x4e\x27\x74\xb1\x76\xf4\xc3\x82\xa1\x71\xd0\xd6\x13\xb8\x92\xe6\x9f\x30\x6f\x22\xdb\xb7\xd5\xfa\xeb\x1d\x3e\xf4\xac\xfd\x0b\xe2\x74\x8a\xc5\xf5\xea\xd3\xdd\x7a\x23\xae\x46\xfe\xa9\xfe\xbd\xaa\xe1\x6a\xf8\xb0\xa8\x98\x28\x13\x58\x9a\x8c\xfe\xa7\x78\x3a\xfa\x1d\x00\x00\xff\xff\xd2\x81\xea\x23\x33\x03\x00\x00")

func iatemplatesNode_swap_filled_upYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_swap_filled_upYml,
		"iatemplates/node_swap_filled_up.yml",
	)
}

func iatemplatesNode_swap_filled_upYml() (*asset, error) {
	bytes, err := iatemplatesNode_swap_filled_upYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_swap_filled_up.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0xae, 0xc3, 0x7e, 0xb4, 0x7e, 0x67, 0xda, 0xfd, 0xbf, 0xad, 0xc0, 0x78, 0x5a, 0x2d, 0xc1, 0xfb, 0x7b, 0x9f, 0xfc, 0x72, 0xfe, 0x50, 0x9e, 0x6b, 0x44, 0x61, 0xfc, 0x39, 0x20, 0x1d, 0xd4}}
	return a, nil
}

var _iatemplatesPostgresql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xcf\xab\xd3\x40\x10\xbe\xe7\xaf\xf8\x78\x78\x68\xc1\x24\x3e\xe4\x21\x2c\xf4\xa0\xe8\xad\xd5\x4a\x05\x8f\x61\xbb\x99\x36\xab\xd9\x1f\xee\x4c\x5b\x43\xcd\xff\x2e\xdd\x9a\x5a\xc4\xc3\xbb\xed\xce\x7c\x33\xdf\x8f\x29\xcb\xb2\x10\x72\xb1\xd7\x42\xac\x0a\xa0\x84\xd7\x8e\x14\xa2\x73\x4d\x0c\x2c\xfb\x44\xfc\xa3\x6f\xda\x70\xf2\x05\x00\x1c\x29\xb1\x0d\x5e\xe1\x31\x7f\xf9\xe0\x9c\x4e\x83\xc2\xfa\x8a\xdd\x7c\x5e\xe2\xfd\xa7\xaf\x1f\x73\x93\x7e\xc6\xa4\xf0\xab\xcc\x9f\x8c\xc5\x76\xc0\x8c\x29\x1d\xad\xa1\xe6\x42\xf4\x12\x3e\xb4\xd3\x73\x6a\xc8\x10\x69\x8e\x59\xdc\x37\x87\x38\xc7\x62\x81\x57\x79\x43\xd4\x49\xbb\x2c\x12\xd8\x85\xa4\xf0\xc4\x57\x0d\x74\xa4\x64\x65\x50\x30\xc9\x8a\x35\xba\xcf\xe5\x5e\x6f\xa9\xff\x03\x07\xc4\x9a\xef\x24\x0a\xeb\xd5\xaa\x7c\xf3\xf8\xfa\x69\x2a\x77\xd6\xef\xb9\x91\xd0\xb4\x41\xe1\x61\x20\x7e\xc8\x1d\xed\x7d\x10\x2d\x36\xf8\xdb\x86\x96\xd8\x24\x1b\x25\xbb\xbf\x99\x02\xbe\x74\x96\x31\x65\x08\xcb\xf0\x41\xb0\xb3\xde\x72\x47\xad\x42\x27\x12\x59\xd5\xf5\x37\x9b\x74\x15\x29\x99\xe0\x75\x65\x82\xab\xb7\x29\x9c\x98\xea\x7f\x04\xe1\x3e\x49\xeb\x59\xb4\x37\x84\xf3\x19\x2f\xae\x7e\xaa\xfb\xf4\x30\x8e\x17\xc2\x4b\xe0\xd5\x6d\x7e\xf9\xf6\xdd\x87\xe5\x46\xdd\xcd\x60\x1c\xff\x9e\xe0\xbf\xe7\xc2\xec\x19\x54\xf3\xe2\x77\x00\x00\x00\xff\xff\x9f\x0f\xd0\x78\x2e\x02\x00\x00")

func iatemplatesPostgresql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_downYml,
		"iatemplates/postgresql_down.yml",
	)
}

func iatemplatesPostgresql_downYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x2d, 0x2f, 0xf7, 0x84, 0xa0, 0xbf, 0xa8, 0x58, 0xc4, 0xae, 0x16, 0x1a, 0x84, 0x29, 0xde, 0x1c, 0x9, 0x6e, 0xbf, 0xaa, 0x6a, 0x2d, 0x36, 0xd3, 0xb7, 0x12, 0x30, 0x86, 0x7c, 0xb1, 0x25}}
	return a, nil
}

var _iatemplatesPostgresql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x6f\xd3\x40\x10\xc5\xef\xfe\x14\x4f\x11\x07\x38\xd8\x69\x54\x01\xd2\x8a\x0b\x48\xdc\x52\xa9\x10\x6e\x55\x65\x4d\xed\x89\xbd\xe0\xfd\xc3\xce\x24\x21\x2a\xf9\xee\x28\xeb\xc4\xa4\x39\xd5\xb7\x7d\xfb\xf6\xe9\x37\xf3\x5c\x96\x65\xa1\xec\xe2\x40\xca\x62\x0a\xa0\x84\x27\xc7\x06\xd1\xb9\x3a\x06\xd1\x2e\xb1\xfc\x1e\xea\xc4\xa2\x94\x94\xdb\x02\x00\xb6\x9c\xc4\x06\x6f\xb0\xc8\x47\xd9\x38\x47\x69\x6f\x70\x3f\x3e\x58\x7d\x5b\xe2\xfb\x8b\x07\xfc\x27\x26\x83\xbf\x65\x3e\x00\xb1\xcb\xd9\x8e\x44\x39\xd5\x9b\xa8\xd6\x71\x2d\xdc\x04\xdf\xca\xc9\xf2\x09\x0f\x0f\xa8\xb4\x4f\x2c\x7d\x18\x5a\x3c\x3e\xe6\x8b\x48\x89\x5c\x06\x3d\x7e\x67\xd8\xc9\x76\xd2\x2f\x90\x56\x63\x2a\xd6\x29\x38\x68\xcf\x18\x48\x14\xa7\x71\x26\xfb\xc6\x5b\x35\x98\x09\x37\xb3\x49\xd3\x7d\x64\x83\xf5\x10\xe8\xbf\x6f\x4b\xc3\x86\x0d\x6e\x3f\xdc\x64\x69\x1d\x92\xc1\xe2\x66\x64\x16\xde\x72\xb2\xba\x37\xd8\x51\xf2\xd6\x77\x59\x1d\xe8\x89\x87\x09\x58\x6d\xf3\x8b\xd5\xe0\xfe\xee\xae\xfc\xb8\xb8\x7d\x7f\x96\x7b\xeb\x3b\xa9\x35\xd4\x6d\x30\x98\xed\x59\x46\x0c\xf2\x3e\x28\xa9\x0d\x7e\x4a\x68\x59\x9a\x64\xa3\xe6\xf5\x4f\x0b\x05\x7e\xf4\x56\x70\x6e\x12\x56\xe0\x83\x62\x6d\xbd\x95\x9e\x5b\x83\x5e\x35\x8a\x99\xcf\x7f\xda\x44\x55\xe4\xd4\x04\x4f\x55\x13\xdc\xfc\x29\x85\x9d\xf0\xfc\x0a\x08\x97\x55\x5a\x2f\x4a\xbe\x61\x3c\x3f\xe3\xcd\x38\x4f\x25\x9c\xb6\xb6\xe1\xfa\xb8\x7f\x1c\x0e\xd8\x91\x60\xfa\x47\xb2\x31\xaf\xea\x78\x75\xea\x15\xd4\x85\x6a\x8a\x5f\x7e\xfe\xf2\x75\xb9\x32\x17\x91\x38\x1c\x8a\xab\xee\x2e\x18\x5e\xe6\xbf\x7d\x05\xd2\xbb\xe2\x5f\x00\x00\x00\xff\xff\x51\x7c\x57\x0c\xdc\x02\x00\x00")

func iatemplatesPostgresql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_restartedYml,
		"iatemplates/postgresql_restarted.yml",
	)
}

func iatemplatesPostgresql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0xa8, 0xf9, 0x59, 0xef, 0xb9, 0xa1, 0x38, 0xfe, 0x93, 0xe6, 0xfd, 0x26, 0x33, 0x6b, 0xbb, 0x27, 0x93, 0x91, 0xdb, 0x75, 0xc7, 0xc4, 0x60, 0xc5, 0x16, 0x63, 0x50, 0x1, 0x55, 0x6a, 0xba}}
	return a, nil
}

var _iatemplatesPostgresql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x5d\x6b\xdb\x4c\x10\x85\xef\xfd\x2b\xce\x6b\xde\x40\x12\x2a\x3b\xa6\x84\x96\x85\x16\x5c\xc8\x9d\x0d\x29\x69\x7b\x63\x8c\x98\x48\x23\x69\x5b\xed\xae\xba\x3b\x72\x6c\x1c\xf7\xb7\x17\xad\x2d\xd5\xfd\xd4\xdd\x9e\x9d\x33\xfb\xcc\x87\x92\x24\x19\x09\x9b\xa6\x26\xe1\xa0\x46\x40\x02\x4b\x86\x15\x1a\x63\xd2\xc6\x05\x29\x3d\x87\xaf\x75\x2a\xce\xa5\x86\xec\x2e\xcd\x9c\xb5\x9c\x89\x76\x36\x8c\x00\x60\xc3\x3e\x68\x67\x15\x66\xf1\x18\x5a\x63\xc8\xef\x14\xee\x8f\xde\x87\xf7\x0b\x9c\x59\xa0\x2d\xda\xc0\x31\x94\xb7\x8d\x57\x78\x4e\xe2\x21\x3a\x2f\x9b\x32\x0d\x42\x92\x52\x26\x7a\xa3\xa5\x7b\xad\xb5\xb2\xcf\x49\x3a\xa8\xff\xbe\x8d\x7b\xd4\xc9\xf5\x73\x0f\x37\x3e\x5c\x9d\x32\xbc\x45\xe7\x67\x11\x6d\xcb\x90\x1a\xda\x9e\xc3\xe2\x1a\xab\x15\x26\x52\x79\x0e\x95\xab\x73\xac\xd7\x98\x62\x76\x73\x13\xcd\x0d\x79\x32\xb1\xfe\xee\xeb\x7b\x30\x04\x9f\xf4\xb3\xf2\xe6\x68\xd8\x67\x6c\x85\x4a\x46\xe1\x9d\xe9\xaa\x2c\x74\xd9\x7a\xce\x61\x68\xab\x4d\x6b\x06\x57\x6b\xb5\x28\x8c\x2f\xc6\x83\x22\xbb\x86\x15\x8a\xda\x91\x0c\x9a\x27\x5b\xb2\xc2\xea\xe6\x45\x87\xb5\x1e\xf4\x0d\xd5\x2d\x2b\xbc\x3e\x92\x16\xce\x2b\xdc\x1e\x73\x07\xde\xb0\xd7\xb2\x53\x78\x22\x6f\xb5\x2d\xa3\x5a\xd3\x23\xd7\x43\x2d\xa2\xb3\x2f\x2c\x0a\xf7\xcb\x65\xf2\x6a\xf6\xf2\xb6\x97\xab\xd8\x24\x71\x69\xee\x14\xc6\x3b\x0e\x47\x38\xb2\xd6\x09\xc5\x8e\xf5\x19\x72\x0e\x99\xd7\x8d\xc4\x29\x0f\xe3\x02\x3e\x54\x3a\xa0\x1f\x08\x74\x80\x75\x82\x42\x5b\x1d\x2a\xce\x15\x2a\x91\x26\xa8\xe9\xf4\xb3\xf6\x34\xe9\x9a\xe5\x2c\x4d\x32\x67\xa6\x8f\xde\x3d\x05\x9e\xfe\x02\x04\x2c\x9d\x67\x48\x45\xf6\xb7\x41\x5d\xc0\x15\x7f\x5b\x28\xf2\x7c\x5a\x2a\x38\x8b\xfd\x1e\xff\x1f\xeb\x9f\x04\xf6\x1b\x9d\x71\xda\x8d\x12\x87\xc3\xf0\xcc\xa7\xf9\xe2\xe3\x1d\xde\xc4\xd0\xd8\xda\xf3\xcb\xc5\xfc\xdd\xdd\xe2\x41\x9d\xe5\xf9\x71\xfb\xa7\xd5\x16\xe7\xd0\xfd\x16\x3f\x21\x5d\x6a\x1b\x84\x6c\xc6\xff\xc0\xb9\x1a\x7d\x0f\x00\x00\xff\xff\x7b\x94\x8f\x46\x7a\x03\x00\x00")

func iatemplatesPostgresql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_too_many_connectionsYml,
		"iatemplates/postgresql_too_many_connections.yml",
	)
}

func iatemplatesPostgresql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x3b, 0x1b, 0x85, 0xeb, 0x36, 0x50, 0x6d, 0xab, 0x1a, 0x9e, 0x3a, 0x13, 0x4d, 0xfe, 0x25, 0x72, 0x59, 0x72, 0xae, 0x3a, 0xc4, 0x27, 0x45, 0xec, 0xed, 0x40, 0x7c, 0xc7, 0x59, 0x17, 0x3d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"iatemplates/mongodb_connections_memory_usage.yml": iatemplatesMongodb_connections_memory_usageYml,
	"iatemplates/mongodb_high_memory_usage.yml":        iatemplatesMongodb_high_memory_usageYml,
	"iatemplates/mongodb_restarted.yml":                iatemplatesMongodb_restartedYml,
	"iatemplates/mysql_down.yml":                       iatemplatesMysql_downYml,
	"iatemplates/mysql_restarted.yml":                  iatemplatesMysql_restartedYml,
	"iatemplates/mysql_too_many_connections.yml":       iatemplatesMysql_too_many_connectionsYml,
	"iatemplates/node_high_cpu_load.yml":               iatemplatesNode_high_cpu_loadYml,
	"iatemplates/node_low_free_memory.yml":             iatemplatesNode_low_free_memoryYml,
	"iatemplates/node_swap_filled_up.yml":              iatemplatesNode_swap_filled_upYml,
	"iatemplates/postgresql_down.yml":                  iatemplatesPostgresql_downYml,
	"iatemplates/postgresql_restarted.yml":             iatemplatesPostgresql_restartedYml,
	"iatemplates/postgresql_too_many_connections.yml":  iatemplatesPostgresql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"iatemplates": {nil, map[string]*bintree{
		"mongodb_connections_memory_usage.yml": {iatemplatesMongodb_connections_memory_usageYml, map[string]*bintree{}},
		"mongodb_high_memory_usage.yml":        {iatemplatesMongodb_high_memory_usageYml, map[string]*bintree{}},
		"mongodb_restarted.yml":                {iatemplatesMongodb_restartedYml, map[string]*bintree{}},
		"mysql_down.yml":                       {iatemplatesMysql_downYml, map[string]*bintree{}},
		"mysql_restarted.yml":                  {iatemplatesMysql_restartedYml, map[string]*bintree{}},
		"mysql_too_many_connections.yml":       {iatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		"node_high_cpu_load.yml":               {iatemplatesNode_high_cpu_loadYml, map[string]*bintree{}},
		"node_low_free_memory.yml":             {iatemplatesNode_low_free_memoryYml, map[string]*bintree{}},
		"node_swap_filled_up.yml":              {iatemplatesNode_swap_filled_upYml, map[string]*bintree{}},
		"postgresql_down.yml":                  {iatemplatesPostgresql_downYml, map[string]*bintree{}},
		"postgresql_restarted.yml":             {iatemplatesPostgresql_restartedYml, map[string]*bintree{}},
		"postgresql_too_many_connections.yml":  {iatemplatesPostgresql_too_many_connectionsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
