// Code generated by go-bindata. DO NOT EDIT.
// sources:
// iatemplates/mysql_down.yml (419B)
// iatemplates/mysql_restarted.yml (586B)
// iatemplates/mysql_too_many_connections.yml (783B)
// iatemplates/node_high_cpu_load.yml (689B)
// iatemplates/node_low_free_memory.yml (687B)
// iatemplates/node_swap_filled_up.yml (701B)
// iatemplates/postgresql_down.yml (440B)
// iatemplates/postgresql_restarted.yml (614B)
// iatemplates/postgresql_too_many_connections.yml (772B)

package data

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _iatemplatesMysql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\xb1\x4e\xec\x40\x0c\xec\xf3\x15\x53\xbc\x22\x91\x5e\x4e\x50\xd0\xac\x74\x05\x08\xba\x00\x42\x57\x50\x9e\x9c\xc4\x48\x2b\x25\xbb\xc1\xbb\x09\xac\x8e\xfc\x3b\x3a\xe7\x2e\x9c\xa8\xe8\x3c\xb6\x67\x3c\xe3\xb2\x2c\x33\x19\x3b\x0e\x26\x03\x4a\x38\xea\xd9\xa0\x4f\xe1\xbd\xdb\xb7\xfe\xc3\x65\x00\x30\xb1\x04\xeb\x9d\xc1\xb5\xc2\x30\xf6\x3d\x49\x32\x78\x4c\xbb\x97\x0a\xf7\xcf\xaf\x4f\xda\xe7\xcf\x41\x0c\xbe\x4a\x05\xba\x86\x3a\x21\x0f\x2c\x93\x6d\x78\x7f\x94\xfe\x0f\xe7\xdb\x73\x79\x1e\xc4\x34\x70\x81\x7c\x39\x3a\x0e\x05\xb6\x5b\x5c\xa9\xc8\x40\x42\xbd\x3a\x03\xde\xbc\x18\xdc\x84\xc5\x01\x4f\x2c\x36\x26\x83\x46\x6c\xb4\x0d\x75\xda\xee\xa8\xe6\xee\xb4\x7e\x24\x78\x83\x9a\x44\x21\x39\xe7\x23\x45\xeb\xdd\x3a\x6f\x39\x34\x62\x87\xa8\xc9\x56\xd7\x38\xa5\xb2\x2e\x44\x72\x0d\xe3\x70\xc0\xbf\x45\x78\x73\x99\x04\xf3\x0c\x1b\x34\xfc\x66\xa5\x56\xb7\x77\x0f\xd5\xce\x5c\x70\x30\xcf\x3f\xef\xf8\xfd\x35\xe4\x7f\xb8\x52\x64\xdf\x01\x00\x00\xff\xff\x40\xa0\x4f\x33\xa3\x01\x00\x00")

func iatemplatesMysql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_downYml,
		"iatemplates/mysql_down.yml",
	)
}

func iatemplatesMysql_downYml() (*asset, error) {
	bytes, err := iatemplatesMysql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xdb, 0x35, 0xa5, 0xc6, 0xde, 0x13, 0xa4, 0x1b, 0x12, 0x65, 0x5f, 0xb0, 0x3c, 0x75, 0xc5, 0x1b, 0xb6, 0xf, 0xe3, 0x6c, 0xbd, 0x4d, 0xc9, 0xfd, 0x8d, 0x67, 0xf2, 0xb5, 0x85, 0x33, 0x80}}
	return a, nil
}

var _iatemplatesMysql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x4f\xc3\x30\x10\x85\xf7\xfc\x8a\xa7\x8a\x01\x86\x54\xad\x90\x18\x2c\x16\x90\xd8\xca\x00\x1d\xab\x2a\xba\x26\xd7\xd6\x92\x63\x07\x9f\x93\x12\x95\xfc\x77\x54\x37\x98\x96\x89\x6c\xf7\xee\xe9\xe5\xdd\xe7\x3c\xcf\x33\xdf\x1a\x16\x95\x01\x39\x2c\xd5\xac\x50\xf7\xf2\x61\x0a\xcf\x12\xc8\x07\xae\x32\x00\xe8\xd8\x8b\x76\x56\x61\x1e\x47\x69\xeb\x9a\x7c\xaf\xf0\xda\x2f\xdf\x16\x78\xbf\xf2\xf2\x67\xe3\x15\xbe\xf2\x38\x60\x8c\xdb\x19\xb7\x21\x53\x48\xa0\xd0\x4a\xd1\x36\x41\xd7\x3c\x1a\x1e\xb1\x5a\x61\x1a\xf6\x9e\x65\xef\x4c\x85\xf5\x3a\x2e\x1a\xf2\x54\xc7\x62\xa7\xef\xa7\x5c\xb2\x8d\xfa\x45\x97\x25\x97\xce\x56\x82\xad\x77\x35\xc2\x9e\x61\x48\x02\xc6\x3b\x92\xbd\xb5\x3a\x28\x4c\x84\xcb\x49\xd2\x42\xdf\xb0\x82\xb6\xbf\xae\x8e\x4c\xcb\x0a\xf7\x0f\xb3\x28\x6d\x9d\x57\x98\xcf\xe4\x7c\x3c\x77\xec\x75\xe8\x15\x0e\xe4\xad\xb6\xbb\xa8\x1a\xda\xb0\x49\x75\xb7\xce\x29\x6c\xc8\xc7\x91\xac\x75\x81\x82\x76\x36\xed\x2b\x96\xd2\xeb\x26\x44\xa6\x09\x15\x46\x9e\xda\x4a\x20\x5b\x32\x8e\x47\xdc\x9c\x83\xa7\xc2\xbe\xd3\x25\x17\x27\x0c\x18\x06\x1c\x48\x90\xde\x28\x1a\x63\xe7\xd3\x4a\x46\x10\xb4\x73\xd3\x94\xbc\x78\x7a\x7e\x59\x2c\xd5\x45\x24\x86\x21\xfb\x83\xf0\xfc\xfb\xeb\xe8\xdb\x7f\xb4\xb9\xcb\xbe\x03\x00\x00\xff\xff\xcc\x54\x4c\x0a\x4a\x02\x00\x00")

func iatemplatesMysql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_restartedYml,
		"iatemplates/mysql_restarted.yml",
	)
}

func iatemplatesMysql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesMysql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x54, 0xaf, 0xa0, 0x2a, 0x16, 0x3a, 0xe1, 0xd1, 0x29, 0xe0, 0x45, 0xb4, 0xf0, 0xf, 0xf3, 0x10, 0xe5, 0x39, 0x76, 0x1b, 0xaa, 0x9f, 0x62, 0x5, 0x87, 0xbb, 0xaa, 0xb9, 0xef, 0x8f, 0xe2, 0xde}}
	return a, nil
}

var _iatemplatesMysql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6b\xdb\x4c\x10\xbe\xfb\x57\x3c\x84\x37\x60\xbf\xd4\xa9\x73\x08\x94\x85\x16\x5c\xc8\xcd\x39\x94\xd0\x5e\x8c\x11\x63\x79\x24\x6f\xd1\xce\xb8\xb3\x2b\x35\x22\xcd\x7f\x2f\x5a\xdb\xaa\x9b\x96\xea\xa4\xf9\xd8\x79\x3e\x66\xe6\xf3\xf9\xc4\xda\x86\xa3\x9b\x00\x73\x08\x05\x76\x08\x7d\xfc\xd6\x14\x49\xb5\x08\x24\x7d\x51\xaa\x08\x97\xc9\xab\xc4\x09\x00\x74\x6c\xd1\xab\x38\xdc\xe6\x30\xb6\x21\x90\xf5\x0e\x0f\xfd\xe3\xa7\x15\x2e\xba\xe1\x05\x6d\xe4\xdc\xc5\x4f\x07\x73\xf8\x31\xcf\x01\x10\xe8\xa9\xd0\x8e\xad\x48\x3e\xf0\xf4\x08\x58\x37\xba\xa5\xa6\x88\x89\x52\x1b\x8b\xb4\x37\xa6\x5d\x3c\xa3\xf3\x6e\x7d\x17\x36\x33\xbc\x85\xaf\x45\xcd\x4b\x8d\xe9\x57\xdd\xce\xce\xf3\x2e\x27\x74\x64\x9e\xb6\x0d\xc7\x62\x80\x79\x4d\x1f\xf8\x1f\xb7\x8b\xc5\xe9\xff\x03\xd6\x6b\xdc\x0c\x60\x71\xaf\xcd\x0e\x9b\x4d\x2e\x1c\xc8\x28\x64\x53\x86\xef\x6c\xcc\xd8\x76\xca\x5f\x88\x5f\xe2\xc0\x56\xb2\x24\xaa\x19\x95\x69\x18\x8c\xa8\x7c\xdd\x1a\xef\x06\xb5\x3e\xb4\x61\x7c\xd5\x8a\x4f\x0e\x57\xd7\x57\x63\x26\xf5\x07\x76\xa8\x1a\xa5\x34\xe6\x8c\xa4\x66\x87\xf5\xe2\xcd\xc0\x77\x33\xe6\x3b\x6a\x5a\x76\x78\x77\x94\x50\xa9\x39\xdc\x1d\x67\x47\xee\xd8\x7c\xea\x1d\xbe\x93\x89\x97\x3a\x67\x1b\xda\x72\x33\x6a\xa9\x54\x1d\xb6\x64\x39\x24\x11\x4d\x94\xbd\x39\xd7\x77\x1c\x4b\xf3\x87\x94\x37\x3c\xee\x0b\x78\x50\x63\xa4\x3d\xc9\x1f\x86\x5d\x43\xab\xbf\x2c\x9f\x8c\x4f\x07\x00\x15\x3c\x3f\xe3\xbf\x23\x91\x9b\xc8\xd6\xf9\x92\x8b\xc1\x53\xbc\xbc\x8c\x08\x5f\x96\xab\xcf\xf7\x78\x9f\x5b\xb3\xc6\xcb\xe2\x6a\xf9\xf1\x7e\xf5\xe8\x2e\xe6\xfc\xaa\xbe\xba\xc0\xa4\x8a\xe1\x70\x7f\x63\x33\xf5\x12\x13\x49\xc9\xff\x60\x32\x9b\xfc\x0c\x00\x00\xff\xff\x8c\x50\xa4\x09\x0f\x03\x00\x00")

func iatemplatesMysql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesMysql_too_many_connectionsYml,
		"iatemplates/mysql_too_many_connections.yml",
	)
}

func iatemplatesMysql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesMysql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/mysql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x35, 0x25, 0x42, 0x3, 0x4c, 0xf8, 0x15, 0x12, 0x98, 0x27, 0x18, 0xc3, 0xd1, 0x3f, 0x62, 0x5b, 0x60, 0xc0, 0xd2, 0xa7, 0xe1, 0x41, 0x17, 0xef, 0xde, 0xbc, 0xbf, 0x9b, 0x94, 0x44, 0x1e, 0xb4}}
	return a, nil
}

var _iatemplatesNode_high_cpu_loadYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\xc1\x8a\xdb\x30\x14\xbc\xe7\x2b\x86\xd0\x85\xa4\xd4\x4b\x72\x58\x28\x82\x2d\xa4\x65\x6f\xa1\x14\xca\xf6\x12\x42\x78\xb1\x9e\x6d\x81\xa4\x67\x24\x39\xdd\x90\xfa\xdf\x8b\x95\x54\x5d\x28\x5d\x9f\xfc\x66\x9e\x67\x34\x1e\x55\x55\x35\x4b\xec\x7a\x4b\x89\xa3\x9a\x01\x15\x3c\x39\x56\xf0\xa2\xf9\xd0\x99\xb6\x3b\xd4\xfd\x70\xb0\x42\x7a\x06\x00\x27\x0e\xd1\x88\x57\x58\xe7\x31\x0e\xce\x51\x38\x2b\x7c\x15\xcd\x98\xd6\xf1\xe5\xdb\x33\xca\x3a\xbf\xf4\x41\xe1\x57\x95\x07\x60\xb1\x46\x05\x3a\xb5\x38\x9e\x17\xd9\x60\xf2\x5a\x62\x11\x28\xf1\x15\x98\xcc\x22\xd7\xe2\x75\x3c\x24\x49\x64\x2f\x4e\x34\x3f\xce\x8d\xb6\x3c\x1f\x77\x0f\x6e\xbf\x5c\x2e\x6f\x6a\xef\xb1\x5e\xad\x6e\xef\x9f\xb0\xdb\xe1\x3e\x75\x81\x63\x27\x56\x63\xbf\xcf\x44\x4f\x81\x5c\xce\x35\x3d\x7f\xb2\x95\xb5\x1b\xfe\x2a\xc7\x06\x3d\x87\x9a\x7d\xa2\x96\xd1\x04\x71\xa8\xc5\x37\xa6\x1d\x02\x6b\x38\x7a\x31\x6e\x70\xe5\xab\xc1\x9b\xa4\x30\xbf\x9b\x17\x24\x9d\x7b\x56\x68\xac\x50\x2a\x58\x20\xdf\xb2\xc2\x6e\xf5\x61\x3a\xef\xbe\xe0\x27\xb2\x03\x2b\x7c\xbc\x46\x68\x24\x28\x3c\x5c\xb5\x23\x9f\x38\x98\x74\x56\xf8\x49\xc1\x1b\xdf\x66\xd4\xd2\x91\x6d\xc9\xd2\x88\x28\x1c\x29\xe4\x91\xbc\x97\x44\xc9\x88\x2f\xbc\xe6\x58\x07\xd3\xa7\x5c\x56\x29\x00\xb8\x5c\xf0\xee\xaa\x74\x5f\x1a\xc0\x38\x96\xda\x60\x22\x9c\x04\x46\xea\xc8\xff\xf3\x53\xef\x8a\xce\x8f\xcd\xf6\xf9\x09\x8f\x59\x2f\x27\xc1\x38\x16\x72\xbb\xf9\xfc\xb4\xfd\xae\x5e\x99\xfd\x65\xdf\xb8\x32\x58\x18\x1f\x13\xf9\x9a\xff\x77\xcc\xe5\xec\x77\x00\x00\x00\xff\xff\xce\xbb\x47\xd4\xb1\x02\x00\x00")

func iatemplatesNode_high_cpu_loadYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_high_cpu_loadYml,
		"iatemplates/node_high_cpu_load.yml",
	)
}

func iatemplatesNode_high_cpu_loadYml() (*asset, error) {
	bytes, err := iatemplatesNode_high_cpu_loadYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_high_cpu_load.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd7, 0xc, 0x55, 0xb1, 0x81, 0x8d, 0x31, 0xd2, 0xe0, 0x9c, 0xb9, 0x59, 0xd3, 0xb2, 0xe4, 0x58, 0x7a, 0x3d, 0x4e, 0x23, 0xee, 0xf, 0xb4, 0x67, 0xe5, 0xc3, 0xcd, 0x9d, 0x3, 0xc, 0x9f, 0x56}}
	return a, nil
}

var _iatemplatesNode_low_free_memoryYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x6f\x13\x31\x10\xbd\xe7\x57\x3c\x55\x54\x6a\x11\x5b\x52\x24\x2e\x16\x1c\x82\xd4\x5b\xe0\xc2\xc7\x25\x8a\x56\x93\xec\x78\x6b\xc9\xf6\xac\xec\xd9\x94\x55\xc9\x7f\x47\xf1\x06\x13\x81\x60\x4f\x3b\xef\x8d\x9f\xe7\xbd\x71\xd3\x34\x0b\xe5\x30\x78\x52\xce\x66\x01\x34\x88\x14\xd8\x20\x4a\xc7\xad\x97\xa7\xd6\x26\xe6\x36\x70\x90\x34\x2d\x00\xe0\xc0\x29\x3b\x89\x06\xf7\xa5\xcc\x63\x08\x94\x26\x83\x4f\xd2\x31\x64\x54\x88\xc5\x45\x3b\x7f\x1f\x92\xc1\x8f\xa6\x14\x98\x65\x67\xba\xfd\xc8\x61\x75\x20\xe7\x69\xe7\xb9\xdd\x4d\xca\x19\xaf\xff\x6c\xf8\x22\x4a\x7e\x26\xcf\x0a\x2f\x71\xbf\x5c\x9e\xff\xdf\x61\xb3\xc1\x9d\x3e\x26\xce\x8f\xe2\x3b\x6c\xb7\x85\x18\x28\x51\x28\x6e\x4e\xdf\x2f\x47\xb5\xed\x8c\x5f\xcc\xbe\xc2\xc0\x69\xcf\x51\xa9\x67\xd8\x24\x01\x7b\x89\xd6\xf5\x63\xe2\x0e\xc1\x45\x17\xc6\x50\x4f\x8d\xd1\xa9\xc1\xd5\xf5\x55\x45\x74\x1a\xd8\xc0\x7a\x21\xad\x58\xa2\xd8\xb3\xc1\x66\xf9\xea\x34\xef\xb6\xe2\x07\xf2\x23\x1b\xbc\x99\x2d\x58\x49\x06\x6f\x67\xed\xcc\x07\x4e\x4e\x27\x83\x27\x4a\xd1\xc5\xbe\xa0\x9e\x76\xec\xab\x17\x2b\x62\xb0\xa3\x54\x4a\x8a\x51\x94\xd4\x49\xac\x7c\xc7\x79\x9f\xdc\xa0\x65\x41\x35\x74\xe0\xf9\x19\x2f\x66\xa5\xbb\x12\xf0\x29\x11\x1c\x8f\xe7\x45\xc1\x65\x58\xe7\xbd\x8b\x3d\xc6\x01\x37\x7f\xc7\x7a\x0d\xcf\x56\x6f\xab\xde\xb7\xd5\xfa\xeb\x03\xde\x17\xdd\xe2\x08\xc7\x63\x25\xd7\xab\x0f\x0f\xeb\xcf\xe6\xe2\xd2\xdf\xec\x7f\x9e\x0b\x6e\x5c\xcc\x4a\x71\xcf\xff\x1a\xf7\x76\xf1\x33\x00\x00\xff\xff\x50\xa3\x2a\xc3\xaf\x02\x00\x00")

func iatemplatesNode_low_free_memoryYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_low_free_memoryYml,
		"iatemplates/node_low_free_memory.yml",
	)
}

func iatemplatesNode_low_free_memoryYml() (*asset, error) {
	bytes, err := iatemplatesNode_low_free_memoryYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_low_free_memory.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x98, 0x9, 0xb, 0xcb, 0xc2, 0x90, 0xc3, 0xf8, 0x34, 0xb, 0x6c, 0xfc, 0x95, 0x3d, 0x31, 0xdf, 0x74, 0x4, 0xf1, 0x99, 0xbe, 0xd2, 0x14, 0xef, 0xf9, 0xb0, 0xd3, 0x19, 0xb1, 0x8e, 0x4a}}
	return a, nil
}

var _iatemplatesNode_swap_filled_upYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x5d\x8b\xdb\x30\x10\x7c\xcf\xaf\x18\x8e\x1e\x24\xa5\xbe\x26\x0f\x85\x22\x68\x21\x85\xeb\x53\x28\x85\xf4\xe3\x21\x04\xb3\x89\xd7\xb6\xc0\xfa\x60\x25\x27\x67\xae\xf9\xef\xc5\x72\xaa\xa6\x2d\xf5\x93\x77\x46\x3b\xab\x19\x6d\x51\x14\xb3\xc8\xc6\x77\x14\x39\xa8\x19\x50\xc0\x92\x61\x05\xeb\x2a\x2e\xc3\x99\x7c\x59\xeb\xae\xe3\xaa\xec\xfd\x0c\x00\x4e\x2c\x41\x3b\xab\xb0\x4a\x65\xe8\x8d\x21\x19\x14\x3e\xb9\x8a\xd1\xea\xa6\xc5\xf6\xfb\xfa\x33\xc6\x26\x6d\x1b\x5c\xbb\xf8\xc9\x8b\xc2\x8f\x22\x15\xc0\x7c\x85\x02\xf3\x34\xc2\xb0\x71\x32\x94\xdb\x33\xf9\x8f\xc2\x5c\x1e\x86\xc8\x01\xaf\xf1\x37\xf9\xc5\x45\xea\x26\x76\xb1\xb8\xca\xbc\xc4\x6a\xb9\xbc\xfe\xbf\xc7\x6e\x87\x87\xd8\x0a\x87\xd6\x75\x15\xf6\xfb\x44\x78\x12\x32\xc9\xd8\xf8\xfd\x32\x97\x8f\x5d\xf1\x1b\x1f\x6b\x78\x96\x23\xdb\x48\x0d\xa3\x16\x67\x70\x74\xb6\xd6\x4d\x2f\x5c\xc1\xd0\x93\x36\xbd\xc9\x5d\xbd\xd5\x51\xe1\xee\xfe\x2e\x23\x71\xf0\xac\x50\x77\x8e\x62\xc6\x84\x6c\xc3\x0a\xbb\xe5\xab\xf1\xbe\xfb\x8c\x9f\xa8\xeb\x59\xe1\xed\x64\xa1\x76\xa2\xf0\x66\xd2\x0e\x7c\x62\xd1\x71\x50\x38\x93\x58\x6d\x9b\x84\x76\x74\xe0\x2e\x7b\xa9\x9d\x53\x38\x90\xa4\x92\xac\x75\x91\xa2\x76\x36\xf3\x15\x87\xa3\x68\x1f\xd3\x63\xe5\xe4\x81\xe7\x67\xbc\x98\x94\x1e\x52\xc6\x63\x22\xb8\x5c\x30\x86\x0c\x1d\x30\x3d\x37\x7a\x0f\xe3\x84\x11\x5b\xb2\xff\x44\x7b\x9f\xd5\xbe\xad\x37\x5f\x1f\xf1\x2e\xa9\x26\x3f\xb8\x5c\x32\xb9\x59\x7f\x78\xdc\x6c\xd5\xcd\xc8\xdf\xec\x9f\x8b\x13\x6e\x86\x4f\x6b\x83\xb9\xb6\x21\x92\x3d\xf2\xff\x6e\xbc\x98\xfd\x0c\x00\x00\xff\xff\x8e\x33\xd9\xcd\xbd\x02\x00\x00")

func iatemplatesNode_swap_filled_upYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesNode_swap_filled_upYml,
		"iatemplates/node_swap_filled_up.yml",
	)
}

func iatemplatesNode_swap_filled_upYml() (*asset, error) {
	bytes, err := iatemplatesNode_swap_filled_upYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/node_swap_filled_up.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x69, 0x71, 0x10, 0x9d, 0x32, 0x7a, 0xfa, 0x5d, 0xb0, 0x7f, 0x9f, 0xd2, 0x28, 0x87, 0xad, 0xb0, 0x96, 0x8b, 0x14, 0x2, 0x4f, 0xdc, 0x8d, 0x98, 0x91, 0xbb, 0x34, 0x99, 0xa5, 0x86, 0xa6}}
	return a, nil
}

var _iatemplatesPostgresql_downYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x50\xbb\x4e\xc3\x40\x10\xec\xfd\x15\x53\x50\xd8\x12\x8e\xa0\xa0\x39\x29\x05\x08\x3a\x8b\x87\x52\x50\x5a\x6b\x7b\x89\x4e\xf2\x3d\xd8\xbb\x18\xac\xe0\x7f\x47\x39\x13\xe3\x82\x82\xee\xe6\x66\x66\x77\x66\xcb\xb2\xcc\x22\x1b\xdf\x53\xe4\xa0\x32\xa0\x84\x25\xc3\x0a\xde\x85\xb8\x17\x0e\xef\x7d\xdd\xb9\x0f\x9b\x01\xc0\xc0\x12\xb4\xb3\x0a\xd7\x09\x86\x83\x31\x24\xa3\xc2\xf3\xac\xdd\xbd\x54\xb8\x7f\x7a\x7d\x4c\x24\x7f\x7a\x51\xf8\x2a\x13\x48\x5a\x34\x23\xf2\xc0\x32\xe8\x96\xeb\xd3\x92\x4b\x58\xd7\x9d\x9f\x67\x22\x8e\x9e\x0b\xe4\x7e\x5f\x1f\x7c\x81\xed\x16\x57\x69\x82\x27\x21\x93\x02\x02\x6f\x4e\x14\x6e\xc2\x9c\x81\x07\x16\x1d\x47\x85\x56\x74\xd4\x2d\xf5\xe9\xbb\xa7\x86\xfb\x1f\xf9\xc9\xe0\x14\x1a\x92\x04\xc9\x5a\x17\x29\x6a\x67\x17\xbe\xe3\xd0\x8a\xf6\x31\x75\x5b\x22\x63\xdd\x4b\xdb\x10\xc9\xb6\x8c\xe3\x11\x17\xf3\xf4\xcd\xba\x0b\xa6\x09\x3a\xa4\xfa\x9b\xc5\x5f\xdd\xde\x3d\x54\x3b\xb5\xf2\x60\x9a\x7e\x0f\xf2\xe7\xf1\x90\xff\x63\x55\x91\x7d\x07\x00\x00\xff\xff\xcc\x1a\xcd\x72\xb8\x01\x00\x00")

func iatemplatesPostgresql_downYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_downYml,
		"iatemplates/postgresql_down.yml",
	)
}

func iatemplatesPostgresql_downYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_downYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_down.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x3e, 0x9c, 0xfc, 0xfa, 0x63, 0x3b, 0xc9, 0x4b, 0x67, 0xfc, 0xfe, 0x96, 0x5c, 0x4a, 0xb4, 0x98, 0x3d, 0x4, 0x19, 0xb5, 0x68, 0xa9, 0x2d, 0x62, 0x98, 0x10, 0x8a, 0xf5, 0x9c, 0x14, 0xb6}}
	return a, nil
}

var _iatemplatesPostgresql_restartedYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x3f\x8f\xd3\x40\x10\xc5\x7b\x7f\x8a\xa7\x13\x05\x14\x8e\xee\x84\x44\xb1\xa2\x01\x89\x2e\x05\x90\xf2\x74\xb2\xe6\x9c\x49\xb2\xd2\xfe\x63\x66\x92\x23\x3a\xf2\xdd\x51\xd6\x66\x71\xa8\x70\x37\x6f\xde\x3c\xfd\xfc\xb6\xef\xfb\xce\x38\x96\x40\xc6\xea\x3a\xa0\x47\xa2\xc8\x0e\x25\xab\xed\x85\xf5\x47\x18\x84\xd5\x48\x8c\xb7\x1d\x00\x9c\x58\xd4\xe7\xe4\xf0\x50\x47\x3d\xc6\x48\x72\x76\xf8\x3a\x1d\x6c\xbe\xad\xf1\xfd\xe6\x80\x7f\x16\x71\xf8\xd5\xd7\x01\x28\xfb\xe1\x9a\x1d\x49\x8d\x65\x38\x16\xf3\x91\x07\xe5\x31\xa7\xad\xce\x96\x8f\x78\x7c\xc4\xca\x0e\xc2\x7a\xc8\x61\x8b\xa7\xa7\xba\x28\x24\x14\x2b\xe4\xf5\xfb\x03\xda\x6c\xb3\xbe\x40\xda\x4c\xa9\xd8\x49\x8e\xb0\x03\x23\x90\x1a\xe6\xdf\x69\xf6\x63\xf2\xe6\x70\xa7\x3c\xde\x35\xcd\xce\x85\x1d\x76\x21\xd3\x5f\xdf\x89\xc2\x91\x1d\xde\x7f\xb8\xaf\xd2\x2e\x8b\xc3\xc3\xfd\xc4\xac\x7c\x62\xf1\x76\x76\x78\x21\x49\x3e\xed\xab\x1a\xe8\x99\x43\x03\xde\xe5\xec\xf0\x4c\x52\x47\x4a\x29\x1b\x99\xcf\xa9\xed\xb7\xac\xa3\xf8\x62\xb5\xdc\x56\x17\x96\xc5\xfa\xa4\x46\x69\x64\xbc\xbe\xe2\xcd\x94\xbe\x52\x96\x93\x1f\x79\xb8\xb6\x81\xcb\x05\x2f\xa4\x68\x2f\x56\x8d\x15\xfc\xba\x9a\x5b\x06\xed\xf3\xaa\xc5\xaf\x3f\x7d\xfe\xb2\xde\xb8\x45\x24\x2e\x97\xee\x9f\x26\x17\x0c\xb7\xf9\x6f\xff\x03\xe9\x5d\xf7\x3b\x00\x00\xff\xff\xa3\xf1\xa8\xaa\x66\x02\x00\x00")

func iatemplatesPostgresql_restartedYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_restartedYml,
		"iatemplates/postgresql_restarted.yml",
	)
}

func iatemplatesPostgresql_restartedYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_restartedYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_restarted.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x18, 0x21, 0x4d, 0x67, 0x87, 0x50, 0x47, 0xf5, 0xdb, 0x5b, 0x2b, 0xe7, 0x5f, 0x89, 0x8d, 0x37, 0xb4, 0x4f, 0x9c, 0x2f, 0x11, 0x9b, 0xe1, 0x67, 0x2, 0xde, 0x69, 0x93, 0x37, 0xf0, 0xd0}}
	return a, nil
}

var _iatemplatesPostgresql_too_many_connectionsYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8b\xdb\x40\x0c\xbd\xe7\x57\xbc\x86\x2e\xec\x2e\x75\x9a\x3d\x14\xca\x40\x0b\x29\xec\x2d\x85\x96\xa5\xbd\x84\x60\xb4\x8e\xec\x0c\x78\x34\xee\x8c\xec\x26\x24\xe9\x6f\x2f\x9e\x24\xae\x4b\x3f\xe6\xa6\x27\x3d\xcd\x7b\x92\xb2\x2c\x9b\x28\xbb\xa6\x26\xe5\x68\x26\x40\x06\x21\xc7\x06\x8d\x8f\x5a\x05\x8e\xdf\xea\x5c\xbd\xcf\x1d\xc9\x3e\x2f\xbc\x08\x17\x6a\xbd\xc4\x09\x00\x74\x1c\xa2\xf5\x62\xf0\x90\xc2\xd8\x3a\x47\x61\x6f\xf0\xe9\xcc\x7d\xfa\xbc\xc4\x88\x02\x2b\x68\x23\xa7\x52\xde\x35\xc1\xe0\x98\xa5\x20\x31\x6f\x9b\x2a\x8f\x4a\x9a\x53\xa1\xb6\xb3\xda\xff\xd6\x8a\x1e\x36\xa4\xbd\xa0\x17\x3f\xa6\x57\x99\xb3\xfb\xe3\x55\xdc\xf4\x74\x77\xe9\xf0\x1e\x3d\x9f\x55\xad\x54\x31\x77\xb4\x1b\x8b\xc5\x3d\x56\x2b\xcc\x74\x1b\x38\x6e\x7d\xbd\xc1\x7a\x8d\xd7\x78\x98\xcf\x13\xb9\xa1\x40\x2e\x79\xef\xdf\xd5\xff\x50\x7c\xc1\x47\xf6\x16\x68\x38\x14\x2c\x4a\x15\xa3\x0c\xde\xf5\x2e\x4b\x5b\xb5\x81\x37\x70\xb4\xb3\xae\x75\x03\xab\x15\xab\x06\xd3\x9b\xe9\x80\xe8\xbe\x61\x83\xb2\xf6\xa4\x03\x16\x48\x2a\x36\x58\xcd\x5f\xf5\xb2\xd6\x03\xde\x51\xdd\xb2\xc1\xdb\xb3\xd2\xd2\x07\x83\x37\xe7\xde\x91\x3b\x0e\x56\xf7\x06\xdf\x29\x88\x95\x2a\xa1\x35\x3d\x73\x3d\x78\x29\xbd\x37\x78\xa6\x90\x42\x12\xf1\x4a\x69\x1e\xd7\xfc\x86\x63\x11\x6c\xa3\x69\x87\xc3\x32\x80\x8f\x3e\x30\x74\x4b\xf2\xc7\xd8\x6e\xe0\xcb\x7f\xad\x97\x02\x5f\x56\x0c\x2f\x38\x1c\xf0\xf2\xac\x66\x16\x39\x74\xb6\xe0\xbc\x1f\x2c\x4e\xa7\xe1\x9b\xaf\x8b\xe5\x97\x47\xbc\x4b\xa5\xc9\xe8\x38\xb9\x5c\x7c\x78\x5c\x3e\x99\x51\x9f\x5f\xd9\xbf\x1d\x9a\x7a\x8f\xfe\x48\x7f\x93\x74\x6b\x25\x2a\x49\xc1\xff\x91\x73\x37\xf9\x19\x00\x00\xff\xff\x08\x1d\x5b\xf5\x04\x03\x00\x00")

func iatemplatesPostgresql_too_many_connectionsYmlBytes() ([]byte, error) {
	return bindataRead(
		_iatemplatesPostgresql_too_many_connectionsYml,
		"iatemplates/postgresql_too_many_connections.yml",
	)
}

func iatemplatesPostgresql_too_many_connectionsYml() (*asset, error) {
	bytes, err := iatemplatesPostgresql_too_many_connectionsYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "iatemplates/postgresql_too_many_connections.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0x31, 0xf4, 0xed, 0x39, 0xff, 0x98, 0xc4, 0x6, 0xf5, 0x2a, 0xd8, 0xe0, 0x2, 0xd, 0xde, 0x22, 0x7c, 0xb2, 0xed, 0x16, 0x0, 0xa6, 0xdd, 0x9d, 0x87, 0xc5, 0x7e, 0xb4, 0x2d, 0xa2, 0x52}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"iatemplates/mysql_down.yml":                      iatemplatesMysql_downYml,
	"iatemplates/mysql_restarted.yml":                 iatemplatesMysql_restartedYml,
	"iatemplates/mysql_too_many_connections.yml":      iatemplatesMysql_too_many_connectionsYml,
	"iatemplates/node_high_cpu_load.yml":              iatemplatesNode_high_cpu_loadYml,
	"iatemplates/node_low_free_memory.yml":            iatemplatesNode_low_free_memoryYml,
	"iatemplates/node_swap_filled_up.yml":             iatemplatesNode_swap_filled_upYml,
	"iatemplates/postgresql_down.yml":                 iatemplatesPostgresql_downYml,
	"iatemplates/postgresql_restarted.yml":            iatemplatesPostgresql_restartedYml,
	"iatemplates/postgresql_too_many_connections.yml": iatemplatesPostgresql_too_many_connectionsYml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"iatemplates": {nil, map[string]*bintree{
		"mysql_down.yml":                      {iatemplatesMysql_downYml, map[string]*bintree{}},
		"mysql_restarted.yml":                 {iatemplatesMysql_restartedYml, map[string]*bintree{}},
		"mysql_too_many_connections.yml":      {iatemplatesMysql_too_many_connectionsYml, map[string]*bintree{}},
		"node_high_cpu_load.yml":              {iatemplatesNode_high_cpu_loadYml, map[string]*bintree{}},
		"node_low_free_memory.yml":            {iatemplatesNode_low_free_memoryYml, map[string]*bintree{}},
		"node_swap_filled_up.yml":             {iatemplatesNode_swap_filled_upYml, map[string]*bintree{}},
		"postgresql_down.yml":                 {iatemplatesPostgresql_downYml, map[string]*bintree{}},
		"postgresql_restarted.yml":            {iatemplatesPostgresql_restartedYml, map[string]*bintree{}},
		"postgresql_too_many_connections.yml": {iatemplatesPostgresql_too_many_connectionsYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
